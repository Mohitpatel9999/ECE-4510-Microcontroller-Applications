###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         10/Mar/2020  09:52:01
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\Src\stm32f4xx_hal_msp.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW6F1A.tmp
#        ("C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\Src\stm32f4xx_hal_msp.c" -D USE_HAL_DRIVER -D
#        STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM\HW6\List" -o "C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM\HW6\Obj" --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I "C:\Users\mohit\Desktop\Microapps projects\HW6\HW6\EWARM/../Inc\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM\HW6\List\stm32f4xx_hal_msp.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW6\HW6\EWARM\HW6\Obj\stm32f4xx_hal_msp.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\HW6\HW6\Src\stm32f4xx_hal_msp.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * File Name          : stm32f4xx_hal_msp.c
      5            * Description        : This file provides code for the MSP Initialization 
      6            *                      and de-Initialization codes.
      7            ******************************************************************************
      8            * @attention
      9            *
     10            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     11            * All rights reserved.</center></h2>
     12            *
     13            * This software component is licensed by ST under BSD 3-Clause license,
     14            * the "License"; You may not use this file except in compliance with the
     15            * License. You may obtain a copy of the License at:
     16            *                        opensource.org/licenses/BSD-3-Clause
     17            *
     18            ******************************************************************************
     19            */
     20          /* USER CODE END Header */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "main.h"
     24          /* USER CODE BEGIN Includes */
     25          
     26          /* USER CODE END Includes */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* USER CODE BEGIN TD */
     30          
     31          /* USER CODE END TD */
     32          
     33          /* Private define ------------------------------------------------------------*/
     34          /* USER CODE BEGIN Define */
     35           
     36          /* USER CODE END Define */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN Macro */
     40          
     41          /* USER CODE END Macro */
     42          
     43          /* Private variables ---------------------------------------------------------*/
     44          /* USER CODE BEGIN PV */
     45          
     46          /* USER CODE END PV */
     47          
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* USER CODE BEGIN PFP */
     50          
     51          /* USER CODE END PFP */
     52          
     53          /* External functions --------------------------------------------------------*/
     54          /* USER CODE BEGIN ExternalFunctions */
     55          
     56          /* USER CODE END ExternalFunctions */
     57          
     58          /* USER CODE BEGIN 0 */
     59          
     60          /* USER CODE END 0 */
     61          /**
     62            * Initializes the Global MSP.
     63            */

   \                                 In section .text, align 2, keep-with-next
     64          void HAL_MspInit(void)
     65          {
   \                     HAL_MspInit: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
     66            /* USER CODE BEGIN MspInit 0 */
     67          
     68            /* USER CODE END MspInit 0 */
     69          
     70            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x9000             STR      R0,[SP, #+0]
     71            __HAL_RCC_PWR_CLK_ENABLE();
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x....             LDR.N    R0,??DataTable8  ;; 0x40023840
   \        0xA   0x6841             LDR      R1,[R0, #+4]
   \        0xC   0xF441 0x4180      ORR      R1,R1,#0x4000
   \       0x10   0x6041             STR      R1,[R0, #+4]
   \       0x12   0x6841             LDR      R1,[R0, #+4]
   \       0x14   0xF401 0x4180      AND      R1,R1,#0x4000
   \       0x18   0x9100             STR      R1,[SP, #+0]
   \       0x1A   0x9900             LDR      R1,[SP, #+0]
   \       0x1C   0x9200             STR      R2,[SP, #+0]
   \       0x1E   0x6803             LDR      R3,[R0, #+0]
   \       0x20   0xF043 0x5380      ORR      R3,R3,#0x10000000
   \       0x24   0x6003             STR      R3,[R0, #+0]
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
     72          
     73            /* System interrupt init*/
     74          
     75            /* USER CODE BEGIN MspInit 1 */
     76          
     77            /* USER CODE END MspInit 1 */
     78          }
   \       0x30   0xB001             ADD      SP,SP,#+4
   \       0x32   0x4770             BX       LR               ;; return
     79          
     80          /**
     81          * @brief ADC MSP Initialization
     82          * This function configures the hardware resources used in this example
     83          * @param hadc: ADC handle pointer
     84          * @retval None
     85          */

   \                                 In section .text, align 2, keep-with-next
     86          void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
     87          {
   \                     HAL_ADC_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x....'....        BL       ?Subroutine2
     88            GPIO_InitTypeDef GPIO_InitStruct = {0};
     89            if(hadc->Instance==ADC1)
   \                     ??CrossCallReturnLabel_2: (+1)
   \        0x8   0x6821             LDR      R1,[R4, #+0]
   \        0xA   0x....             LDR.N    R0,??DataTable8_1  ;; 0x40012000
   \        0xC   0x4281             CMP      R1,R0
   \        0xE   0xD10F             BNE.N    ??CrossCallReturnLabel_1
     90            {
     91            /* USER CODE BEGIN ADC1_MspInit 0 */
     92          
     93            /* USER CODE END ADC1_MspInit 0 */
     94              /* Peripheral clock enable */
     95              __HAL_RCC_ADC1_CLK_ENABLE();
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40023830
   \       0x14   0x9200             STR      R2,[SP, #+0]
   \       0x16   0x6941             LDR      R1,[R0, #+20]
   \       0x18   0xF441 0x7180      ORR      R1,R1,#0x100
   \       0x1C   0x6141             STR      R1,[R0, #+20]
   \       0x1E   0x6941             LDR      R1,[R0, #+20]
   \       0x20   0xF401 0x7180      AND      R1,R1,#0x100
   \       0x24   0x9100             STR      R1,[SP, #+0]
   \       0x26   0x9900             LDR      R1,[SP, #+0]
     96            
     97              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x28   0x9200             STR      R2,[SP, #+0]
     98              /**ADC1 GPIO Configuration    
     99              PA0/WKUP     ------> ADC1_IN0 
    100              */
    101              GPIO_InitStruct.Pin = GPIO_PIN_0;
   \       0x2A   0x2101             MOVS     R1,#+1
   \       0x2C   0x....'....        BL       ?Subroutine1
    102              GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    103              GPIO_InitStruct.Pull = GPIO_NOPULL;
    104              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    105          
    106            /* USER CODE BEGIN ADC1_MspInit 1 */
    107          
    108            /* USER CODE END ADC1_MspInit 1 */
    109            }
    110          
    111          }
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x30   0xB006             ADD      SP,SP,#+24
   \       0x32   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \        0x2   0x2214             MOVS     R2,#+20
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0xA801             ADD      R0,SP,#+4
   \        0x8   0x....'....        B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x6803             LDR      R3,[R0, #+0]
   \        0x2   0xF043 0x0301      ORR      R3,R3,#0x1
   \        0x6   0x6003             STR      R3,[R0, #+0]
   \        0x8   0x2203             MOVS     R2,#+3
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x9800             LDR      R0,[SP, #+0]
   \       0x14   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40020000
   \       0x16   0x9101             STR      R1,[SP, #+4]
   \       0x18   0x9202             STR      R2,[SP, #+8]
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x9103             STR      R1,[SP, #+12]
   \       0x1E   0xA901             ADD      R1,SP,#+4
   \       0x20   0x....'....        B.W      HAL_GPIO_Init
    112          
    113          /**
    114          * @brief ADC MSP De-Initialization
    115          * This function freeze the hardware resources used in this example
    116          * @param hadc: ADC handle pointer
    117          * @retval None
    118          */

   \                                 In section .text, align 2, keep-with-next
    119          void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
    120          {
    121            if(hadc->Instance==ADC1)
   \                     HAL_ADC_MspDeInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable8_1  ;; 0x40012000
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD106             BNE.N    ??HAL_ADC_MspDeInit_0
    122            {
    123            /* USER CODE BEGIN ADC1_MspDeInit 0 */
    124          
    125            /* USER CODE END ADC1_MspDeInit 0 */
    126              /* Peripheral clock disable */
    127              __HAL_RCC_ADC1_CLK_DISABLE();
   \        0x8   0x....             LDR.N    R0,??DataTable8_3  ;; 0x40023844
   \        0xA   0x6802             LDR      R2,[R0, #+0]
   \        0xC   0xF422 0x7280      BIC      R2,R2,#0x100
   \       0x10   0x6002             STR      R2,[R0, #+0]
    128            
    129              /**ADC1 GPIO Configuration    
    130              PA0/WKUP     ------> ADC1_IN0 
    131              */
    132              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
   \       0x12   0x2101             MOVS     R1,#+1
   \       0x14   0x....             B.N      ?Subroutine0
    133          
    134            /* USER CODE BEGIN ADC1_MspDeInit 1 */
    135          
    136            /* USER CODE END ADC1_MspDeInit 1 */
    137            }
    138          
    139          }
   \                     ??HAL_ADC_MspDeInit_0: (+1)
   \       0x16   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable8_5  ;; 0x40020000
   \        0x2   0x....'....        B.W      HAL_GPIO_DeInit
    140          
    141          /**
    142          * @brief DAC MSP Initialization
    143          * This function configures the hardware resources used in this example
    144          * @param hdac: DAC handle pointer
    145          * @retval None
    146          */

   \                                 In section .text, align 2, keep-with-next
    147          void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
    148          {
   \                     HAL_DAC_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x....'....        BL       ?Subroutine2
    149            GPIO_InitTypeDef GPIO_InitStruct = {0};
    150            if(hdac->Instance==DAC)
   \                     ??CrossCallReturnLabel_3: (+1)
   \        0x8   0x6821             LDR      R1,[R4, #+0]
   \        0xA   0x....             LDR.N    R0,??DataTable8_4  ;; 0x40007400
   \        0xC   0x4281             CMP      R1,R0
   \        0xE   0xD10F             BNE.N    ??CrossCallReturnLabel_0
    151            {
    152            /* USER CODE BEGIN DAC_MspInit 0 */
    153          
    154            /* USER CODE END DAC_MspInit 0 */
    155              /* Peripheral clock enable */
    156              __HAL_RCC_DAC_CLK_ENABLE();
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x....             LDR.N    R0,??DataTable8_2  ;; 0x40023830
   \       0x14   0x9200             STR      R2,[SP, #+0]
   \       0x16   0x6901             LDR      R1,[R0, #+16]
   \       0x18   0xF041 0x5100      ORR      R1,R1,#0x20000000
   \       0x1C   0x6101             STR      R1,[R0, #+16]
   \       0x1E   0x6901             LDR      R1,[R0, #+16]
   \       0x20   0xF001 0x5100      AND      R1,R1,#0x20000000
   \       0x24   0x9100             STR      R1,[SP, #+0]
   \       0x26   0x9900             LDR      R1,[SP, #+0]
    157            
    158              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x28   0x9200             STR      R2,[SP, #+0]
    159              /**DAC GPIO Configuration    
    160              PA4     ------> DAC_OUT1
    161              PA5     ------> DAC_OUT2 
    162              */
    163              GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
   \       0x2A   0x2130             MOVS     R1,#+48
   \       0x2C   0x....'....        BL       ?Subroutine1
    164              GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    165              GPIO_InitStruct.Pull = GPIO_NOPULL;
    166              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    167          
    168            /* USER CODE BEGIN DAC_MspInit 1 */
    169          
    170            /* USER CODE END DAC_MspInit 1 */
    171            }
    172          
    173          }
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x30   0xB006             ADD      SP,SP,#+24
   \       0x32   0xBD10             POP      {R4,PC}          ;; return
    174          
    175          /**
    176          * @brief DAC MSP De-Initialization
    177          * This function freeze the hardware resources used in this example
    178          * @param hdac: DAC handle pointer
    179          * @retval None
    180          */

   \                                 In section .text, align 2, keep-with-next
    181          void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
    182          {
    183            if(hdac->Instance==DAC)
   \                     HAL_DAC_MspDeInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable8_4  ;; 0x40007400
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD106             BNE.N    ??HAL_DAC_MspDeInit_0
    184            {
    185            /* USER CODE BEGIN DAC_MspDeInit 0 */
    186          
    187            /* USER CODE END DAC_MspDeInit 0 */
    188              /* Peripheral clock disable */
    189              __HAL_RCC_DAC_CLK_DISABLE();
   \        0x8   0x....             LDR.N    R0,??DataTable8  ;; 0x40023840
   \        0xA   0x6802             LDR      R2,[R0, #+0]
   \        0xC   0xF022 0x5200      BIC      R2,R2,#0x20000000
   \       0x10   0x6002             STR      R2,[R0, #+0]
    190            
    191              /**DAC GPIO Configuration    
    192              PA4     ------> DAC_OUT1
    193              PA5     ------> DAC_OUT2 
    194              */
    195              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
   \       0x12   0x2130             MOVS     R1,#+48
   \       0x14   0x....             B.N      ?Subroutine0
    196          
    197            /* USER CODE BEGIN DAC_MspDeInit 1 */
    198          
    199            /* USER CODE END DAC_MspDeInit 1 */
    200            }
    201          
    202          }
   \                     ??HAL_DAC_MspDeInit_0: (+1)
   \       0x16   0x4770             BX       LR               ;; return
    203          
    204          /**
    205          * @brief TIM_Base MSP Initialization
    206          * This function configures the hardware resources used in this example
    207          * @param htim_base: TIM_Base handle pointer
    208          * @retval None
    209          */

   \                                 In section .text, align 2, keep-with-next
    210          void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
    211          {
   \                     HAL_TIM_Base_MspInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    212            if(htim_base->Instance==TIM2)
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R0,??DataTable8  ;; 0x40023840
   \        0x6   0xF1B1 0x4F80      CMP      R1,#+1073741824
   \        0xA   0xD10E             BNE.N    ??HAL_TIM_Base_MspInit_0
    213            {
    214            /* USER CODE BEGIN TIM2_MspInit 0 */
    215          
    216            /* USER CODE END TIM2_MspInit 0 */
    217              /* Peripheral clock enable */
    218              __HAL_RCC_TIM2_CLK_ENABLE();
   \        0xC   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x10   0xF042 0x0201      ORR      R2,R2,#0x1
   \       0x14   0x....'....        BL       ?Subroutine4
    219              /* TIM2 interrupt Init */
    220              HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x18   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0x9800             LDR      R0,[SP, #+0]
   \       0x20   0x201C             MOVS     R0,#+28
   \       0x22   0x....'....        BL       HAL_NVIC_SetPriority
    221              HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \       0x26   0x201C             MOVS     R0,#+28
   \       0x28   0xE034             B.N      ??HAL_TIM_Base_MspInit_1
    222            /* USER CODE BEGIN TIM2_MspInit 1 */
    223          
    224            /* USER CODE END TIM2_MspInit 1 */
    225            }
    226            else if(htim_base->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspInit_0: (+1)
   \       0x2A   0x....             LDR.N    R2,??DataTable8_6  ;; 0x40000400
   \       0x2C   0x4291             CMP      R1,R2
   \       0x2E   0xD10E             BNE.N    ??HAL_TIM_Base_MspInit_2
    227            {
    228            /* USER CODE BEGIN TIM3_MspInit 0 */
    229          
    230            /* USER CODE END TIM3_MspInit 0 */
    231              /* Peripheral clock enable */
    232              __HAL_RCC_TIM3_CLK_ENABLE();
   \       0x30   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x34   0xF042 0x0202      ORR      R2,R2,#0x2
   \       0x38   0x....'....        BL       ?Subroutine4
    233              /* TIM3 interrupt Init */
    234              HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x3C   0xF000 0x0002      AND      R0,R0,#0x2
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0x9800             LDR      R0,[SP, #+0]
   \       0x44   0x201D             MOVS     R0,#+29
   \       0x46   0x....'....        BL       HAL_NVIC_SetPriority
    235              HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \       0x4A   0x201D             MOVS     R0,#+29
   \       0x4C   0xE022             B.N      ??HAL_TIM_Base_MspInit_1
    236            /* USER CODE BEGIN TIM3_MspInit 1 */
    237          
    238            /* USER CODE END TIM3_MspInit 1 */
    239            }
    240            else if(htim_base->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspInit_2: (+1)
   \       0x4E   0x....             LDR.N    R2,??DataTable8_7  ;; 0x40000800
   \       0x50   0x4291             CMP      R1,R2
   \       0x52   0xD10E             BNE.N    ??HAL_TIM_Base_MspInit_3
    241            {
    242            /* USER CODE BEGIN TIM4_MspInit 0 */
    243          
    244            /* USER CODE END TIM4_MspInit 0 */
    245              /* Peripheral clock enable */
    246              __HAL_RCC_TIM4_CLK_ENABLE();
   \       0x54   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x58   0xF042 0x0204      ORR      R2,R2,#0x4
   \       0x5C   0x....'....        BL       ?Subroutine4
    247              /* TIM4 interrupt Init */
    248              HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x60   0xF000 0x0004      AND      R0,R0,#0x4
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0x9800             LDR      R0,[SP, #+0]
   \       0x68   0x201E             MOVS     R0,#+30
   \       0x6A   0x....'....        BL       HAL_NVIC_SetPriority
    249              HAL_NVIC_EnableIRQ(TIM4_IRQn);
   \       0x6E   0x201E             MOVS     R0,#+30
   \       0x70   0xE010             B.N      ??HAL_TIM_Base_MspInit_1
    250            /* USER CODE BEGIN TIM4_MspInit 1 */
    251          
    252            /* USER CODE END TIM4_MspInit 1 */
    253            }
    254            else if(htim_base->Instance==TIM5)
   \                     ??HAL_TIM_Base_MspInit_3: (+1)
   \       0x72   0x....             LDR.N    R2,??DataTable8_8  ;; 0x40000c00
   \       0x74   0x4291             CMP      R1,R2
   \       0x76   0xD111             BNE.N    ??HAL_TIM_Base_MspInit_4
    255            {
    256            /* USER CODE BEGIN TIM5_MspInit 0 */
    257          
    258            /* USER CODE END TIM5_MspInit 0 */
    259              /* Peripheral clock enable */
    260              __HAL_RCC_TIM5_CLK_ENABLE();
   \       0x78   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_7: (+1)
   \       0x7C   0xF042 0x0208      ORR      R2,R2,#0x8
   \       0x80   0x....'....        BL       ?Subroutine4
    261              /* TIM5 interrupt Init */
    262              HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x84   0xF000 0x0008      AND      R0,R0,#0x8
   \       0x88   0x9000             STR      R0,[SP, #+0]
   \       0x8A   0x9800             LDR      R0,[SP, #+0]
   \       0x8C   0x2032             MOVS     R0,#+50
   \       0x8E   0x....'....        BL       HAL_NVIC_SetPriority
    263              HAL_NVIC_EnableIRQ(TIM5_IRQn);
   \       0x92   0x2032             MOVS     R0,#+50
   \                     ??HAL_TIM_Base_MspInit_1: (+1)
   \       0x94   0xE8BD 0x4002      POP      {R1,LR}
   \       0x98   0x....'....        B.W      HAL_NVIC_EnableIRQ
    264            /* USER CODE BEGIN TIM5_MspInit 1 */
    265          
    266            /* USER CODE END TIM5_MspInit 1 */
    267            }
    268          
    269          }
   \                     ??HAL_TIM_Base_MspInit_4: (+1)
   \       0x9C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x6002             STR      R2,[R0, #+0]
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x9100             STR      R1,[SP, #+0]
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0x4770             BX       LR
    270          
    271          /**
    272          * @brief TIM_Base MSP De-Initialization
    273          * This function freeze the hardware resources used in this example
    274          * @param htim_base: TIM_Base handle pointer
    275          * @retval None
    276          */

   \                                 In section .text, align 2, keep-with-next
    277          void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
    278          {
    279            if(htim_base->Instance==TIM2)
   \                     HAL_TIM_Base_MspDeInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable8  ;; 0x40023840
   \        0x4   0xF1B0 0x4F80      CMP      R0,#+1073741824
   \        0x8   0xD105             BNE.N    ??HAL_TIM_Base_MspDeInit_0
    280            {
    281            /* USER CODE BEGIN TIM2_MspDeInit 0 */
    282          
    283            /* USER CODE END TIM2_MspDeInit 0 */
    284              /* Peripheral clock disable */
    285              __HAL_RCC_TIM2_CLK_DISABLE();
   \        0xA   0x6808             LDR      R0,[R1, #+0]
   \        0xC   0x0840             LSRS     R0,R0,#+1
   \        0xE   0x0040             LSLS     R0,R0,#+1
   \       0x10   0x6008             STR      R0,[R1, #+0]
    286          
    287              /* TIM2 interrupt DeInit */
    288              HAL_NVIC_DisableIRQ(TIM2_IRQn);
   \       0x12   0x201C             MOVS     R0,#+28
   \       0x14   0xE019             B.N      ??HAL_TIM_Base_MspDeInit_1
    289            /* USER CODE BEGIN TIM2_MspDeInit 1 */
    290          
    291            /* USER CODE END TIM2_MspDeInit 1 */
    292            }
    293            else if(htim_base->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspDeInit_0: (+1)
   \       0x16   0x....             LDR.N    R2,??DataTable8_6  ;; 0x40000400
   \       0x18   0x4290             CMP      R0,R2
   \       0x1A   0xD105             BNE.N    ??HAL_TIM_Base_MspDeInit_2
    294            {
    295            /* USER CODE BEGIN TIM3_MspDeInit 0 */
    296          
    297            /* USER CODE END TIM3_MspDeInit 0 */
    298              /* Peripheral clock disable */
    299              __HAL_RCC_TIM3_CLK_DISABLE();
   \       0x1C   0x6808             LDR      R0,[R1, #+0]
   \       0x1E   0xF020 0x0002      BIC      R0,R0,#0x2
   \       0x22   0x6008             STR      R0,[R1, #+0]
    300          
    301              /* TIM3 interrupt DeInit */
    302              HAL_NVIC_DisableIRQ(TIM3_IRQn);
   \       0x24   0x201D             MOVS     R0,#+29
   \       0x26   0xE010             B.N      ??HAL_TIM_Base_MspDeInit_1
    303            /* USER CODE BEGIN TIM3_MspDeInit 1 */
    304          
    305            /* USER CODE END TIM3_MspDeInit 1 */
    306            }
    307            else if(htim_base->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspDeInit_2: (+1)
   \       0x28   0x....             LDR.N    R2,??DataTable8_7  ;; 0x40000800
   \       0x2A   0x4290             CMP      R0,R2
   \       0x2C   0xD105             BNE.N    ??HAL_TIM_Base_MspDeInit_3
    308            {
    309            /* USER CODE BEGIN TIM4_MspDeInit 0 */
    310          
    311            /* USER CODE END TIM4_MspDeInit 0 */
    312              /* Peripheral clock disable */
    313              __HAL_RCC_TIM4_CLK_DISABLE();
   \       0x2E   0x6808             LDR      R0,[R1, #+0]
   \       0x30   0xF020 0x0004      BIC      R0,R0,#0x4
   \       0x34   0x6008             STR      R0,[R1, #+0]
    314          
    315              /* TIM4 interrupt DeInit */
    316              HAL_NVIC_DisableIRQ(TIM4_IRQn);
   \       0x36   0x201E             MOVS     R0,#+30
   \       0x38   0xE007             B.N      ??HAL_TIM_Base_MspDeInit_1
    317            /* USER CODE BEGIN TIM4_MspDeInit 1 */
    318          
    319            /* USER CODE END TIM4_MspDeInit 1 */
    320            }
    321            else if(htim_base->Instance==TIM5)
   \                     ??HAL_TIM_Base_MspDeInit_3: (+1)
   \       0x3A   0x....             LDR.N    R2,??DataTable8_8  ;; 0x40000c00
   \       0x3C   0x4290             CMP      R0,R2
   \       0x3E   0xD106             BNE.N    ??HAL_TIM_Base_MspDeInit_4
    322            {
    323            /* USER CODE BEGIN TIM5_MspDeInit 0 */
    324          
    325            /* USER CODE END TIM5_MspDeInit 0 */
    326              /* Peripheral clock disable */
    327              __HAL_RCC_TIM5_CLK_DISABLE();
   \       0x40   0x6808             LDR      R0,[R1, #+0]
   \       0x42   0xF020 0x0008      BIC      R0,R0,#0x8
   \       0x46   0x6008             STR      R0,[R1, #+0]
    328          
    329              /* TIM5 interrupt DeInit */
    330              HAL_NVIC_DisableIRQ(TIM5_IRQn);
   \       0x48   0x2032             MOVS     R0,#+50
   \                     ??HAL_TIM_Base_MspDeInit_1: (+1)
   \       0x4A   0x....'....        B.W      HAL_NVIC_DisableIRQ
    331            /* USER CODE BEGIN TIM5_MspDeInit 1 */
    332          
    333            /* USER CODE END TIM5_MspDeInit 1 */
    334            }
    335          
    336          }
   \                     ??HAL_TIM_Base_MspDeInit_4: (+1)
   \       0x4E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x4001'2000        DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x4002'3844        DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x4000'7400        DC32     0x40007400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x4000'0C00        DC32     0x40000c00
    337          
    338          /* USER CODE BEGIN 1 */
    339          
    340          /* USER CODE END 1 */
    341          
    342          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_ADC_MspDeInit
         0   -> HAL_GPIO_DeInit
      32   HAL_ADC_MspInit
        32   -> HAL_GPIO_Init
        32   -> memset
       0   HAL_DAC_MspDeInit
         0   -> HAL_GPIO_DeInit
      32   HAL_DAC_MspInit
        32   -> HAL_GPIO_Init
        32   -> memset
       4   HAL_MspInit
       0   HAL_TIM_Base_MspDeInit
         0   -> HAL_NVIC_DisableIRQ
       8   HAL_TIM_Base_MspInit
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       6  ?Subroutine0
      36  ?Subroutine1
      12  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
      24  HAL_ADC_MspDeInit
      52  HAL_ADC_MspInit
      24  HAL_DAC_MspDeInit
      52  HAL_DAC_MspInit
      52  HAL_MspInit
      80  HAL_TIM_Base_MspDeInit
     158  HAL_TIM_Base_MspInit

 
 548 bytes in section .text
 
 548 bytes of CODE memory

Errors: none
Warnings: none
