###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         07/Apr/2020  14:08:05
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW9\HW9\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW8383.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\HW9\HW9\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM\HW9\List" -o "C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM\HW9\Obj" --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I "C:\Users\mohit\Desktop\Microapps projects\HW9\HW9\EWARM/../Inc\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW9\HW9\EWARM\HW9\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW9\HW9\EWARM\HW9\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\HW9\HW9\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .data, align 4
     44          UART_HandleTypeDef huart1;
     45          
     46          /* USER CODE BEGIN PV */
     47          uint8_t tmp1,tmp2,tmp3,tmp4,tmp5,tmp6  = 0;
     48          uint8_t myTx1[6] = "ack\r\n";
     49          uint8_t myTx2[7] = "nack\r\n";
     50          uint8_t myRx1[1];
   \                     myRx1:
   \        0x0   0x00               DC8 0
     51          uint8_t myRx2[1];
   \                     myRx2:
   \        0x1   0x00               DC8 0
   \                     tmp1:
   \        0x2   0x00               DC8 0
   \                     tmp2:
   \        0x3   0x00               DC8 0
   \                     tmp3:
   \        0x4   0x00               DC8 0
   \                     tmp4:
   \        0x5   0x00               DC8 0
   \                     tmp5:
   \        0x6   0x00               DC8 0
   \                     tmp6:
   \        0x7   0x00               DC8 0
     52          uint8_t synErrorCount,charErrorCount = 0;
   \                     synErrorCount:
   \        0x8   0x00               DC8 0
   \                     charErrorCount:
   \        0x9   0x00               DC8 0
   \        0xA   0x00 0x00          DC8 0, 0
   \                     huart1:
   \        0xC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x1C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x2C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x3C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \                     myTx1:
   \       0x4C   0x61 0x63          DC8 "ack\015\012"

   \              0x6B 0x0D    

   \              0x0A 0x00
   \       0x52   0x00 0x00          DC8 0, 0
   \                     myTx2:
   \       0x54   0x6E 0x61          DC8 "nack\015\012"

   \              0x63 0x6B    

   \              0x0D 0x0A    

   \              0x00
   \       0x5B   0x00               DC8 0
     53          
     54          /* USER CODE END PV */
     55          
     56          /* Private function prototypes -----------------------------------------------*/
     57          void SystemClock_Config(void);
     58          static void MX_GPIO_Init(void);
     59          static void MX_USART1_UART_Init(void);
     60          /* USER CODE BEGIN PFP */
     61          
     62          /* USER CODE END PFP */
     63          
     64          /* Private user code ---------------------------------------------------------*/
     65          /* USER CODE BEGIN 0 */
     66          
     67          /* USER CODE END 0 */
     68          
     69          /**
     70            * @brief  The application entry point.
     71            * @retval int
     72            */

   \                                 In section .text, align 2, keep-with-next
     73          int main(void)
     74          {
   \                     main: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
     75            /* USER CODE BEGIN 1 */
     76          
     77            /* USER CODE END 1 */
     78            
     79          
     80            /* MCU Configuration--------------------------------------------------------*/
     81          
     82            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     83            HAL_Init();
   \        0x2   0x....'....        BL       HAL_Init
     84          
     85            /* USER CODE BEGIN Init */
     86          
     87            /* USER CODE END Init */
     88          
     89            /* Configure the system clock */
     90            SystemClock_Config();
   \        0x6   0x....'....        BL       SystemClock_Config
     91          
     92            /* USER CODE BEGIN SysInit */
     93          
     94            /* USER CODE END SysInit */
     95          
     96            /* Initialize all configured peripherals */
     97            MX_GPIO_Init();
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x9000             STR      R0,[SP, #+0]
     98            MX_USART1_UART_Init();
   \        0xE   0x....             LDR.N    R6,??DataTable1
   \       0x10   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40023830
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x18   0x6001             STR      R1,[R0, #+0]
   \       0x1A   0x6802             LDR      R2,[R0, #+0]
   \       0x1C   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x20   0x9200             STR      R2,[SP, #+0]
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x9900             LDR      R1,[SP, #+0]
   \       0x26   0x....             LDR.N    R1,??DataTable1_2  ;; 0x40011000
   \       0x28   0x9200             STR      R2,[SP, #+0]
   \       0x2A   0x6803             LDR      R3,[R0, #+0]
   \       0x2C   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x30   0x6003             STR      R3,[R0, #+0]
   \       0x32   0x6800             LDR      R0,[R0, #+0]
   \       0x34   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0x9800             LDR      R0,[SP, #+0]
   \       0x3C   0x60F1             STR      R1,[R6, #+12]
   \       0x3E   0xF24C 0x3050      MOVW     R0,#+50000
   \       0x42   0x6130             STR      R0,[R6, #+16]
   \       0x44   0xF44F 0x6180      MOV      R1,#+1024
   \       0x48   0x200C             MOVS     R0,#+12
   \       0x4A   0x6230             STR      R0,[R6, #+32]
   \       0x4C   0x6172             STR      R2,[R6, #+20]
   \       0x4E   0x61B2             STR      R2,[R6, #+24]
   \       0x50   0x61F1             STR      R1,[R6, #+28]
   \       0x52   0x6272             STR      R2,[R6, #+36]
   \       0x54   0x62B2             STR      R2,[R6, #+40]
   \       0x56   0xF106 0x000C      ADD      R0,R6,#+12
   \       0x5A   0x....'....        BL       HAL_UART_Init
   \       0x5E   0xE001             B.N      ??CrossCallReturnLabel_3
     99            /* USER CODE BEGIN 2 */
    100          
    101            /* USER CODE END 2 */
    102           
    103           
    104          
    105            /* Infinite loop */
    106            /* USER CODE BEGIN WHILE */
    107            while (1)
    108            {
    109              tmp1 = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_ORE);
    110              tmp2 = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_ERR);
    111              tmp3 = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_PE);
    112              tmp4 = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_ERR);
    113              tmp5 = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_FE);
    114              tmp6 = __HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_ERR);
    115              /* UART Over-Run interrupt occurred ----------------------------------------*/
    116              if((tmp1 != RESET) && (tmp2 != RESET) && (tmp3 != RESET) && (tmp4 != RESET) && (tmp5 != RESET) && (tmp6 != RESET))
    117              { 
    118                HAL_UART_Transmit_IT(&huart1,myTx1,6);                                     // trasmit "Ack" beacuse no errors
    119                HAL_UART_Receive_IT(&huart1,myRx1,1);                                     // reacive data and store it in myRx1[1]
    120                if (synErrorCount < 5 && myRx1[1] == 0x16){                               // "syn" is succefully received
    121                     synErrorCount = 0;
    122                     HAL_UART_Receive_IT(&huart1,myRx2,1);                             // reacive data and store it in myRx2[1]
    123                     
    124                if (charErrorCount < 5 && myRx2[1] == 0x30){                          // "ascii "0" " is succefully received
    125                    charErrorCount = 0;                                               // reset the CharErrorCount to 0
    126                    HAL_UART_Transmit_IT(&huart1,myTx1,6);                                // trasmit "Ack" beacuse ascii "0" is recived
    127                    while(1){                                                          // infinite while loop with return value 0 beaucse we have recived our char
    128                      return 0;
    129                    }
    130                    }
    131                else {         
    132                  HAL_UART_Transmit_IT(&huart1,myTx2,7);                                   // trasmit "NAck" beacuse acsii "0" is not recived
    133                  charErrorCount ++;                                                     // ascii "0" is not recived thu increment the eeror count 
    134                  if (charErrorCount>= 5){                                               // if error count is 5 or more then ener the while looop 
    135                    while(1){
    136                      return 2;
    137                    }
    138                  }
    139                }
    140                }
    141                else {                                                                   
    142                  synErrorCount ++;                                                        // if "syn" is not recived then increment the error count 
    143                  if (synErrorCount>= 5){                                                 //if syn error is 5 or more enter the while loop with return 1
    144                    while(1){
    145                      return 1;
    146                    }
    147                  }
    148                } 
    149              }
    150              else {
    151                HAL_UART_Transmit_IT(&huart1,myTx2,7);                                   // trasmit "NAck" beacuse an error in flag
   \                     ??main_0: (+1)
   \       0x60   0x....'....        BL       ?Subroutine0
    152              }
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x64   0x68F1             LDR      R1,[R6, #+12]
   \       0x66   0x6808             LDR      R0,[R1, #+0]
   \       0x68   0x08C0             LSRS     R0,R0,#+3
   \       0x6A   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x6E   0x70B0             STRB     R0,[R6, #+2]
   \       0x70   0x694D             LDR      R5,[R1, #+20]
   \       0x72   0xF005 0x0501      AND      R5,R5,#0x1
   \       0x76   0x70F5             STRB     R5,[R6, #+3]
   \       0x78   0x680C             LDR      R4,[R1, #+0]
   \       0x7A   0xF004 0x0401      AND      R4,R4,#0x1
   \       0x7E   0x7134             STRB     R4,[R6, #+4]
   \       0x80   0x694B             LDR      R3,[R1, #+20]
   \       0x82   0xF003 0x0301      AND      R3,R3,#0x1
   \       0x86   0x7173             STRB     R3,[R6, #+5]
   \       0x88   0x680A             LDR      R2,[R1, #+0]
   \       0x8A   0x0852             LSRS     R2,R2,#+1
   \       0x8C   0xF002 0x0201      AND      R2,R2,#0x1
   \       0x90   0x71B2             STRB     R2,[R6, #+6]
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0x6949             LDR      R1,[R1, #+20]
   \       0x96   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x9A   0xBF18             IT       NE
   \       0x9C   0x2D00             CMPNE    R5,#+0
   \       0x9E   0x71F1             STRB     R1,[R6, #+7]
   \       0xA0   0xD0DE             BEQ.N    ??main_0
   \       0xA2   0x2C00             CMP      R4,#+0
   \       0xA4   0xBF18             IT       NE
   \       0xA6   0x2B00             CMPNE    R3,#+0
   \       0xA8   0xD0DA             BEQ.N    ??main_0
   \       0xAA   0x2A00             CMP      R2,#+0
   \       0xAC   0xBF18             IT       NE
   \       0xAE   0x2900             CMPNE    R1,#+0
   \       0xB0   0xD0D6             BEQ.N    ??main_0
   \       0xB2   0x2206             MOVS     R2,#+6
   \       0xB4   0xF106 0x014C      ADD      R1,R6,#+76
   \       0xB8   0x....'....        BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0xBC   0x2201             MOVS     R2,#+1
   \       0xBE   0x4631             MOV      R1,R6
   \       0xC0   0xF106 0x000C      ADD      R0,R6,#+12
   \       0xC4   0x....'....        BL       HAL_UART_Receive_IT
   \       0xC8   0x7A30             LDRB     R0,[R6, #+8]
   \       0xCA   0x2805             CMP      R0,#+5
   \       0xCC   0xDA23             BGE.N    ??main_1
   \       0xCE   0x7871             LDRB     R1,[R6, #+1]
   \       0xD0   0x2916             CMP      R1,#+22
   \       0xD2   0xD120             BNE.N    ??main_1
   \       0xD4   0x2000             MOVS     R0,#+0
   \       0xD6   0x7230             STRB     R0,[R6, #+8]
   \       0xD8   0x2201             MOVS     R2,#+1
   \       0xDA   0x1C71             ADDS     R1,R6,#+1
   \       0xDC   0xF106 0x000C      ADD      R0,R6,#+12
   \       0xE0   0x....'....        BL       HAL_UART_Receive_IT
   \       0xE4   0x7A70             LDRB     R0,[R6, #+9]
   \       0xE6   0x2805             CMP      R0,#+5
   \       0xE8   0xDA0B             BGE.N    ??main_2
   \       0xEA   0x78B0             LDRB     R0,[R6, #+2]
   \       0xEC   0x2830             CMP      R0,#+48
   \       0xEE   0xD108             BNE.N    ??main_2
   \       0xF0   0x2100             MOVS     R1,#+0
   \       0xF2   0x7271             STRB     R1,[R6, #+9]
   \       0xF4   0x2206             MOVS     R2,#+6
   \       0xF6   0xF106 0x014C      ADD      R1,R6,#+76
   \       0xFA   0x....'....        BL       ??Subroutine0_0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xFE   0x2000             MOVS     R0,#+0
   \      0x100   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??main_2: (+1)
   \      0x102   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \      0x106   0x7A70             LDRB     R0,[R6, #+9]
   \      0x108   0x1C40             ADDS     R0,R0,#+1
   \      0x10A   0x7270             STRB     R0,[R6, #+9]
   \      0x10C   0xB2C0             UXTB     R0,R0
   \      0x10E   0x2805             CMP      R0,#+5
   \      0x110   0xDBA8             BLT.N    ??CrossCallReturnLabel_3
   \      0x112   0x2002             MOVS     R0,#+2
   \      0x114   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??main_1: (+1)
   \      0x116   0x1C40             ADDS     R0,R0,#+1
   \      0x118   0x7230             STRB     R0,[R6, #+8]
   \      0x11A   0xB2C0             UXTB     R0,R0
   \      0x11C   0x2805             CMP      R0,#+5
   \      0x11E   0xDBA1             BLT.N    ??CrossCallReturnLabel_3
   \      0x120   0x2001             MOVS     R0,#+1
   \      0x122   0xBD76             POP      {R1,R2,R4-R6,PC}
    153              
    154              /* USER CODE END WHILE */
    155          
    156              /* USER CODE BEGIN 3 */
    157            }
    158            /* USER CODE END 3 */
    159          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2207             MOVS     R2,#+7
   \        0x2   0xF106 0x0154      ADD      R1,R6,#+84
   \                     ??Subroutine0_0: (+1)
   \        0x6   0xF106 0x000C      ADD      R0,R6,#+12
   \        0xA   0x....'....        B.W      HAL_UART_Transmit_IT
    160          
    161          /**
    162            * @brief System Clock Configuration
    163            * @retval None
    164            */

   \                                 In section .text, align 2, keep-with-next
    165          void SystemClock_Config(void)
    166          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2214             MOVS     R2,#+20
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       memset
    167            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    168            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    169          
    170            /** Configure the main internal regulator output voltage 
    171            */
    172            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
    173            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
    174            /** Initializes the CPU, AHB and APB busses clocks 
    175            */
    176            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    177            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x1C   0xF44F 0x3380      MOV      R3,#+65536
   \       0x20   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40023840
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40007000
   \       0x38   0x9100             STR      R1,[SP, #+0]
   \       0x3A   0x6802             LDR      R2,[R0, #+0]
   \       0x3C   0xF422 0x4240      BIC      R2,R2,#0xC000
   \       0x40   0xF442 0x4280      ORR      R2,R2,#0x4000
   \       0x44   0x6002             STR      R2,[R0, #+0]
   \       0x46   0x2201             MOVS     R2,#+1
   \       0x48   0x6800             LDR      R0,[R0, #+0]
   \       0x4A   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x4E   0x9000             STR      R0,[SP, #+0]
    178            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    179            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    180            RCC_OscInitStruct.PLL.PLLM = 4;
    181            RCC_OscInitStruct.PLL.PLLN = 50;
    182            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    183            RCC_OscInitStruct.PLL.PLLQ = 4;
    184            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x50   0xA806             ADD      R0,SP,#+24
   \       0x52   0x9900             LDR      R1,[SP, #+0]
   \       0x54   0x9206             STR      R2,[SP, #+24]
   \       0x56   0x2102             MOVS     R1,#+2
   \       0x58   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x5C   0x910C             STR      R1,[SP, #+48]
   \       0x5E   0x920D             STR      R2,[SP, #+52]
   \       0x60   0x2104             MOVS     R1,#+4
   \       0x62   0x2232             MOVS     R2,#+50
   \       0x64   0x910E             STR      R1,[SP, #+56]
   \       0x66   0x920F             STR      R2,[SP, #+60]
   \       0x68   0x2102             MOVS     R1,#+2
   \       0x6A   0x2204             MOVS     R2,#+4
   \       0x6C   0x9307             STR      R3,[SP, #+28]
   \       0x6E   0x9110             STR      R1,[SP, #+64]
   \       0x70   0x9211             STR      R2,[SP, #+68]
   \       0x72   0x....'....        BL       HAL_RCC_OscConfig
    185            {
    186              Error_Handler();
    187            }
    188            /** Initializes the CPU, AHB and APB busses clocks 
    189            */
    190            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    191                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    192            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x9102             STR      R1,[SP, #+8]
   \       0x7A   0x200F             MOVS     R0,#+15
    193            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    194            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
   \       0x7C   0xF44F 0x5180      MOV      R1,#+4096
   \       0x80   0x9001             STR      R0,[SP, #+4]
   \       0x82   0x2200             MOVS     R2,#+0
   \       0x84   0x9104             STR      R1,[SP, #+16]
   \       0x86   0x9203             STR      R2,[SP, #+12]
    195            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \       0x88   0x9205             STR      R2,[SP, #+20]
    196          
    197            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   \       0x8A   0x2101             MOVS     R1,#+1
   \       0x8C   0xA801             ADD      R0,SP,#+4
   \       0x8E   0x....'....        BL       HAL_RCC_ClockConfig
    198            {
    199              Error_Handler();
    200            }
    201          }
   \       0x92   0xB013             ADD      SP,SP,#+76
   \       0x94   0xBD00             POP      {PC}             ;; return
    202          
    203          /**
    204            * @brief USART1 Initialization Function
    205            * @param None
    206            * @retval None
    207            */
    208          static void MX_USART1_UART_Init(void)
    209          {
    210          
    211            /* USER CODE BEGIN USART1_Init 0 */
    212          
    213            /* USER CODE END USART1_Init 0 */
    214          
    215            /* USER CODE BEGIN USART1_Init 1 */
    216          
    217            /* USER CODE END USART1_Init 1 */
    218            huart1.Instance = USART1;
    219            huart1.Init.BaudRate = 50000;
    220            huart1.Init.WordLength = UART_WORDLENGTH_8B;
    221            huart1.Init.StopBits = UART_STOPBITS_1;
    222            huart1.Init.Parity = UART_PARITY_EVEN;
    223            huart1.Init.Mode = UART_MODE_TX_RX;
    224            huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    225            huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    226            if (HAL_UART_Init(&huart1) != HAL_OK)
    227            {
    228              Error_Handler();
    229            }
    230            /* USER CODE BEGIN USART1_Init 2 */
    231          
    232            /* USER CODE END USART1_Init 2 */
    233          
    234          }
    235          
    236          /**
    237            * @brief GPIO Initialization Function
    238            * @param None
    239            * @retval None
    240            */
    241          static void MX_GPIO_Init(void)
    242          {
    243          
    244            /* GPIO Ports Clock Enable */
    245            __HAL_RCC_GPIOH_CLK_ENABLE();
    246            __HAL_RCC_GPIOA_CLK_ENABLE();
    247          
    248          }
    249          
    250          /* USER CODE BEGIN 4 */
    251          
    252          /* USER CODE END 4 */
    253          
    254          /**
    255            * @brief  This function is executed in case of error occurrence.
    256            * @retval None
    257            */

   \                                 In section .text, align 2, keep-with-next
    258          void Error_Handler(void)
    259          {
    260            /* USER CODE BEGIN Error_Handler_Debug */
    261            /* User can add his own implementation to report the HAL error return state */
    262          
    263            /* USER CODE END Error_Handler_Debug */
    264          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     myRx1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x4000'7000        DC32     0x40007000
    265          
    266          #ifdef  USE_FULL_ASSERT
    267          /**
    268            * @brief  Reports the name of the source file and the source line number
    269            *         where the assert_param error has occurred.
    270            * @param  file: pointer to the source file name
    271            * @param  line: assert_param error line source number
    272            * @retval None
    273            */
    274          void assert_failed(uint8_t *file, uint32_t line)
    275          { 
    276            /* USER CODE BEGIN 6 */
    277            /* User can add his own implementation to report the file name and line number,
    278               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    279            /* USER CODE END 6 */
    280          }
    281          #endif /* USE_FULL_ASSERT */
    282          
    283          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      24   main
        24   -> HAL_Init
        24   -> HAL_UART_Init
        24   -> HAL_UART_Receive_IT
        24   -> HAL_UART_Transmit_IT
        24   -> SystemClock_Config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      14  ?Subroutine0
       2  Error_Handler
     150  SystemClock_Config
     292  main
      92  myRx1
          myRx2
          tmp1
          tmp2
          tmp3
          tmp4
          tmp5
          tmp6
          synErrorCount
          charErrorCount
          huart1
          myTx1
          myTx2

 
  92 bytes in section .data
 478 bytes in section .text
 
 478 bytes of CODE memory
  92 bytes of DATA memory

Errors: none
Warnings: none
