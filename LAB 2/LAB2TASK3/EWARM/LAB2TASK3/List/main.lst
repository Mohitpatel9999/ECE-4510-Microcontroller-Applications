###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         27/Jan/2020  18:06:21
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\LAB 2\LAB2TASK3\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW7632.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\Src\main.c" -D USE_HAL_DRIVER -D STM32F429xx -lC
#        "C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM\LAB2TASK3\List" -o "C:\Users\mohit\Desktop\Microapps
#        projects\LAB 2\LAB2TASK3\EWARM\LAB2TASK3\Obj" --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I "C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM/../Inc\" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB 2\LAB2TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\"
#        -I "C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\" -I
#        "C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM\LAB2TASK3\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps projects\LAB
#        2\LAB2TASK3\EWARM\LAB2TASK3\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB 2\LAB2TASK3\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          
      3          /**
      4          
      5            ******************************************************************************
      6          
      7            * @file           : main.c
      8          
      9            * @brief          : Main program body
     10          
     11            ******************************************************************************
     12          
     13            * @attention
     14          
     15            *
     16          
     17            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     18          
     19            * All rights reserved.</center></h2>
     20          
     21            *
     22          
     23            * This software component is licensed by ST under BSD 3-Clause license,
     24          
     25            * the "License"; You may not use this file except in compliance with the
     26          
     27            * License. You may obtain a copy of the License at:
     28          
     29            *                        opensource.org/licenses/BSD-3-Clause
     30          
     31            *
     32          
     33            ******************************************************************************
     34          
     35            */
     36          
     37          /* USER CODE END Header */
     38          
     39           
     40          
     41          /* Includes ------------------------------------------------------------------*/
     42          
     43          #include "main.h"
     44          
     45           
     46          
     47          /* Private includes ----------------------------------------------------------*/
     48          
     49          /* USER CODE BEGIN Includes */
     50          
     51           
     52          
     53          /* USER CODE END Includes */
     54          
     55           
     56          
     57          /* Private typedef -----------------------------------------------------------*/
     58          
     59          /* USER CODE BEGIN PTD */
     60          
     61           
     62          
     63          /* USER CODE END PTD */
     64          
     65           
     66          
     67          /* Private define ------------------------------------------------------------*/
     68          
     69          /* USER CODE BEGIN PD */
     70          
     71          /* USER CODE END PD */
     72          
     73           
     74          
     75          /* Private macro -------------------------------------------------------------*/
     76          
     77          /* USER CODE BEGIN PM */
     78          
     79           
     80          
     81          /* USER CODE END PM */
     82          
     83           
     84          
     85          /* Private variables ---------------------------------------------------------*/
     86          
     87           
     88          
     89          /* USER CODE BEGIN PV */
     90          
     91           
     92          
     93          /* USER CODE END PV */
     94          
     95           
     96          
     97          /* Private function prototypes -----------------------------------------------*/
     98          
     99          void SystemClock_Config(void);
    100          
    101          static void MX_GPIO_Init(void);
    102          
    103          /* USER CODE BEGIN PFP */
    104          
    105           
    106          
    107          /* USER CODE END PFP */
    108          
    109           
    110          
    111          /* Private user code ---------------------------------------------------------*/
    112          
    113          /* USER CODE BEGIN 0 */
    114          
    115           
    116          
    117          /* USER CODE END 0 */
    118          
    119           
    120          
    121          /**
    122          
    123            * @brief  The application entry point.
    124          
    125            * @retval int
    126          
    127            */
    128          

   \                                 In section .text, align 2, keep-with-next
    129          int main(void)
    130          
    131          {
   \                     main: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    132          
    133            /* USER CODE BEGIN 1 */
    134          
    135            
    136          
    137            uint16_t input = 0x0000;
    138          
    139            uint16_t nibble1 = 0x0000;
    140          
    141            uint16_t nibble2 = 0x0000;
    142          
    143            uint16_t result = 0x0000;
    144          
    145           
    146          
    147            
    148          
    149            
    150          
    151            /* USER CODE END 1 */
    152          
    153           
    154          
    155           
    156          
    157            /* MCU Configuration--------------------------------------------------------*/
    158          
    159           
    160          
    161            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    162          
    163            HAL_Init();
   \        0x4   0x....'....        BL       HAL_Init
    164          
    165           
    166          
    167            /* USER CODE BEGIN Init */
    168          
    169           
    170          
    171            /* USER CODE END Init */
    172          
    173           
    174          
    175            /* Configure the system clock */
    176          
    177            SystemClock_Config();
   \        0x8   0x....'....        BL       SystemClock_Config
    178          
    179           
    180          
    181            /* USER CODE BEGIN SysInit */
    182          
    183           
    184          
    185            /* USER CODE END SysInit */
    186          
    187           
    188          
    189            /* Initialize all configured peripherals */
    190          
    191            MX_GPIO_Init();
   \        0xC   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x....             LDR.N    R4,??DataTable1  ;; 0x40020c00
   \       0x16   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40023830
   \       0x18   0x....             LDR.N    R5,??DataTable1_2  ;; 0x40020000
   \       0x1A   0x6801             LDR      R1,[R0, #+0]
   \       0x1C   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x20   0x6001             STR      R1,[R0, #+0]
   \       0x22   0x6802             LDR      R2,[R0, #+0]
   \       0x24   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x28   0x9200             STR      R2,[SP, #+0]
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0x9900             LDR      R1,[SP, #+0]
   \       0x2E   0x9200             STR      R2,[SP, #+0]
   \       0x30   0x6803             LDR      R3,[R0, #+0]
   \       0x32   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x36   0x6003             STR      R3,[R0, #+0]
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x3E   0x9100             STR      R1,[SP, #+0]
   \       0x40   0x9900             LDR      R1,[SP, #+0]
   \       0x42   0x9200             STR      R2,[SP, #+0]
   \       0x44   0xF44F 0x4177      MOV      R1,#+63232
   \       0x48   0x6803             LDR      R3,[R0, #+0]
   \       0x4A   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0x4E   0x6003             STR      R3,[R0, #+0]
   \       0x50   0x6800             LDR      R0,[R0, #+0]
   \       0x52   0xF000 0x0008      AND      R0,R0,#0x8
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0x9800             LDR      R0,[SP, #+0]
   \       0x5A   0x4620             MOV      R0,R4
   \       0x5C   0x....'....        BL       HAL_GPIO_WritePin
   \       0x60   0x2201             MOVS     R2,#+1
   \       0x62   0xF44F 0x6100      MOV      R1,#+2048
   \       0x66   0x4620             MOV      R0,R4
   \       0x68   0x....'....        BL       HAL_GPIO_WritePin
   \       0x6C   0x20FF             MOVS     R0,#+255
   \       0x6E   0x2100             MOVS     R1,#+0
   \       0x70   0x9001             STR      R0,[SP, #+4]
   \       0x72   0x9102             STR      R1,[SP, #+8]
   \       0x74   0x9103             STR      R1,[SP, #+12]
   \       0x76   0x4628             MOV      R0,R5
   \       0x78   0xA901             ADD      R1,SP,#+4
   \       0x7A   0x....'....        BL       HAL_GPIO_Init
   \       0x7E   0xF44F 0x417F      MOV      R1,#+65280
   \       0x82   0x9101             STR      R1,[SP, #+4]
   \       0x84   0x2201             MOVS     R2,#+1
   \       0x86   0x9202             STR      R2,[SP, #+8]
   \       0x88   0x2100             MOVS     R1,#+0
   \       0x8A   0x9103             STR      R1,[SP, #+12]
   \       0x8C   0x2203             MOVS     R2,#+3
   \       0x8E   0x9204             STR      R2,[SP, #+16]
   \       0x90   0xA901             ADD      R1,SP,#+4
   \       0x92   0x4620             MOV      R0,R4
   \       0x94   0x....'....        BL       HAL_GPIO_Init
    192          
    193            /* USER CODE BEGIN 2 */
    194          
    195           
    196          
    197            /* USER CODE END 2 */
    198          
    199           
    200          
    201           
    202          
    203            /* Infinite loop */
    204          
    205            /* USER CODE BEGIN WHILE */
    206          
    207            while (1)
    208          
    209            {
    210          
    211             
    212          
    213              //GPIOD -> ODR = 0x3C00;
    214          
    215              //GPIOD -> ODR = 0xC300;
    216          
    217             
    218          
    219              
    220          
    221              
    222          
    223              input = GPIOA -> IDR;
   \                     ??main_0: (+1)
   \       0x98   0x6928             LDR      R0,[R5, #+16]
    224          
    225              //input = input << 8;
    226          
    227              //GPIOD -> ODR = input;
    228          
    229             
    230          
    231              nibble1 = input & 0x000F;
    232          
    233              nibble2 = (input & 0x00F0) >> 4;
    234          
    235             
    236          
    237              result = nibble1 + nibble2;
    238          
    239           
    240          
    241              result = result << 8;
    242          
    243              GPIOD -> ODR = result;
   \       0x9A   0xF000 0x010F      AND      R1,R0,#0xF
   \       0x9E   0xF3C0 0x1003      UBFX     R0,R0,#+4,#+4
   \       0xA2   0x1841             ADDS     R1,R0,R1
   \       0xA4   0x0609             LSLS     R1,R1,#+24
   \       0xA6   0x0C09             LSRS     R1,R1,#+16
   \       0xA8   0x6161             STR      R1,[R4, #+20]
   \       0xAA   0xE7F5             B.N      ??main_0
    244          
    245             
    246          
    247              
    248          
    249              
    250          
    251              /* USER CODE END WHILE */
    252          
    253           
    254          
    255              /* USER CODE BEGIN 3 */
    256          
    257            }
    258          
    259            /* USER CODE END 3 */
    260          
    261          }
    262          
    263           
    264          
    265          /**
    266          
    267            * @brief System Clock Configuration
    268          
    269            * @retval None
    270          
    271            */
    272          

   \                                 In section .text, align 2, keep-with-next
    273          void SystemClock_Config(void)
    274          
    275          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x....'....        BL       ?Subroutine0
    276          
    277            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    278          
    279            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    280          
    281           
    282          
    283            /** Configure the main internal regulator output voltage
    284          
    285            */
    286          
    287            __HAL_RCC_PWR_CLK_ENABLE();
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
    288          
    289            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
    290          
    291            /** Initializes the CPU, AHB and APB busses clocks
    292          
    293            */
    294          
    295            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    296          
    297            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x16   0xF44F 0x3380      MOV      R3,#+65536
   \       0x1A   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40023840
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x22   0x6001             STR      R1,[R0, #+0]
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
   \       0x30   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40007000
   \       0x32   0x9100             STR      R1,[SP, #+0]
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0xF422 0x4240      BIC      R2,R2,#0xC000
   \       0x3A   0xF442 0x4200      ORR      R2,R2,#0x8000
   \       0x3E   0x6002             STR      R2,[R0, #+0]
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x6800             LDR      R0,[R0, #+0]
   \       0x44   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x48   0x9000             STR      R0,[SP, #+0]
    298          
    299            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    300          
    301            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    302          
    303            RCC_OscInitStruct.PLL.PLLM = 25;
    304          
    305            RCC_OscInitStruct.PLL.PLLN = 256;
    306          
    307            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    308          
    309            RCC_OscInitStruct.PLL.PLLQ = 4;
    310          
    311            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x4A   0xA806             ADD      R0,SP,#+24
   \       0x4C   0x9900             LDR      R1,[SP, #+0]
   \       0x4E   0x9206             STR      R2,[SP, #+24]
   \       0x50   0x2102             MOVS     R1,#+2
   \       0x52   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x56   0x910C             STR      R1,[SP, #+48]
   \       0x58   0x920D             STR      R2,[SP, #+52]
   \       0x5A   0x2119             MOVS     R1,#+25
   \       0x5C   0xF44F 0x7280      MOV      R2,#+256
   \       0x60   0x910E             STR      R1,[SP, #+56]
   \       0x62   0x920F             STR      R2,[SP, #+60]
   \       0x64   0x2102             MOVS     R1,#+2
   \       0x66   0x2204             MOVS     R2,#+4
   \       0x68   0x9307             STR      R3,[SP, #+28]
   \       0x6A   0x9110             STR      R1,[SP, #+64]
   \       0x6C   0x9211             STR      R2,[SP, #+68]
   \       0x6E   0x....'....        BL       HAL_RCC_OscConfig
    312          
    313            {
    314          
    315              Error_Handler();
    316          
    317            }
    318          
    319            /** Initializes the CPU, AHB and APB busses clocks
    320          
    321            */
    322          
    323            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    324          
    325                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    326          
    327            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x72   0x2102             MOVS     R1,#+2
   \       0x74   0x9102             STR      R1,[SP, #+8]
    328          
    329            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x76   0x2200             MOVS     R2,#+0
   \       0x78   0x9203             STR      R2,[SP, #+12]
   \       0x7A   0x200F             MOVS     R0,#+15
    330          
    331            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x7C   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x80   0x9001             STR      R0,[SP, #+4]
   \       0x82   0x9104             STR      R1,[SP, #+16]
    332          
    333            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x84   0xF44F 0x5280      MOV      R2,#+4096
   \       0x88   0x9205             STR      R2,[SP, #+20]
    334          
    335           
    336          
    337            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
   \       0x8A   0x2104             MOVS     R1,#+4
   \       0x8C   0xA801             ADD      R0,SP,#+4
   \       0x8E   0x....'....        BL       HAL_RCC_ClockConfig
    338          
    339            {
    340          
    341              Error_Handler();
    342          
    343            }
    344          
    345          }
   \       0x92   0xB013             ADD      SP,SP,#+76
   \       0x94   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2214             MOVS     R2,#+20
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA801             ADD      R0,SP,#+4
   \        0x6   0x....'....        B.W      memset
    346          
    347           
    348          
    349          /**
    350          
    351            * @brief GPIO Initialization Function
    352          
    353            * @param None
    354          
    355            * @retval None
    356          
    357            */
    358          
    359          static void MX_GPIO_Init(void)
    360          
    361          {
    362          
    363            GPIO_InitTypeDef GPIO_InitStruct = {0};
    364          
    365           
    366          
    367            /* GPIO Ports Clock Enable */
    368          
    369            __HAL_RCC_GPIOH_CLK_ENABLE();
    370          
    371            __HAL_RCC_GPIOA_CLK_ENABLE();
    372          
    373            __HAL_RCC_GPIOD_CLK_ENABLE();
    374          
    375           
    376          
    377            /*Configure GPIO pin Output Level */
    378          
    379            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12
    380          
    381                                    |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
    382          
    383           
    384          
    385            /*Configure GPIO pin Output Level */
    386          
    387            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
    388          
    389           
    390          
    391            /*Configure GPIO pins : PA0 PA1 PA2 PA3
    392          
    393                                     PA4 PA5 PA6 PA7 */
    394          
    395            GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
    396          
    397                                    |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    398          
    399            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    400          
    401            GPIO_InitStruct.Pull = GPIO_NOPULL;
    402          
    403            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    404          
    405           
    406          
    407            /*Configure GPIO pins : PD8 PD9 PD10 PD11
    408          
    409                                     PD12 PD13 PD14 PD15 */
    410          
    411            GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
    412          
    413                                    |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    414          
    415            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    416          
    417            GPIO_InitStruct.Pull = GPIO_NOPULL;
    418          
    419            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    420          
    421            HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    422          
    423           
    424          
    425          }
    426          
    427           
    428          
    429          /* USER CODE BEGIN 4 */
    430          
    431           
    432          
    433          /* USER CODE END 4 */
    434          
    435           
    436          
    437          /**
    438          
    439            * @brief  This function is executed in case of error occurrence.
    440          
    441            * @retval None
    442          
    443            */
    444          

   \                                 In section .text, align 2, keep-with-next
    445          void Error_Handler(void)
    446          
    447          {
    448          
    449            /* USER CODE BEGIN Error_Handler_Debug */
    450          
    451            /* User can add his own implementation to report the HAL error return state */
    452          
    453           
    454          
    455            /* USER CODE END Error_Handler_Debug */
    456          
    457          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x4000'7000        DC32     0x40007000
    458          
    459           
    460          
    461          #ifdef  USE_FULL_ASSERT
    462          
    463          /**
    464          
    465            * @brief  Reports the name of the source file and the source line number
    466          
    467            *         where the assert_param error has occurred.
    468          
    469            * @param  file: pointer to the source file name
    470          
    471            * @param  line: assert_param error line source number
    472          
    473            * @retval None
    474          
    475            */
    476          
    477          void assert_failed(uint8_t *file, uint32_t line)
    478          
    479          {
    480          
    481            /* USER CODE BEGIN 6 */
    482          
    483            /* User can add his own implementation to report the file name and line number,
    484          
    485               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    486          
    487            /* USER CODE END 6 */
    488          
    489          }
    490          
    491          #endif /* USE_FULL_ASSERT */
    492          
    493           
    494          
    495          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      40   main
        40   -> HAL_GPIO_Init
        40   -> HAL_GPIO_WritePin
        40   -> HAL_Init
        40   -> SystemClock_Config
        40   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      10  ?Subroutine0
       2  Error_Handler
     150  SystemClock_Config
     172  main

 
 354 bytes in section .text
 
 354 bytes of CODE memory

Errors: none
Warnings: none
