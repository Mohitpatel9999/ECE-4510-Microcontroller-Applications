###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         25/Feb/2020  19:27:34
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK1\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW204B.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK1\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM\TASK1\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK1\EWARM\TASK1\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM\TASK1\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM\TASK1\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK1\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          DAC_HandleTypeDef hdac;
     45          
     46          TIM_HandleTypeDef htim5;
     47          
     48          /* USER CODE BEGIN PV */
     49          uint16_t dataArray[1024];
   \                     dataArray:
   \        0x0                      DS8 2'048
   \                     htim5:
   \      0x800                      DS8 64
   \                     hdac:
   \      0x840                      DS8 20
     50          /* USER CODE END PV */
     51          
     52          /* Private function prototypes -----------------------------------------------*/
     53          void SystemClock_Config(void);
     54          static void MX_GPIO_Init(void);
     55          static void MX_DAC_Init(void);
     56          static void MX_TIM5_Init(void);
     57          /* USER CODE BEGIN PFP */
     58          
     59          /* USER CODE END PFP */
     60          
     61          /* Private user code ---------------------------------------------------------*/
     62          /* USER CODE BEGIN 0 */
     63          
     64          /* USER CODE END 0 */
     65          
     66          /**
     67            * @brief  The application entry point.
     68            * @retval int
     69            */

   \                                 In section .text, align 2, keep-with-next
     70          int main(void)
     71          {
   \                     main: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
     72            /* USER CODE BEGIN 1 */
     73          for ( uint16_t i = 0; i < 1024; i = i + 1 ) {
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x....             LDR.N    R4,??DataTable1
     74              dataArray[i] = i * 4;
   \                     ??main_0: (+1)
   \        0x8   0x0081             LSLS     R1,R0,#+2
   \        0xA   0xF824 0x1010      STRH     R1,[R4, R0, LSL #+1]
     75            }
   \        0xE   0x1C40             ADDS     R0,R0,#+1
   \       0x10   0xF5B0 0x6F80      CMP      R0,#+1024
   \       0x14   0xDBF8             BLT.N    ??main_0
   \       0x16   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40021000
     76            /* USER CODE END 1 */
     77            
     78          
     79            /* MCU Configuration--------------------------------------------------------*/
     80          
     81            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     82            HAL_Init();
   \       0x18   0x....'....        BL       HAL_Init
     83          
     84            /* USER CODE BEGIN Init */
     85          
     86            /* USER CODE END Init */
     87          
     88            /* Configure the system clock */
     89            SystemClock_Config();
   \       0x1C   0x....'....        BL       SystemClock_Config
     90          
     91            /* USER CODE BEGIN SysInit */
     92          
     93            /* USER CODE END SysInit */
     94          
     95            /* Initialize all configured peripherals */
     96            MX_GPIO_Init();
   \       0x20   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40023830
   \       0x2A   0x6801             LDR      R1,[R0, #+0]
   \       0x2C   0xF041 0x0110      ORR      R1,R1,#0x10
   \       0x30   0x6001             STR      R1,[R0, #+0]
   \       0x32   0x6802             LDR      R2,[R0, #+0]
   \       0x34   0xF002 0x0210      AND      R2,R2,#0x10
   \       0x38   0x9200             STR      R2,[SP, #+0]
   \       0x3A   0x2200             MOVS     R2,#+0
   \       0x3C   0x9900             LDR      R1,[SP, #+0]
   \       0x3E   0x9200             STR      R2,[SP, #+0]
   \       0x40   0x6803             LDR      R3,[R0, #+0]
   \       0x42   0xF043 0x0380      ORR      R3,R3,#0x80
   \       0x46   0x6003             STR      R3,[R0, #+0]
   \       0x48   0x6801             LDR      R1,[R0, #+0]
   \       0x4A   0xF001 0x0180      AND      R1,R1,#0x80
   \       0x4E   0x9100             STR      R1,[SP, #+0]
   \       0x50   0x9900             LDR      R1,[SP, #+0]
   \       0x52   0x9200             STR      R2,[SP, #+0]
   \       0x54   0x2110             MOVS     R1,#+16
   \       0x56   0x6803             LDR      R3,[R0, #+0]
   \       0x58   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x5C   0x6003             STR      R3,[R0, #+0]
   \       0x5E   0x6800             LDR      R0,[R0, #+0]
   \       0x60   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0x9800             LDR      R0,[SP, #+0]
   \       0x68   0x4628             MOV      R0,R5
   \       0x6A   0x....'....        BL       HAL_GPIO_WritePin
   \       0x6E   0x2110             MOVS     R1,#+16
   \       0x70   0x9101             STR      R1,[SP, #+4]
   \       0x72   0x2201             MOVS     R2,#+1
   \       0x74   0x2100             MOVS     R1,#+0
   \       0x76   0x9103             STR      R1,[SP, #+12]
   \       0x78   0x9104             STR      R1,[SP, #+16]
   \       0x7A   0x9202             STR      R2,[SP, #+8]
   \       0x7C   0xA901             ADD      R1,SP,#+4
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       HAL_GPIO_Init
     97            MX_DAC_Init();
   \       0x84   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x88   0xF504 0x6500      ADD      R5,R4,#+2048
   \       0x8C   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40007400
   \       0x8E   0x6428             STR      R0,[R5, #+64]
   \       0x90   0xF504 0x6404      ADD      R4,R4,#+2112
   \       0x94   0x4620             MOV      R0,R4
   \       0x96   0x....'....        BL       HAL_DAC_Init
   \       0x9A   0x2100             MOVS     R1,#+0
   \       0x9C   0x2202             MOVS     R2,#+2
   \       0x9E   0x9100             STR      R1,[SP, #+0]
   \       0xA0   0x9201             STR      R2,[SP, #+4]
   \       0xA2   0x4669             MOV      R1,SP
   \       0xA4   0x2210             MOVS     R2,#+16
   \       0xA6   0x4620             MOV      R0,R4
   \       0xA8   0x....'....        BL       HAL_DAC_ConfigChannel
     98            MX_TIM5_Init();
   \       0xAC   0x2210             MOVS     R2,#+16
   \       0xAE   0x2100             MOVS     R1,#+0
   \       0xB0   0xA802             ADD      R0,SP,#+8
   \       0xB2   0x....'....        BL       memset
   \       0xB6   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0xBA   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40000c00
   \       0xBC   0x6028             STR      R0,[R5, #+0]
   \       0xBE   0x2100             MOVS     R1,#+0
   \       0xC0   0xF240 0x20CF      MOVW     R0,#+719
   \       0xC4   0x60E8             STR      R0,[R5, #+12]
   \       0xC6   0x6069             STR      R1,[R5, #+4]
   \       0xC8   0x60A9             STR      R1,[R5, #+8]
   \       0xCA   0x6129             STR      R1,[R5, #+16]
   \       0xCC   0x61A9             STR      R1,[R5, #+24]
   \       0xCE   0x4628             MOV      R0,R5
   \       0xD0   0x....'....        BL       HAL_TIM_Base_Init
   \       0xD4   0xF44F 0x5080      MOV      R0,#+4096
   \       0xD8   0x9002             STR      R0,[SP, #+8]
   \       0xDA   0xA902             ADD      R1,SP,#+8
   \       0xDC   0x4628             MOV      R0,R5
   \       0xDE   0x....'....        BL       HAL_TIM_ConfigClockSource
   \       0xE2   0x2100             MOVS     R1,#+0
   \       0xE4   0x9100             STR      R1,[SP, #+0]
   \       0xE6   0x9101             STR      R1,[SP, #+4]
   \       0xE8   0x4628             MOV      R0,R5
   \       0xEA   0x4669             MOV      R1,SP
   \       0xEC   0x....'....        BL       HAL_TIMEx_MasterConfigSynchronization
     99            /* USER CODE BEGIN 2 */
    100          HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
   \       0xF0   0x2110             MOVS     R1,#+16
   \       0xF2   0x4620             MOV      R0,R4
   \       0xF4   0x....'....        BL       HAL_DAC_Start
    101          HAL_TIM_Base_Start_IT(&htim5);
   \       0xF8   0x4628             MOV      R0,R5
   \       0xFA   0x....'....        BL       HAL_TIM_Base_Start_IT
    102            /* USER CODE END 2 */
    103           
    104           
    105          
    106            /* Infinite loop */
    107            /* USER CODE BEGIN WHILE */
    108            while (1)
   \                     ??main_1: (+1)
   \       0xFE   0xE7FE             B.N      ??main_1
    109            {
    110              /* USER CODE END WHILE */
    111          
    112              /* USER CODE BEGIN 3 */
    113            }
    114            /* USER CODE END 3 */
    115          }
    116          
    117          /**
    118            * @brief System Clock Configuration
    119            * @retval None
    120            */

   \                                 In section .text, align 2, keep-with-next
    121          void SystemClock_Config(void)
    122          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x....'....        BL       ?Subroutine0
    123            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    124            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    125          
    126            /** Configure the main internal regulator output voltage 
    127            */
    128            __HAL_RCC_PWR_CLK_ENABLE();
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
    129            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
    130            /** Initializes the CPU, AHB and APB busses clocks 
    131            */
    132            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    133            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x16   0xF44F 0x3380      MOV      R3,#+65536
   \       0x1A   0x....             LDR.N    R0,??DataTable1_5  ;; 0x40023840
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x22   0x6001             STR      R1,[R0, #+0]
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
   \       0x30   0x....             LDR.N    R0,??DataTable1_6  ;; 0x40007000
   \       0x32   0x9100             STR      R1,[SP, #+0]
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0xF422 0x4240      BIC      R2,R2,#0xC000
   \       0x3A   0xF442 0x4280      ORR      R2,R2,#0x4000
   \       0x3E   0x6002             STR      R2,[R0, #+0]
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x6800             LDR      R0,[R0, #+0]
   \       0x44   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x48   0x9000             STR      R0,[SP, #+0]
    134            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    135            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    136            RCC_OscInitStruct.PLL.PLLM = 4;
    137            RCC_OscInitStruct.PLL.PLLN = 72;
    138            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    139            RCC_OscInitStruct.PLL.PLLQ = 4;
    140            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x4A   0xA806             ADD      R0,SP,#+24
   \       0x4C   0x9900             LDR      R1,[SP, #+0]
   \       0x4E   0x9206             STR      R2,[SP, #+24]
   \       0x50   0x2102             MOVS     R1,#+2
   \       0x52   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x56   0x910C             STR      R1,[SP, #+48]
   \       0x58   0x920D             STR      R2,[SP, #+52]
   \       0x5A   0x2104             MOVS     R1,#+4
   \       0x5C   0x2248             MOVS     R2,#+72
   \       0x5E   0x910E             STR      R1,[SP, #+56]
   \       0x60   0x920F             STR      R2,[SP, #+60]
   \       0x62   0x2102             MOVS     R1,#+2
   \       0x64   0x2204             MOVS     R2,#+4
   \       0x66   0x9307             STR      R3,[SP, #+28]
   \       0x68   0x9110             STR      R1,[SP, #+64]
   \       0x6A   0x9211             STR      R2,[SP, #+68]
   \       0x6C   0x....'....        BL       HAL_RCC_OscConfig
    141            {
    142              Error_Handler();
    143            }
    144            /** Initializes the CPU, AHB and APB busses clocks 
    145            */
    146            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    147                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    148            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x70   0x2102             MOVS     R1,#+2
   \       0x72   0x9102             STR      R1,[SP, #+8]
    149            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
   \       0x74   0x2280             MOVS     R2,#+128
   \       0x76   0x9203             STR      R2,[SP, #+12]
   \       0x78   0x200F             MOVS     R0,#+15
    150            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x7A   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x7E   0x9001             STR      R0,[SP, #+4]
   \       0x80   0x9104             STR      R1,[SP, #+16]
    151            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x82   0xF44F 0x5280      MOV      R2,#+4096
   \       0x86   0x9205             STR      R2,[SP, #+20]
    152          
    153            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   \       0x88   0x2101             MOVS     R1,#+1
   \       0x8A   0xA801             ADD      R0,SP,#+4
   \       0x8C   0x....'....        BL       HAL_RCC_ClockConfig
    154            {
    155              Error_Handler();
    156            }
    157          }
   \       0x90   0xB013             ADD      SP,SP,#+76
   \       0x92   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2214             MOVS     R2,#+20
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA801             ADD      R0,SP,#+4
   \        0x6   0x....'....        B.W      memset
    158          
    159          /**
    160            * @brief DAC Initialization Function
    161            * @param None
    162            * @retval None
    163            */
    164          static void MX_DAC_Init(void)
    165          {
    166          
    167            /* USER CODE BEGIN DAC_Init 0 */
    168          
    169            /* USER CODE END DAC_Init 0 */
    170          
    171            DAC_ChannelConfTypeDef sConfig = {0};
    172          
    173            /* USER CODE BEGIN DAC_Init 1 */
    174          
    175            /* USER CODE END DAC_Init 1 */
    176            /** DAC Initialization 
    177            */
    178            hdac.Instance = DAC;
    179            if (HAL_DAC_Init(&hdac) != HAL_OK)
    180            {
    181              Error_Handler();
    182            }
    183            /** DAC channel OUT2 config 
    184            */
    185            sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
    186            sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
    187            if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
    188            {
    189              Error_Handler();
    190            }
    191            /* USER CODE BEGIN DAC_Init 2 */
    192          
    193            /* USER CODE END DAC_Init 2 */
    194          
    195          }
    196          
    197          /**
    198            * @brief TIM5 Initialization Function
    199            * @param None
    200            * @retval None
    201            */
    202          static void MX_TIM5_Init(void)
    203          {
    204          
    205            /* USER CODE BEGIN TIM5_Init 0 */
    206          
    207            /* USER CODE END TIM5_Init 0 */
    208          
    209            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    210            TIM_MasterConfigTypeDef sMasterConfig = {0};
    211          
    212            /* USER CODE BEGIN TIM5_Init 1 */
    213          
    214            /* USER CODE END TIM5_Init 1 */
    215            htim5.Instance = TIM5;
    216            htim5.Init.Prescaler = 0;
    217            htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
    218            htim5.Init.Period = 719;
    219            htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    220            htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    221            if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
    222            {
    223              Error_Handler();
    224            }
    225            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    226            if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
    227            {
    228              Error_Handler();
    229            }
    230            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    231            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    232            if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
    233            {
    234              Error_Handler();
    235            }
    236            /* USER CODE BEGIN TIM5_Init 2 */
    237          
    238            /* USER CODE END TIM5_Init 2 */
    239          
    240          }
    241          
    242          /**
    243            * @brief GPIO Initialization Function
    244            * @param None
    245            * @retval None
    246            */
    247          static void MX_GPIO_Init(void)
    248          {
    249            GPIO_InitTypeDef GPIO_InitStruct = {0};
    250          
    251            /* GPIO Ports Clock Enable */
    252            __HAL_RCC_GPIOE_CLK_ENABLE();
    253            __HAL_RCC_GPIOH_CLK_ENABLE();
    254            __HAL_RCC_GPIOA_CLK_ENABLE();
    255          
    256            /*Configure GPIO pin Output Level */
    257            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
    258          
    259            /*Configure GPIO pin : PE4 */
    260            GPIO_InitStruct.Pin = GPIO_PIN_4;
    261            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    262            GPIO_InitStruct.Pull = GPIO_NOPULL;
    263            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    264            HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    265          
    266          }
    267          
    268          /* USER CODE BEGIN 4 */
    269          
    270          /* USER CODE END 4 */
    271          
    272          /**
    273            * @brief  This function is executed in case of error occurrence.
    274            * @retval None
    275            */

   \                                 In section .text, align 2, keep-with-next
    276          void Error_Handler(void)
    277          {
    278            /* USER CODE BEGIN Error_Handler_Debug */
    279            /* User can add his own implementation to report the HAL error return state */
    280          
    281            /* USER CODE END Error_Handler_Debug */
    282          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2208             MOVS     R2,#+8
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x4668             MOV      R0,SP
   \        0x6   0x....'....        B.W      memset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     dataArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x4000'7400        DC32     0x40007400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x4000'0C00        DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x4000'7000        DC32     0x40007000
    283          
    284          #ifdef  USE_FULL_ASSERT
    285          /**
    286            * @brief  Reports the name of the source file and the source line number
    287            *         where the assert_param error has occurred.
    288            * @param  file: pointer to the source file name
    289            * @param  line: assert_param error line source number
    290            * @retval None
    291            */
    292          void assert_failed(uint8_t *file, uint32_t line)
    293          { 
    294            /* USER CODE BEGIN 6 */
    295            /* User can add his own implementation to report the file name and line number,
    296               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    297            /* USER CODE END 6 */
    298          }
    299          #endif /* USE_FULL_ASSERT */
    300          
    301          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      40   main
        40   -> HAL_DAC_ConfigChannel
        40   -> HAL_DAC_Init
        40   -> HAL_DAC_Start
        40   -> HAL_GPIO_Init
        40   -> HAL_GPIO_WritePin
        40   -> HAL_Init
        40   -> HAL_TIMEx_MasterConfigSynchronization
        40   -> HAL_TIM_Base_Init
        40   -> HAL_TIM_Base_Start_IT
        40   -> HAL_TIM_ConfigClockSource
        40   -> SystemClock_Config
        40   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      10  ?Subroutine0
      10  ?Subroutine1
       2  Error_Handler
     148  SystemClock_Config
   2'132  dataArray
          htim5
          hdac
     256  main

 
 2'132 bytes in section .bss
   454 bytes in section .text
 
   454 bytes of CODE memory
 2'132 bytes of DATA memory

Errors: none
Warnings: none
