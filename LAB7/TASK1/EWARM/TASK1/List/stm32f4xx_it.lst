###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         25/Feb/2020  19:36:08
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\Src\stm32f4xx_it.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EWFAF3.tmp
#        ("C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\Src\stm32f4xx_it.c" -D USE_HAL_DRIVER -D
#        STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM\TASK1\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK1\EWARM\TASK1\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM\TASK1\List\stm32f4xx_it.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK1\EWARM\TASK1\Obj\stm32f4xx_it.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK1\Src\stm32f4xx_it.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file    stm32f4xx_it.c
      5            * @brief   Interrupt Service Routines.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          #include "stm32f4xx_it.h"
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          /* USER CODE END Includes */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* USER CODE BEGIN TD */
     30          
     31          /* USER CODE END TD */
     32          
     33          /* Private define ------------------------------------------------------------*/
     34          /* USER CODE BEGIN PD */
     35           
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/
     44          /* USER CODE BEGIN PV */

   \                                 In section .bss, align 2
     45          uint16_t index = 0;
   \                     index:
   \        0x0                      DS8 2
     46          /* USER CODE END PV */
     47          
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* USER CODE BEGIN PFP */
     50          
     51          /* USER CODE END PFP */
     52          
     53          /* Private user code ---------------------------------------------------------*/
     54          /* USER CODE BEGIN 0 */
     55          
     56          /* USER CODE END 0 */
     57          
     58          /* External variables --------------------------------------------------------*/
     59          extern TIM_HandleTypeDef htim5;
     60          /* USER CODE BEGIN EV */
     61          extern uint16_t dataArray[1024];
     62          extern DAC_HandleTypeDef hdac;
     63          
     64          /* USER CODE END EV */
     65          
     66          /******************************************************************************/
     67          /*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
     68          /******************************************************************************/
     69          /**
     70            * @brief This function handles Non maskable interrupt.
     71            */

   \                                 In section .text, align 2, keep-with-next
     72          void NMI_Handler(void)
     73          {
     74            /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
     75          
     76            /* USER CODE END NonMaskableInt_IRQn 0 */
     77            /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
     78          
     79            /* USER CODE END NonMaskableInt_IRQn 1 */
     80          }
   \                     NMI_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     81          
     82          /**
     83            * @brief This function handles Hard fault interrupt.
     84            */

   \                                 In section .text, align 2, keep-with-next
     85          void HardFault_Handler(void)
     86          {
     87            /* USER CODE BEGIN HardFault_IRQn 0 */
     88          
     89            /* USER CODE END HardFault_IRQn 0 */
     90            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??HardFault_Handler_0
     91            {
     92              /* USER CODE BEGIN W1_HardFault_IRQn 0 */
     93              /* USER CODE END W1_HardFault_IRQn 0 */
     94            }
     95          }
     96          
     97          /**
     98            * @brief This function handles Memory management fault.
     99            */

   \                                 In section .text, align 2, keep-with-next
    100          void MemManage_Handler(void)
    101          {
    102            /* USER CODE BEGIN MemoryManagement_IRQn 0 */
    103          
    104            /* USER CODE END MemoryManagement_IRQn 0 */
    105            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??MemManage_Handler_0
    106            {
    107              /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    108              /* USER CODE END W1_MemoryManagement_IRQn 0 */
    109            }
    110          }
    111          
    112          /**
    113            * @brief This function handles Pre-fetch fault, memory access fault.
    114            */

   \                                 In section .text, align 2, keep-with-next
    115          void BusFault_Handler(void)
    116          {
    117            /* USER CODE BEGIN BusFault_IRQn 0 */
    118          
    119            /* USER CODE END BusFault_IRQn 0 */
    120            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??BusFault_Handler_0
    121            {
    122              /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    123              /* USER CODE END W1_BusFault_IRQn 0 */
    124            }
    125          }
    126          
    127          /**
    128            * @brief This function handles Undefined instruction or illegal state.
    129            */

   \                                 In section .text, align 2, keep-with-next
    130          void UsageFault_Handler(void)
    131          {
    132            /* USER CODE BEGIN UsageFault_IRQn 0 */
    133          
    134            /* USER CODE END UsageFault_IRQn 0 */
    135            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??UsageFault_Handler_0
    136            {
    137              /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    138              /* USER CODE END W1_UsageFault_IRQn 0 */
    139            }
    140          }
    141          
    142          /**
    143            * @brief This function handles System service call via SWI instruction.
    144            */

   \                                 In section .text, align 2, keep-with-next
    145          void SVC_Handler(void)
    146          {
    147            /* USER CODE BEGIN SVCall_IRQn 0 */
    148          
    149            /* USER CODE END SVCall_IRQn 0 */
    150            /* USER CODE BEGIN SVCall_IRQn 1 */
    151          
    152            /* USER CODE END SVCall_IRQn 1 */
    153          }
   \                     SVC_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    154          
    155          /**
    156            * @brief This function handles Debug monitor.
    157            */

   \                                 In section .text, align 2, keep-with-next
    158          void DebugMon_Handler(void)
    159          {
    160            /* USER CODE BEGIN DebugMonitor_IRQn 0 */
    161          
    162            /* USER CODE END DebugMonitor_IRQn 0 */
    163            /* USER CODE BEGIN DebugMonitor_IRQn 1 */
    164          
    165            /* USER CODE END DebugMonitor_IRQn 1 */
    166          }
   \                     DebugMon_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    167          
    168          /**
    169            * @brief This function handles Pendable request for system service.
    170            */

   \                                 In section .text, align 2, keep-with-next
    171          void PendSV_Handler(void)
    172          {
    173            /* USER CODE BEGIN PendSV_IRQn 0 */
    174          
    175            /* USER CODE END PendSV_IRQn 0 */
    176            /* USER CODE BEGIN PendSV_IRQn 1 */
    177          
    178            /* USER CODE END PendSV_IRQn 1 */
    179          }
   \                     PendSV_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    180          
    181          /**
    182            * @brief This function handles System tick timer.
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          void SysTick_Handler(void)
    185          {
    186            /* USER CODE BEGIN SysTick_IRQn 0 */
    187          
    188            /* USER CODE END SysTick_IRQn 0 */
    189            HAL_IncTick();
   \                     SysTick_Handler: (+1)
   \        0x0   0x....'....        B.W      HAL_IncTick
    190            /* USER CODE BEGIN SysTick_IRQn 1 */
    191          
    192            /* USER CODE END SysTick_IRQn 1 */
    193          }
    194          
    195          /******************************************************************************/
    196          /* STM32F4xx Peripheral Interrupt Handlers                                    */
    197          /* Add here the Interrupt Handlers for the used peripherals.                  */
    198          /* For the available peripheral interrupt handler names,                      */
    199          /* please refer to the startup file (startup_stm32f4xx.s).                    */
    200          /******************************************************************************/
    201          
    202          /**
    203            * @brief This function handles TIM5 global interrupt.
    204            */

   \                                 In section .text, align 2, keep-with-next
    205          void TIM5_IRQHandler(void)
    206          {
   \                     TIM5_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    207            /* USER CODE BEGIN TIM5_IRQn 0 */
    208          
    209            
    210            /* USER CODE END TIM5_IRQn 0 */
    211            HAL_TIM_IRQHandler(&htim5);
   \        0x2   0x....             LDR.N    R0,??DataTable1
   \        0x4   0x....             LDR.N    R4,??DataTable1_1
   \        0x6   0x....'....        BL       HAL_TIM_IRQHandler
    212            /* USER CODE BEGIN TIM5_IRQn 1 */
    213            HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_4);
   \        0xA   0x2110             MOVS     R1,#+16
   \        0xC   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40021000
   \        0xE   0x....'....        BL       HAL_GPIO_TogglePin
    214              if ( index == 1024 ) {
   \       0x12   0x8820             LDRH     R0,[R4, #+0]
   \       0x14   0xF5B0 0x6F80      CMP      R0,#+1024
   \       0x18   0xBF04             ITT      EQ
   \       0x1A   0x2100             MOVEQ    R1,#+0
   \       0x1C   0x8021             STRHEQ   R1,[R4, #+0]
    215                index = 0;
    216              }
    217              //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint32_t) dataArray[index]);
    218              //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
    219               //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2000);
    220              HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
   \       0x1E   0xF640 0x73FF      MOVW     R3,#+4095
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x2110             MOVS     R1,#+16
   \       0x26   0x....             LDR.N    R0,??DataTable1_3
   \       0x28   0x....'....        BL       HAL_DAC_SetValue
    221              
    222              
    223              index = index + 1;
   \       0x2C   0x8820             LDRH     R0,[R4, #+0]
   \       0x2E   0x1C40             ADDS     R0,R0,#+1
   \       0x30   0x8020             STRH     R0,[R4, #+0]
    224          
    225            /* USER CODE END TIM5_IRQn 1 */
    226          }
   \       0x32   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     htim5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x....'....        DC32     hdac
    227          
    228          /* USER CODE BEGIN 1 */
    229          
    230          /* USER CODE END 1 */
    231          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       0   SysTick_Handler
         0   -> HAL_IncTick
       8   TIM5_IRQHandler
         8   -> HAL_DAC_SetValue
         8   -> HAL_GPIO_TogglePin
         8   -> HAL_TIM_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       2  BusFault_Handler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
       4  SysTick_Handler
      52  TIM5_IRQHandler
       2  UsageFault_Handler
       2  index

 
  2 bytes in section .bss
 88 bytes in section .text
 
 88 bytes of CODE memory
  2 bytes of DATA memory

Errors: none
Warnings: none
