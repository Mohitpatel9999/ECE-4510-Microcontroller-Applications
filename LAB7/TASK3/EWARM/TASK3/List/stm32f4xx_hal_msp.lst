###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         25/Feb/2020  20:10:32
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\Src\stm32f4xx_hal_msp.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW6F21.tmp
#        ("C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\Src\stm32f4xx_hal_msp.c" -D USE_HAL_DRIVER -D
#        STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM\TASK3\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK3\EWARM\TASK3\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM\TASK3\List\stm32f4xx_hal_msp.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\TASK3\EWARM\TASK3\Obj\stm32f4xx_hal_msp.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB7\TASK3\Src\stm32f4xx_hal_msp.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * File Name          : stm32f4xx_hal_msp.c
      5            * Description        : This file provides code for the MSP Initialization 
      6            *                      and de-Initialization codes.
      7            ******************************************************************************
      8            * @attention
      9            *
     10            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     11            * All rights reserved.</center></h2>
     12            *
     13            * This software component is licensed by ST under BSD 3-Clause license,
     14            * the "License"; You may not use this file except in compliance with the
     15            * License. You may obtain a copy of the License at:
     16            *                        opensource.org/licenses/BSD-3-Clause
     17            *
     18            ******************************************************************************
     19            */
     20          /* USER CODE END Header */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "main.h"
     24          /* USER CODE BEGIN Includes */
     25          
     26          /* USER CODE END Includes */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* USER CODE BEGIN TD */
     30          
     31          /* USER CODE END TD */
     32          
     33          /* Private define ------------------------------------------------------------*/
     34          /* USER CODE BEGIN Define */
     35           
     36          /* USER CODE END Define */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN Macro */
     40          
     41          /* USER CODE END Macro */
     42          
     43          /* Private variables ---------------------------------------------------------*/
     44          /* USER CODE BEGIN PV */
     45          
     46          /* USER CODE END PV */
     47          
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* USER CODE BEGIN PFP */
     50          
     51          /* USER CODE END PFP */
     52          
     53          /* External functions --------------------------------------------------------*/
     54          /* USER CODE BEGIN ExternalFunctions */
     55          
     56          /* USER CODE END ExternalFunctions */
     57          
     58          /* USER CODE BEGIN 0 */
     59          
     60          /* USER CODE END 0 */
     61          /**
     62            * Initializes the Global MSP.
     63            */

   \                                 In section .text, align 2, keep-with-next
     64          void HAL_MspInit(void)
     65          {
   \                     HAL_MspInit: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
     66            /* USER CODE BEGIN MspInit 0 */
     67          
     68            /* USER CODE END MspInit 0 */
     69          
     70            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x9000             STR      R0,[SP, #+0]
     71            __HAL_RCC_PWR_CLK_ENABLE();
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x....             LDR.N    R0,??DataTable6  ;; 0x40023840
   \        0xA   0x6841             LDR      R1,[R0, #+4]
   \        0xC   0xF441 0x4180      ORR      R1,R1,#0x4000
   \       0x10   0x6041             STR      R1,[R0, #+4]
   \       0x12   0x6841             LDR      R1,[R0, #+4]
   \       0x14   0xF401 0x4180      AND      R1,R1,#0x4000
   \       0x18   0x9100             STR      R1,[SP, #+0]
   \       0x1A   0x9900             LDR      R1,[SP, #+0]
   \       0x1C   0x9200             STR      R2,[SP, #+0]
   \       0x1E   0x6803             LDR      R3,[R0, #+0]
   \       0x20   0xF043 0x5380      ORR      R3,R3,#0x10000000
   \       0x24   0x6003             STR      R3,[R0, #+0]
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
     72          
     73            /* System interrupt init*/
     74          
     75            /* USER CODE BEGIN MspInit 1 */
     76          
     77            /* USER CODE END MspInit 1 */
     78          }
   \       0x30   0xB001             ADD      SP,SP,#+4
   \       0x32   0x4770             BX       LR               ;; return
     79          
     80          /**
     81          * @brief ADC MSP Initialization
     82          * This function configures the hardware resources used in this example
     83          * @param hadc: ADC handle pointer
     84          * @retval None
     85          */

   \                                 In section .text, align 2, keep-with-next
     86          void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
     87          {
   \                     HAL_ADC_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x....'....        BL       ?Subroutine1
     88            GPIO_InitTypeDef GPIO_InitStruct = {0};
     89            if(hadc->Instance==ADC1)
   \                     ??CrossCallReturnLabel_2: (+1)
   \        0x8   0x6821             LDR      R1,[R4, #+0]
   \        0xA   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40012000
   \        0xC   0x4281             CMP      R1,R0
   \        0xE   0xD122             BNE.N    ??HAL_ADC_MspInit_0
     90            {
     91            /* USER CODE BEGIN ADC1_MspInit 0 */
     92          
     93            /* USER CODE END ADC1_MspInit 0 */
     94              /* Peripheral clock enable */
     95              __HAL_RCC_ADC1_CLK_ENABLE();
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40023830
   \       0x14   0x9200             STR      R2,[SP, #+0]
   \       0x16   0x6941             LDR      R1,[R0, #+20]
   \       0x18   0xF441 0x7180      ORR      R1,R1,#0x100
   \       0x1C   0x6141             STR      R1,[R0, #+20]
   \       0x1E   0x6941             LDR      R1,[R0, #+20]
   \       0x20   0xF401 0x7180      AND      R1,R1,#0x100
   \       0x24   0x9100             STR      R1,[SP, #+0]
   \       0x26   0x9900             LDR      R1,[SP, #+0]
     96            
     97              __HAL_RCC_GPIOB_CLK_ENABLE();
   \       0x28   0x9200             STR      R2,[SP, #+0]
     98              /**ADC1 GPIO Configuration    
     99              PB1     ------> ADC1_IN9 
    100              */
    101              GPIO_InitStruct.Pin = GPIO_PIN_1;
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x6803             LDR      R3,[R0, #+0]
   \       0x2E   0xF043 0x0302      ORR      R3,R3,#0x2
   \       0x32   0x6003             STR      R3,[R0, #+0]
    102              GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
   \       0x34   0x2203             MOVS     R2,#+3
   \       0x36   0x6800             LDR      R0,[R0, #+0]
   \       0x38   0xF000 0x0002      AND      R0,R0,#0x2
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0x9800             LDR      R0,[SP, #+0]
    103              GPIO_InitStruct.Pull = GPIO_NOPULL;
    104              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \       0x40   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40020400
   \       0x42   0x....'....        BL       ?Subroutine0
    105          
    106              /* ADC1 interrupt Init */
    107              HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x46   0x2200             MOVS     R2,#+0
   \       0x48   0x2100             MOVS     R1,#+0
   \       0x4A   0x2012             MOVS     R0,#+18
   \       0x4C   0x....'....        BL       HAL_NVIC_SetPriority
    108              HAL_NVIC_EnableIRQ(ADC_IRQn);
   \       0x50   0x2012             MOVS     R0,#+18
   \       0x52   0x....'....        BL       HAL_NVIC_EnableIRQ
    109            /* USER CODE BEGIN ADC1_MspInit 1 */
    110          
    111            /* USER CODE END ADC1_MspInit 1 */
    112            }
    113          
    114          }
   \                     ??HAL_ADC_MspInit_0: (+1)
   \       0x56   0xB006             ADD      SP,SP,#+24
   \       0x58   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x4604             MOV      R4,R0
   \        0x2   0x2214             MOVS     R2,#+20
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0xA801             ADD      R0,SP,#+4
   \        0x8   0x....'....        B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x9101             STR      R1,[SP, #+4]
   \        0x2   0x9202             STR      R2,[SP, #+8]
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9103             STR      R1,[SP, #+12]
   \        0x8   0xA901             ADD      R1,SP,#+4
   \        0xA   0x....'....        B.W      HAL_GPIO_Init
    115          
    116          /**
    117          * @brief ADC MSP De-Initialization
    118          * This function freeze the hardware resources used in this example
    119          * @param hadc: ADC handle pointer
    120          * @retval None
    121          */

   \                                 In section .text, align 2, keep-with-next
    122          void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
    123          {
   \                     HAL_ADC_MspDeInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40012000
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD000             BEQ.N    ??HAL_ADC_MspDeInit_0
   \        0x8   0x4770             BX       LR
   \                     ??HAL_ADC_MspDeInit_0: (+1)
   \        0xA   0xB580             PUSH     {R7,LR}
    124            if(hadc->Instance==ADC1)
    125            {
    126            /* USER CODE BEGIN ADC1_MspDeInit 0 */
    127          
    128            /* USER CODE END ADC1_MspDeInit 0 */
    129              /* Peripheral clock disable */
    130              __HAL_RCC_ADC1_CLK_DISABLE();
   \        0xC   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40023844
   \        0xE   0x6802             LDR      R2,[R0, #+0]
   \       0x10   0xF422 0x7280      BIC      R2,R2,#0x100
   \       0x14   0x6002             STR      R2,[R0, #+0]
    131            
    132              /**ADC1 GPIO Configuration    
    133              PB1     ------> ADC1_IN9 
    134              */
    135              HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
   \       0x16   0x2102             MOVS     R1,#+2
   \       0x18   0x....             LDR.N    R0,??DataTable6_3  ;; 0x40020400
   \       0x1A   0x....'....        BL       HAL_GPIO_DeInit
    136          
    137              /* ADC1 interrupt DeInit */
    138              HAL_NVIC_DisableIRQ(ADC_IRQn);
   \       0x1E   0xE8BD 0x4002      POP      {R1,LR}
   \       0x22   0x2012             MOVS     R0,#+18
   \       0x24   0x....'....        B.W      HAL_NVIC_DisableIRQ
    139            /* USER CODE BEGIN ADC1_MspDeInit 1 */
    140          
    141            /* USER CODE END ADC1_MspDeInit 1 */
    142            }
    143          
    144          }
    145          
    146          /**
    147          * @brief DAC MSP Initialization
    148          * This function configures the hardware resources used in this example
    149          * @param hdac: DAC handle pointer
    150          * @retval None
    151          */

   \                                 In section .text, align 2, keep-with-next
    152          void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
    153          {
   \                     HAL_DAC_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x....'....        BL       ?Subroutine1
    154            GPIO_InitTypeDef GPIO_InitStruct = {0};
    155            if(hdac->Instance==DAC)
   \                     ??CrossCallReturnLabel_3: (+1)
   \        0x8   0x6821             LDR      R1,[R4, #+0]
   \        0xA   0x....             LDR.N    R0,??DataTable6_5  ;; 0x40007400
   \        0xC   0x4281             CMP      R1,R0
   \        0xE   0xD11A             BNE.N    ??CrossCallReturnLabel_0
    156            {
    157            /* USER CODE BEGIN DAC_MspInit 0 */
    158          
    159            /* USER CODE END DAC_MspInit 0 */
    160              /* Peripheral clock enable */
    161              __HAL_RCC_DAC_CLK_ENABLE();
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x....             LDR.N    R0,??DataTable6_2  ;; 0x40023830
   \       0x14   0x9200             STR      R2,[SP, #+0]
   \       0x16   0x6901             LDR      R1,[R0, #+16]
   \       0x18   0xF041 0x5100      ORR      R1,R1,#0x20000000
   \       0x1C   0x6101             STR      R1,[R0, #+16]
   \       0x1E   0x6901             LDR      R1,[R0, #+16]
   \       0x20   0xF001 0x5100      AND      R1,R1,#0x20000000
   \       0x24   0x9100             STR      R1,[SP, #+0]
   \       0x26   0x9900             LDR      R1,[SP, #+0]
    162            
    163              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x28   0x9200             STR      R2,[SP, #+0]
    164              /**DAC GPIO Configuration    
    165              PA5     ------> DAC_OUT2 
    166              */
    167              GPIO_InitStruct.Pin = GPIO_PIN_5;
   \       0x2A   0x2120             MOVS     R1,#+32
   \       0x2C   0x6803             LDR      R3,[R0, #+0]
   \       0x2E   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x32   0x6003             STR      R3,[R0, #+0]
    168              GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
   \       0x34   0x2203             MOVS     R2,#+3
   \       0x36   0x6800             LDR      R0,[R0, #+0]
   \       0x38   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0x9800             LDR      R0,[SP, #+0]
    169              GPIO_InitStruct.Pull = GPIO_NOPULL;
    170              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0x40   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40020000
   \       0x42   0x....'....        BL       ?Subroutine0
    171          
    172            /* USER CODE BEGIN DAC_MspInit 1 */
    173          
    174            /* USER CODE END DAC_MspInit 1 */
    175            }
    176          
    177          }
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x46   0xB006             ADD      SP,SP,#+24
   \       0x48   0xBD10             POP      {R4,PC}          ;; return
    178          
    179          /**
    180          * @brief DAC MSP De-Initialization
    181          * This function freeze the hardware resources used in this example
    182          * @param hdac: DAC handle pointer
    183          * @retval None
    184          */

   \                                 In section .text, align 2, keep-with-next
    185          void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
    186          {
    187            if(hdac->Instance==DAC)
   \                     HAL_DAC_MspDeInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable6_5  ;; 0x40007400
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD108             BNE.N    ??HAL_DAC_MspDeInit_0
    188            {
    189            /* USER CODE BEGIN DAC_MspDeInit 0 */
    190          
    191            /* USER CODE END DAC_MspDeInit 0 */
    192              /* Peripheral clock disable */
    193              __HAL_RCC_DAC_CLK_DISABLE();
   \        0x8   0x....             LDR.N    R0,??DataTable6  ;; 0x40023840
   \        0xA   0x6802             LDR      R2,[R0, #+0]
   \        0xC   0xF022 0x5200      BIC      R2,R2,#0x20000000
   \       0x10   0x6002             STR      R2,[R0, #+0]
    194            
    195              /**DAC GPIO Configuration    
    196              PA5     ------> DAC_OUT2 
    197              */
    198              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
   \       0x12   0x2120             MOVS     R1,#+32
   \       0x14   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40020000
   \       0x16   0x....'....        B.W      HAL_GPIO_DeInit
    199          
    200            /* USER CODE BEGIN DAC_MspDeInit 1 */
    201          
    202            /* USER CODE END DAC_MspDeInit 1 */
    203            }
    204          
    205          }
   \                     ??HAL_DAC_MspDeInit_0: (+1)
   \       0x1A   0x4770             BX       LR               ;; return
    206          
    207          /**
    208          * @brief TIM_Base MSP Initialization
    209          * This function configures the hardware resources used in this example
    210          * @param htim_base: TIM_Base handle pointer
    211          * @retval None
    212          */

   \                                 In section .text, align 2, keep-with-next
    213          void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
    214          {
   \                     HAL_TIM_Base_MspInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable6_7  ;; 0x40000c00
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD000             BEQ.N    ??HAL_TIM_Base_MspInit_0
   \        0x8   0x4770             BX       LR
   \                     ??HAL_TIM_Base_MspInit_0: (+1)
   \        0xA   0xB580             PUSH     {R7,LR}
    215            if(htim_base->Instance==TIM5)
    216            {
    217            /* USER CODE BEGIN TIM5_MspInit 0 */
    218          
    219            /* USER CODE END TIM5_MspInit 0 */
    220              /* Peripheral clock enable */
    221              __HAL_RCC_TIM5_CLK_ENABLE();
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x....             LDR.N    R0,??DataTable6  ;; 0x40023840
   \       0x10   0x9200             STR      R2,[SP, #+0]
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF041 0x0108      ORR      R1,R1,#0x8
   \       0x18   0x6001             STR      R1,[R0, #+0]
    222              /* TIM5 interrupt Init */
    223              HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x6800             LDR      R0,[R0, #+0]
   \       0x1E   0xF000 0x0008      AND      R0,R0,#0x8
   \       0x22   0x9000             STR      R0,[SP, #+0]
   \       0x24   0x9800             LDR      R0,[SP, #+0]
   \       0x26   0x2032             MOVS     R0,#+50
   \       0x28   0x....'....        BL       HAL_NVIC_SetPriority
    224              HAL_NVIC_EnableIRQ(TIM5_IRQn);
   \       0x2C   0xE8BD 0x4002      POP      {R1,LR}
   \       0x30   0x2032             MOVS     R0,#+50
   \       0x32   0x....'....        B.W      HAL_NVIC_EnableIRQ
    225            /* USER CODE BEGIN TIM5_MspInit 1 */
    226          
    227            /* USER CODE END TIM5_MspInit 1 */
    228            }
    229          
    230          }
    231          
    232          /**
    233          * @brief TIM_Base MSP De-Initialization
    234          * This function freeze the hardware resources used in this example
    235          * @param htim_base: TIM_Base handle pointer
    236          * @retval None
    237          */

   \                                 In section .text, align 2, keep-with-next
    238          void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
    239          {
    240            if(htim_base->Instance==TIM5)
   \                     HAL_TIM_Base_MspDeInit: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable6_7  ;; 0x40000c00
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD107             BNE.N    ??HAL_TIM_Base_MspDeInit_0
    241            {
    242            /* USER CODE BEGIN TIM5_MspDeInit 0 */
    243          
    244            /* USER CODE END TIM5_MspDeInit 0 */
    245              /* Peripheral clock disable */
    246              __HAL_RCC_TIM5_CLK_DISABLE();
   \        0x8   0x....             LDR.N    R0,??DataTable6  ;; 0x40023840
   \        0xA   0x6802             LDR      R2,[R0, #+0]
   \        0xC   0xF022 0x0208      BIC      R2,R2,#0x8
   \       0x10   0x6002             STR      R2,[R0, #+0]
    247          
    248              /* TIM5 interrupt DeInit */
    249              HAL_NVIC_DisableIRQ(TIM5_IRQn);
   \       0x12   0x2032             MOVS     R0,#+50
   \       0x14   0x....'....        B.W      HAL_NVIC_DisableIRQ
    250            /* USER CODE BEGIN TIM5_MspDeInit 1 */
    251          
    252            /* USER CODE END TIM5_MspDeInit 1 */
    253            }
    254          
    255          }
   \                     ??HAL_TIM_Base_MspDeInit_0: (+1)
   \       0x18   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x4001'2000        DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x4002'0400        DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x4002'3844        DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x4000'7400        DC32     0x40007400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x4000'0C00        DC32     0x40000c00
    256          
    257          /* USER CODE BEGIN 1 */
    258          
    259          /* USER CODE END 1 */
    260          
    261          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_ADC_MspDeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
      32   HAL_ADC_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> memset
       0   HAL_DAC_MspDeInit
         0   -> HAL_GPIO_DeInit
      32   HAL_DAC_MspInit
        32   -> HAL_GPIO_Init
        32   -> memset
       4   HAL_MspInit
       0   HAL_TIM_Base_MspDeInit
         0   -> HAL_NVIC_DisableIRQ
       8   HAL_TIM_Base_MspInit
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      14  ?Subroutine0
      12  ?Subroutine1
      40  HAL_ADC_MspDeInit
      90  HAL_ADC_MspInit
      28  HAL_DAC_MspDeInit
      74  HAL_DAC_MspInit
      52  HAL_MspInit
      26  HAL_TIM_Base_MspDeInit
      54  HAL_TIM_Base_MspInit

 
 422 bytes in section .text
 
 422 bytes of CODE memory

Errors: none
Warnings: none
