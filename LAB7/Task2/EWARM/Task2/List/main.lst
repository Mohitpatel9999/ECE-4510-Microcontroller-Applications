###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         26/Feb/2020  14:11:26
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\LAB7\Task2\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EWDB88.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB7\Task2\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM\Task2\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB7\Task2\EWARM\Task2\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM\Task2\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB7\Task2\EWARM\Task2\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB7\Task2\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          ADC_HandleTypeDef hadc1;
   \                     hadc1:
   \        0x0                      DS8 72
     45          
     46          /* USER CODE BEGIN PV */
     47          uint16_t Value = 0;
   \                     Value:
   \       0x48                      DS8 2
     48          
     49          /* USER CODE END PV */
     50          
     51          /* Private function prototypes -----------------------------------------------*/
     52          void SystemClock_Config(void);
     53          static void MX_GPIO_Init(void);
     54          static void MX_ADC1_Init(void);
     55          /* USER CODE BEGIN PFP */
     56          
     57          /* USER CODE END PFP */
     58          
     59          /* Private user code ---------------------------------------------------------*/
     60          /* USER CODE BEGIN 0 */
     61          /* USER CODE END 0 */
     62          
     63          /**
     64            * @brief  The application entry point.
     65            * @retval int
     66            */

   \                                 In section .text, align 4, keep-with-next
     67          int main(void)
     68          {
   \                     main: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
     69            /* USER CODE BEGIN 1 */
     70            /* USER CODE END 1 */
     71            /* MCU Configuration--------------------------------------------------------*/
     72            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     73            HAL_Init();
   \        0x4   0x....'....        BL       HAL_Init
     74            /* USER CODE BEGIN Init */
     75            /* USER CODE END Init */
     76            /* Configure the system clock */
     77            SystemClock_Config();
   \        0x8   0x....'....        BL       SystemClock_Config
     78            /* USER CODE BEGIN SysInit */
     79            /* USER CODE END SysInit */
     80            /* Initialize all configured peripherals */
     81            MX_GPIO_Init();
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
     82            MX_ADC1_Init();
   \       0x10   0x....             LDR.N    R4,??DataTable2
   \       0x12   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023830
   \       0x14   0x6801             LDR      R1,[R0, #+0]
   \       0x16   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x1A   0x6001             STR      R1,[R0, #+0]
   \       0x1C   0xF104 0x0530      ADD      R5,R4,#+48
   \       0x20   0x6802             LDR      R2,[R0, #+0]
   \       0x22   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x26   0x9200             STR      R2,[SP, #+0]
   \       0x28   0x2200             MOVS     R2,#+0
   \       0x2A   0x9900             LDR      R1,[SP, #+0]
   \       0x2C   0x9200             STR      R2,[SP, #+0]
   \       0x2E   0x2210             MOVS     R2,#+16
   \       0x30   0x6803             LDR      R3,[R0, #+0]
   \       0x32   0xF043 0x0302      ORR      R3,R3,#0x2
   \       0x36   0x6003             STR      R3,[R0, #+0]
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0x6800             LDR      R0,[R0, #+0]
   \       0x3C   0xF000 0x0002      AND      R0,R0,#0x2
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0x9800             LDR      R0,[SP, #+0]
   \       0x44   0x4668             MOV      R0,SP
   \       0x46   0x....'....        BL       memset
   \       0x4A   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40012000
   \       0x4C   0x6020             STR      R0,[R4, #+0]
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x6120             STR      R0,[R4, #+16]
   \       0x54   0xF884 0x0020      STRB     R0,[R4, #+32]
   \       0x58   0x6061             STR      R1,[R4, #+4]
   \       0x5A   0x60A1             STR      R1,[R4, #+8]
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0x....             LDR.N    R0,??DataTable2_3  ;; 0xf000001
   \       0x60   0x62A0             STR      R0,[R4, #+40]
   \       0x62   0x7621             STRB     R1,[R4, #+24]
   \       0x64   0x2001             MOVS     R0,#+1
   \       0x66   0x2100             MOVS     R1,#+0
   \       0x68   0x61E0             STR      R0,[R4, #+28]
   \       0x6A   0x6160             STR      R0,[R4, #+20]
   \       0x6C   0x62E1             STR      R1,[R4, #+44]
   \       0x6E   0x60E1             STR      R1,[R4, #+12]
   \       0x70   0x7029             STRB     R1,[R5, #+0]
   \       0x72   0x4620             MOV      R0,R4
   \       0x74   0x....'....        BL       HAL_ADC_Init
   \       0x78   0x2009             MOVS     R0,#+9
   \       0x7A   0x2101             MOVS     R1,#+1
   \       0x7C   0x9000             STR      R0,[SP, #+0]
   \       0x7E   0x9101             STR      R1,[SP, #+4]
   \       0x80   0x2200             MOVS     R2,#+0
   \       0x82   0x9202             STR      R2,[SP, #+8]
   \       0x84   0x4669             MOV      R1,SP
   \       0x86   0x4620             MOV      R0,R4
   \       0x88   0x....'....        BL       HAL_ADC_ConfigChannel
     83            /* USER CODE BEGIN 2 */
     84            HAL_ADC_Start_IT(&hadc1); 
   \       0x8C   0x4620             MOV      R0,R4
   \       0x8E   0x....'....        BL       HAL_ADC_Start_IT
   \       0x92   0xBF00             Nop
   \       0x94   0x....             ADR.N    R4,?_0
     85            /* USER CODE END 2 */ 
     86            /* Infinite loop */
     87            /* USER CODE BEGIN WHILE */
     88            while (1)
     89            {
     90              printf("Value: %d\n", Value);
                     ^
Warning[Pe223]: function "printf" declared implicitly
   \                     ??main_0: (+1)
   \       0x96   0x8B29             LDRH     R1,[R5, #+24]
   \       0x98   0x4620             MOV      R0,R4
   \       0x9A   0x....'....        BL       printf
     91              HAL_Delay(100);
   \       0x9E   0x2064             MOVS     R0,#+100
   \       0xA0   0x....'....        BL       HAL_Delay
   \       0xA4   0xE7F7             B.N      ??main_0
     92              /* USER CODE END WHILE */
     93              /* USER CODE BEGIN 3 */
     94            }
     95            /* USER CODE END 3 */
     96          }
     97          
     98          /**
     99            * @brief System Clock Configuration
    100            * @retval None
    101            */

   \                                 In section .text, align 2, keep-with-next
    102          void SystemClock_Config(void)
    103          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2214             MOVS     R2,#+20
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       memset
    104            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    105            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    106          
    107            /** Configure the main internal regulator output voltage 
    108            */
    109            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
    110            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
    111            /** Initializes the CPU, AHB and APB busses clocks 
    112            */
    113            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    114            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x1C   0xF44F 0x3380      MOV      R3,#+65536
   \       0x20   0x....             LDR.N    R0,??DataTable2_4  ;; 0x40023840
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40007000
   \       0x38   0x9100             STR      R1,[SP, #+0]
   \       0x3A   0x6802             LDR      R2,[R0, #+0]
   \       0x3C   0xF422 0x4240      BIC      R2,R2,#0xC000
   \       0x40   0xF442 0x4280      ORR      R2,R2,#0x4000
   \       0x44   0x6002             STR      R2,[R0, #+0]
   \       0x46   0x2201             MOVS     R2,#+1
   \       0x48   0x6800             LDR      R0,[R0, #+0]
   \       0x4A   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x4E   0x9000             STR      R0,[SP, #+0]
    115            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    116            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    117            RCC_OscInitStruct.PLL.PLLM = 4;
    118            RCC_OscInitStruct.PLL.PLLN = 100;
    119            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    120            RCC_OscInitStruct.PLL.PLLQ = 4;
    121            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x50   0xA806             ADD      R0,SP,#+24
   \       0x52   0x9900             LDR      R1,[SP, #+0]
   \       0x54   0x9206             STR      R2,[SP, #+24]
   \       0x56   0x2102             MOVS     R1,#+2
   \       0x58   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x5C   0x910C             STR      R1,[SP, #+48]
   \       0x5E   0x920D             STR      R2,[SP, #+52]
   \       0x60   0x2104             MOVS     R1,#+4
   \       0x62   0x2264             MOVS     R2,#+100
   \       0x64   0x910E             STR      R1,[SP, #+56]
   \       0x66   0x920F             STR      R2,[SP, #+60]
   \       0x68   0x2102             MOVS     R1,#+2
   \       0x6A   0x2204             MOVS     R2,#+4
   \       0x6C   0x9307             STR      R3,[SP, #+28]
   \       0x6E   0x9110             STR      R1,[SP, #+64]
   \       0x70   0x9211             STR      R2,[SP, #+68]
   \       0x72   0x....'....        BL       HAL_RCC_OscConfig
    122            {
    123              Error_Handler();
    124            }
    125            /** Initializes the CPU, AHB and APB busses clocks 
    126            */
    127            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    128                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    129            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x9102             STR      R1,[SP, #+8]
    130            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x9203             STR      R2,[SP, #+12]
   \       0x7E   0x200F             MOVS     R0,#+15
    131            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x80   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x9104             STR      R1,[SP, #+16]
    132            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x88   0xF44F 0x5280      MOV      R2,#+4096
   \       0x8C   0x9205             STR      R2,[SP, #+20]
    133          
    134            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
   \       0x8E   0x2103             MOVS     R1,#+3
   \       0x90   0xA801             ADD      R0,SP,#+4
   \       0x92   0x....'....        BL       HAL_RCC_ClockConfig
    135            {
    136              Error_Handler();
    137            }
    138          }
   \       0x96   0xB013             ADD      SP,SP,#+76
   \       0x98   0xBD00             POP      {PC}             ;; return
    139          
    140          /**
    141            * @brief ADC1 Initialization Function
    142            * @param None
    143            * @retval None
    144            */
    145          static void MX_ADC1_Init(void)
    146          {
    147          
    148            /* USER CODE BEGIN ADC1_Init 0 */
    149          
    150            /* USER CODE END ADC1_Init 0 */
    151          
    152            ADC_ChannelConfTypeDef sConfig = {0};
    153          
    154            /* USER CODE BEGIN ADC1_Init 1 */
    155          
    156            /* USER CODE END ADC1_Init 1 */
    157            /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    158            */
    159            hadc1.Instance = ADC1;
    160            hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
    161            hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    162            hadc1.Init.ScanConvMode = DISABLE;
    163            hadc1.Init.ContinuousConvMode = ENABLE;
    164            hadc1.Init.DiscontinuousConvMode = DISABLE;
    165            hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    166            hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    167            hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    168            hadc1.Init.NbrOfConversion = 1;
    169            hadc1.Init.DMAContinuousRequests = DISABLE;
    170            hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    171            if (HAL_ADC_Init(&hadc1) != HAL_OK)
    172            {
    173              Error_Handler();
    174            }
    175            /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    176            */
    177            sConfig.Channel = ADC_CHANNEL_9;
    178            sConfig.Rank = 1;
    179            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    180            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    181            {
    182              Error_Handler();
    183            }
    184            /* USER CODE BEGIN ADC1_Init 2 */
    185          
    186            /* USER CODE END ADC1_Init 2 */
    187          
    188          }
    189          
    190          /**
    191            * @brief GPIO Initialization Function
    192            * @param None
    193            * @retval None
    194            */
    195          static void MX_GPIO_Init(void)
    196          {
    197          
    198            /* GPIO Ports Clock Enable */
    199            __HAL_RCC_GPIOH_CLK_ENABLE();
    200            __HAL_RCC_GPIOB_CLK_ENABLE();
    201          
    202          }
    203          
    204          /* USER CODE BEGIN 4 */
    205          
    206          /* USER CODE END 4 */
    207          
    208          /**
    209            * @brief  This function is executed in case of error occurrence.
    210            * @retval None
    211            */

   \                                 In section .text, align 2, keep-with-next
    212          void Error_Handler(void)
    213          {
    214            /* USER CODE BEGIN Error_Handler_Debug */
    215            /* User can add his own implementation to report the HAL error return state */
    216          
    217            /* USER CODE END Error_Handler_Debug */
    218          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     hadc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x4001'2000        DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x0F00'0001        DC32     0xf000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x56 0x61          DC8 "Value: %d\012"

   \              0x6C 0x75    

   \              0x65 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \        0xB   0x00               DC8 0
    219          
    220          #ifdef  USE_FULL_ASSERT
    221          /**
    222            * @brief  Reports the name of the source file and the source line number
    223            *         where the assert_param error has occurred.
    224            * @param  file: pointer to the source file name
    225            * @param  line: assert_param error line source number
    226            * @retval None
    227            */
    228          void assert_failed(uint8_t *file, uint32_t line)
    229          { 
    230            /* USER CODE BEGIN 6 */
    231            /* User can add his own implementation to report the file name and line number,
    232               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    233            /* USER CODE END 6 */
    234          }
    235          #endif /* USE_FULL_ASSERT */
    236          
    237          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      32   main
        32   -> HAL_ADC_ConfigChannel
        32   -> HAL_ADC_Init
        32   -> HAL_ADC_Start_IT
        32   -> HAL_Delay
        32   -> HAL_Init
        32   -> SystemClock_Config
        32   -> memset
        32   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
      12  ?_0
       2  Error_Handler
     154  SystemClock_Config
      74  hadc1
          Value
     166  main

 
  74 bytes in section .bss
 358 bytes in section .text
 
 358 bytes of CODE memory
  74 bytes of DATA memory

Errors: none
Warnings: 1
