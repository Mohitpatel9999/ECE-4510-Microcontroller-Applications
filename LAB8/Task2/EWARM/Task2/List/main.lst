###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         07/Mar/2020  11:44:59
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\LAB8\Task2\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW413A.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB8\Task2\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM\Task2\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB8\Task2\EWARM\Task2\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM\Task2\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\Task2\EWARM\Task2\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB8\Task2\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          ADC_HandleTypeDef hadc2;
   \                     hadc2:
   \        0x0                      DS8 72
     45          
     46          TIM_HandleTypeDef htim2;
   \                     htim2:
   \       0x48                      DS8 64
     47          
     48          /* USER CODE BEGIN PV */
     49          extern char temp_array[5];
     50          /* USER CODE END PV */
     51          
     52          /* Private function prototypes -----------------------------------------------*/
     53          void SystemClock_Config(void);
     54          static void MX_GPIO_Init(void);
     55          static void MX_ADC2_Init(void);
     56          static void MX_TIM2_Init(void);
     57          /* USER CODE BEGIN PFP */
     58          
     59          /* USER CODE END PFP */
     60          
     61          /* Private user code ---------------------------------------------------------*/
     62          /* USER CODE BEGIN 0 */

   \                                 In section .text, align 2, keep-with-next
     63          void command(char i)
     64          {
   \                     command: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     65           GPIOD-> ODR = i << 8 ; //put data on output Port
   \        0x2   0x....'....        BL       ?Subroutine3
     66           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_RESET); // D/I=LOW : send instruction
   \                     ??CrossCallReturnLabel_4: (+1)
   \        0x6   0x6018             STR      R0,[R3, #+0]
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x....             B.N      ??Subroutine0_0
     67           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET); // E-> HIGH
     68           HAL_Delay(1);
     69           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
     70          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable6  ;; 0x40020c14
   \        0x2   0x....             LDR.N    R4,??DataTable6_1  ;; 0x40020000
   \        0x4   0x0200             LSLS     R0,R0,#+8
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x6018             STR      R0,[R3, #+0]
   \        0x2   0x2201             MOVS     R2,#+1
   \                     ??Subroutine0_0: (+1)
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x4620             MOV      R0,R4
   \        0x8   0x....'....        BL       HAL_GPIO_WritePin
   \        0xC   0x2201             MOVS     R2,#+1
   \        0xE   0x2102             MOVS     R1,#+2
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       HAL_GPIO_WritePin
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x....'....        BL       HAL_Delay
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0xE8BD 0x4010      POP      {R4,LR}
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x....'....        B.W      HAL_GPIO_WritePin
     71          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
     72          void write(char i)
     73          {
   \                     write: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     74           GPIOD-> ODR = i << 8 ; //put data on output Port
   \        0x2   0x....'....        BL       ?Subroutine3
     75           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET); // D/I=high : send data
   \                     ??CrossCallReturnLabel_5: (+1)
   \        0x6   0x....             B.N      ?Subroutine0
     76           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET); // E-> HIGH
     77           HAL_Delay(1);
     78           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
     79          }
     80          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
     81          void init()
     82          {
   \                     init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     83           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2102             MOVS     R1,#+2
   \        0x6   0x....             LDR.N    R0,??DataTable6_1  ;; 0x40020000
   \        0x8   0x....'....        BL       HAL_GPIO_WritePin
     84           HAL_Delay(100); //Wait >40 msec after power is applied
   \        0xC   0x2064             MOVS     R0,#+100
   \        0xE   0x....'....        BL       HAL_Delay
     85           command(0x30); //command 0x30 = Wake up
   \       0x12   0x2030             MOVS     R0,#+48
   \       0x14   0x....'....        BL       command
     86           HAL_Delay(30); //must wait 5ms, busy flag not available
   \       0x18   0x201E             MOVS     R0,#+30
   \       0x1A   0x....'....        BL       HAL_Delay
     87           command(0x30); //command 0x30 = Wake up #2
   \       0x1E   0x2030             MOVS     R0,#+48
   \       0x20   0x....'....        BL       command
     88           HAL_Delay(10); //must wait 160us, busy flag not available
   \       0x24   0x200A             MOVS     R0,#+10
   \       0x26   0x....'....        BL       HAL_Delay
     89           command(0x30); //command 0x30 = Wake up #3
   \       0x2A   0x2030             MOVS     R0,#+48
   \       0x2C   0x....'....        BL       command
     90           HAL_Delay(10); //must wait 160us, busy flag not available
   \       0x30   0x200A             MOVS     R0,#+10
   \       0x32   0x....'....        BL       HAL_Delay
     91           command(0x38); //Function set: 8-bit/2-line
   \       0x36   0x2038             MOVS     R0,#+56
   \       0x38   0x....'....        BL       command
     92           command(0x10); //Set cursor
   \       0x3C   0x2010             MOVS     R0,#+16
   \       0x3E   0x....'....        BL       command
     93           command(0x0c); //Display ON; Cursor ON
   \       0x42   0x200C             MOVS     R0,#+12
   \       0x44   0x....'....        BL       command
     94           command(0x06); //Entry mode set
   \       0x48   0xE8BD 0x4002      POP      {R1,LR}
   \       0x4C   0x2006             MOVS     R0,#+6
   \       0x4E   0x....             B.N      command
     95          }

   \                                 In section .text, align 2, keep-with-next
     96          void clear(void) {
   \                     clear: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     97           GPIOD->ODR = 0x0000;
   \        0x2   0x....             LDR.N    R3,??DataTable6  ;; 0x40020c14
     98           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET); // D/I=high : send data
   \        0x4   0x....             LDR.N    R4,??DataTable6_1  ;; 0x40020000
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8                      REQUIRE ?Subroutine0
   \        0x8                      ;; // Fall through to label ?Subroutine0
     99           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET); // E-> HIGH
    100           HAL_Delay(1);
    101           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
    102          }
    103          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
    104          void write_string(char *display_string) {
   \                     write_string: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
    105            clear();
   \        0x4   0x....'....        BL       clear
    106            uint8_t flag = 0;
   \        0x8   0x2500             MOVS     R5,#+0
    107            for(uint8_t i = 0; i < 16; i++){
   \        0xA   0x2600             MOVS     R6,#+0
    108              if(flag == 0){
    109                write(display_string[i]);
   \                     ??write_string_0: (+1)
   \        0xC   0x5DA0             LDRB     R0,[R4, R6]
   \        0xE   0xE002             B.N      ??write_string_1
    110              }
   \                     ??write_string_2: (+1)
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0xD0FB             BEQ.N    ??write_string_0
    111              else {
    112                write(0x00);
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??write_string_1: (+1)
   \       0x16   0x....'....        BL       write
    113              }
    114              if(display_string[i] == '\0'){
   \       0x1A   0x5DA0             LDRB     R0,[R4, R6]
   \       0x1C   0xB900             CBNZ.N   R0,??write_string_3
    115                flag = 1;
   \       0x1E   0x2501             MOVS     R5,#+1
    116              }
    117            }
   \                     ??write_string_3: (+1)
   \       0x20   0x1C76             ADDS     R6,R6,#+1
   \       0x22   0x2E10             CMP      R6,#+16
   \       0x24   0xDBF4             BLT.N    ??write_string_2
    118          }
   \       0x26   0xBD70             POP      {R4-R6,PC}       ;; return
    119          /* USER CODE END 0 */
    120          
    121          /**
    122            * @brief  The application entry point.
    123            * @retval int
    124            */

   \                                 In section .text, align 4, keep-with-next
    125          int main(void)
    126          {
   \                     main: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    127            /* USER CODE BEGIN 1 */
    128            /* USER CODE END 1 */
    129            /* MCU Configuration--------------------------------------------------------*/
    130            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    131            HAL_Init();
   \        0x4   0x....'....        BL       HAL_Init
    132            /* USER CODE BEGIN Init */
    133            init();
   \        0x8   0x....'....        BL       init
    134            // say hi 
    135            write_string("LAB*");
   \        0xC   0x....             ADR.N    R0,?_0
   \        0xE   0x....             LDR.N    R4,??DataTable6_2
   \       0x10   0x....             LDR.N    R5,??DataTable6_1  ;; 0x40020000
   \       0x12   0x....             LDR.N    R6,??DataTable6_3  ;; 0x40020c00
   \       0x14   0x....'....        BL       write_string
    136            HAL_Delay(200);
   \       0x18   0x20C8             MOVS     R0,#+200
   \       0x1A   0x....'....        BL       HAL_Delay
    137            write_string(temp_array);
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       write_string
    138            /* USER CODE END Init */
    139            /* Configure the system clock */
    140            SystemClock_Config();
   \       0x24   0x....'....        BL       SystemClock_Config
    141            /* USER CODE BEGIN SysInit */
    142            /* USER CODE END SysInit */
    143            /* Initialize all configured peripherals */
    144            MX_GPIO_Init();
   \       0x28   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   \       0x30   0x....             LDR.N    R0,??DataTable6_4  ;; 0x40023830
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x38   0x6001             STR      R1,[R0, #+0]
   \       0x3A   0x6802             LDR      R2,[R0, #+0]
   \       0x3C   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x40   0x9200             STR      R2,[SP, #+0]
   \       0x42   0x2200             MOVS     R2,#+0
   \       0x44   0x9900             LDR      R1,[SP, #+0]
   \       0x46   0x9200             STR      R2,[SP, #+0]
   \       0x48   0x6803             LDR      R3,[R0, #+0]
   \       0x4A   0xF043 0x0304      ORR      R3,R3,#0x4
   \       0x4E   0x6003             STR      R3,[R0, #+0]
   \       0x50   0x6801             LDR      R1,[R0, #+0]
   \       0x52   0xF001 0x0104      AND      R1,R1,#0x4
   \       0x56   0x9100             STR      R1,[SP, #+0]
   \       0x58   0x9900             LDR      R1,[SP, #+0]
   \       0x5A   0x9200             STR      R2,[SP, #+0]
   \       0x5C   0x6803             LDR      R3,[R0, #+0]
   \       0x5E   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x62   0x6003             STR      R3,[R0, #+0]
   \       0x64   0x6801             LDR      R1,[R0, #+0]
   \       0x66   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x6A   0x9100             STR      R1,[SP, #+0]
   \       0x6C   0x9900             LDR      R1,[SP, #+0]
   \       0x6E   0x9200             STR      R2,[SP, #+0]
   \       0x70   0x2103             MOVS     R1,#+3
   \       0x72   0x6803             LDR      R3,[R0, #+0]
   \       0x74   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0x78   0x6003             STR      R3,[R0, #+0]
   \       0x7A   0x6800             LDR      R0,[R0, #+0]
   \       0x7C   0xF000 0x0008      AND      R0,R0,#0x8
   \       0x80   0x9000             STR      R0,[SP, #+0]
   \       0x82   0x9800             LDR      R0,[SP, #+0]
   \       0x84   0x4628             MOV      R0,R5
   \       0x86   0x....'....        BL       HAL_GPIO_WritePin
   \       0x8A   0x2200             MOVS     R2,#+0
   \       0x8C   0xF44F 0x417F      MOV      R1,#+65280
   \       0x90   0x4630             MOV      R0,R6
   \       0x92   0x....'....        BL       HAL_GPIO_WritePin
   \       0x96   0x2103             MOVS     R1,#+3
   \       0x98   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x9C   0x4628             MOV      R0,R5
   \       0x9E   0x....'....        BL       HAL_GPIO_Init
   \       0xA2   0x2004             MOVS     R0,#+4
   \       0xA4   0x2100             MOVS     R1,#+0
   \       0xA6   0x9001             STR      R0,[SP, #+4]
   \       0xA8   0x9102             STR      R1,[SP, #+8]
   \       0xAA   0x9103             STR      R1,[SP, #+12]
   \       0xAC   0x4628             MOV      R0,R5
   \       0xAE   0xA901             ADD      R1,SP,#+4
   \       0xB0   0x....'....        BL       HAL_GPIO_Init
   \       0xB4   0xF44F 0x417F      MOV      R1,#+65280
   \       0xB8   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0xBC   0x4630             MOV      R0,R6
   \       0xBE   0x....'....        BL       HAL_GPIO_Init
    145            MX_ADC2_Init();
   \       0xC2   0x2210             MOVS     R2,#+16
   \       0xC4   0x2100             MOVS     R1,#+0
   \       0xC6   0x4668             MOV      R0,SP
   \       0xC8   0x....'....        BL       memset
   \       0xCC   0x....             LDR.N    R5,??DataTable6_5
   \       0xCE   0x....             LDR.N    R0,??DataTable6_6  ;; 0x40012100
   \       0xD0   0x6028             STR      R0,[R5, #+0]
   \       0xD2   0xF44F 0x3180      MOV      R1,#+65536
   \       0xD6   0x....             LDR.N    R0,??DataTable6_7  ;; 0xf000001
   \       0xD8   0x62A8             STR      R0,[R5, #+40]
   \       0xDA   0x6069             STR      R1,[R5, #+4]
   \       0xDC   0x2001             MOVS     R0,#+1
   \       0xDE   0xF105 0x0630      ADD      R6,R5,#+48
   \       0xE2   0x2200             MOVS     R2,#+0
   \       0xE4   0x2101             MOVS     R1,#+1
   \       0xE6   0x61E8             STR      R0,[R5, #+28]
   \       0xE8   0x6168             STR      R0,[R5, #+20]
   \       0xEA   0x60AA             STR      R2,[R5, #+8]
   \       0xEC   0x612A             STR      R2,[R5, #+16]
   \       0xEE   0x7629             STRB     R1,[R5, #+24]
   \       0xF0   0xF885 0x2020      STRB     R2,[R5, #+32]
   \       0xF4   0x62EA             STR      R2,[R5, #+44]
   \       0xF6   0x60EA             STR      R2,[R5, #+12]
   \       0xF8   0x7032             STRB     R2,[R6, #+0]
   \       0xFA   0x4628             MOV      R0,R5
   \       0xFC   0x....'....        BL       HAL_ADC_Init
   \      0x100   0x200A             MOVS     R0,#+10
   \      0x102   0x2101             MOVS     R1,#+1
   \      0x104   0x9000             STR      R0,[SP, #+0]
   \      0x106   0x9101             STR      R1,[SP, #+4]
   \      0x108   0x2200             MOVS     R2,#+0
   \      0x10A   0x9202             STR      R2,[SP, #+8]
   \      0x10C   0x4669             MOV      R1,SP
   \      0x10E   0x4628             MOV      R0,R5
   \      0x110   0x....'....        BL       HAL_ADC_ConfigChannel
    146            MX_TIM2_Init();
   \      0x114   0x2210             MOVS     R2,#+16
   \      0x116   0x2100             MOVS     R1,#+0
   \      0x118   0xA802             ADD      R0,SP,#+8
   \      0x11A   0x....'....        BL       memset
   \      0x11E   0x2208             MOVS     R2,#+8
   \      0x120   0x2100             MOVS     R1,#+0
   \      0x122   0x4668             MOV      R0,SP
   \      0x124   0x....'....        BL       memset
   \      0x128   0xF04F 0x4080      MOV      R0,#+1073741824
   \      0x12C   0x61B0             STR      R0,[R6, #+24]
   \      0x12E   0xF644 0x6120      MOVW     R1,#+20000
   \      0x132   0x61F1             STR      R1,[R6, #+28]
   \      0x134   0x2000             MOVS     R0,#+0
   \      0x136   0x6230             STR      R0,[R6, #+32]
   \      0x138   0x2169             MOVS     R1,#+105
   \      0x13A   0x62B0             STR      R0,[R6, #+40]
   \      0x13C   0x6330             STR      R0,[R6, #+48]
   \      0x13E   0x6271             STR      R1,[R6, #+36]
   \      0x140   0xF105 0x0048      ADD      R0,R5,#+72
   \      0x144   0x....'....        BL       HAL_TIM_Base_Init
   \      0x148   0xF44F 0x5080      MOV      R0,#+4096
   \      0x14C   0x9002             STR      R0,[SP, #+8]
   \      0x14E   0xA902             ADD      R1,SP,#+8
   \      0x150   0xF105 0x0048      ADD      R0,R5,#+72
   \      0x154   0x....'....        BL       HAL_TIM_ConfigClockSource
   \      0x158   0x2100             MOVS     R1,#+0
   \      0x15A   0x9100             STR      R1,[SP, #+0]
   \      0x15C   0x9101             STR      R1,[SP, #+4]
   \      0x15E   0xF105 0x0048      ADD      R0,R5,#+72
   \      0x162   0x4669             MOV      R1,SP
   \      0x164   0x....'....        BL       HAL_TIMEx_MasterConfigSynchronization
    147            /* USER CODE BEGIN 2 */
    148            HAL_ADC_Start_IT(&hadc2);
   \      0x168   0x4628             MOV      R0,R5
   \      0x16A   0x....'....        BL       HAL_ADC_Start_IT
    149            HAL_TIM_Base_Start(&htim2);
   \      0x16E   0xF105 0x0048      ADD      R0,R5,#+72
   \      0x172   0x....'....        BL       HAL_TIM_Base_Start
    150            /* USER CODE END 2 */
    151            /* Infinite loop */
    152            /* USER CODE BEGIN WHILE */
    153            while (1)
    154            {
    155              write_string(temp_array);
   \                     ??main_0: (+1)
   \      0x176   0x4620             MOV      R0,R4
   \      0x178   0x....'....        BL       write_string
    156              HAL_Delay(250);
   \      0x17C   0x20FA             MOVS     R0,#+250
   \      0x17E   0x....'....        BL       HAL_Delay
   \      0x182   0xE7F8             B.N      ??main_0
    157              /* USER CODE END WHILE */
    158              /* USER CODE BEGIN 3 */
    159            }
    160            /* USER CODE END 3 */
    161          }
    162          
    163          /**
    164            * @brief System Clock Configuration
    165            * @retval None
    166            */

   \                                 In section .text, align 2, keep-with-next
    167          void SystemClock_Config(void)
    168          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x....'....        BL       ?Subroutine2
    169            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    170            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    171          
    172            /** Configure the main internal regulator output voltage 
    173            */
    174            __HAL_RCC_PWR_CLK_ENABLE();
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
    175            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    176            /** Initializes the CPU, AHB and APB busses clocks 
    177            */
    178            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    179            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x16   0xF44F 0x3380      MOV      R3,#+65536
   \       0x1A   0x....             LDR.N    R0,??DataTable6_8  ;; 0x40023840
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x22   0x6001             STR      R1,[R0, #+0]
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
   \       0x30   0x....             LDR.N    R0,??DataTable6_9  ;; 0x40007000
   \       0x32   0x9100             STR      R1,[SP, #+0]
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0xF442 0x4240      ORR      R2,R2,#0xC000
   \       0x3A   0x6002             STR      R2,[R0, #+0]
   \       0x3C   0x2201             MOVS     R2,#+1
   \       0x3E   0x6800             LDR      R0,[R0, #+0]
   \       0x40   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x44   0x9000             STR      R0,[SP, #+0]
    180            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    181            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    182            RCC_OscInitStruct.PLL.PLLM = 4;
    183            RCC_OscInitStruct.PLL.PLLN = 168;
    184            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    185            RCC_OscInitStruct.PLL.PLLQ = 4;
    186            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x46   0xA806             ADD      R0,SP,#+24
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0x9206             STR      R2,[SP, #+24]
   \       0x4C   0x2102             MOVS     R1,#+2
   \       0x4E   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x52   0x910C             STR      R1,[SP, #+48]
   \       0x54   0x920D             STR      R2,[SP, #+52]
   \       0x56   0x2104             MOVS     R1,#+4
   \       0x58   0x22A8             MOVS     R2,#+168
   \       0x5A   0x910E             STR      R1,[SP, #+56]
   \       0x5C   0x920F             STR      R2,[SP, #+60]
   \       0x5E   0x2102             MOVS     R1,#+2
   \       0x60   0x2204             MOVS     R2,#+4
   \       0x62   0x9307             STR      R3,[SP, #+28]
   \       0x64   0x9110             STR      R1,[SP, #+64]
   \       0x66   0x9211             STR      R2,[SP, #+68]
   \       0x68   0x....'....        BL       HAL_RCC_OscConfig
    187            {
    188              Error_Handler();
    189            }
    190            /** Initializes the CPU, AHB and APB busses clocks 
    191            */
    192            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    193                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    194            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x6C   0x2102             MOVS     R1,#+2
   \       0x6E   0x9102             STR      R1,[SP, #+8]
    195            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x70   0x2200             MOVS     R2,#+0
   \       0x72   0x9203             STR      R2,[SP, #+12]
   \       0x74   0x200F             MOVS     R0,#+15
    196            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x76   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x7A   0x9001             STR      R0,[SP, #+4]
   \       0x7C   0x9104             STR      R1,[SP, #+16]
    197            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x7E   0xF44F 0x5280      MOV      R2,#+4096
   \       0x82   0x9205             STR      R2,[SP, #+20]
    198          
    199            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
   \       0x84   0x2105             MOVS     R1,#+5
   \       0x86   0xA801             ADD      R0,SP,#+4
   \       0x88   0x....'....        BL       HAL_RCC_ClockConfig
    200            {
    201              Error_Handler();
    202            }
    203          }
   \       0x8C   0xB013             ADD      SP,SP,#+76
   \       0x8E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2214             MOVS     R2,#+20
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA801             ADD      R0,SP,#+4
   \        0x6   0x....'....        B.W      memset
    204          
    205          /**
    206            * @brief ADC2 Initialization Function
    207            * @param None
    208            * @retval None
    209            */
    210          static void MX_ADC2_Init(void)
    211          {
    212          
    213            /* USER CODE BEGIN ADC2_Init 0 */
    214          
    215            /* USER CODE END ADC2_Init 0 */
    216          
    217            ADC_ChannelConfTypeDef sConfig = {0};
    218          
    219            /* USER CODE BEGIN ADC2_Init 1 */
    220          
    221            /* USER CODE END ADC2_Init 1 */
    222            /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    223            */
    224            hadc2.Instance = ADC2;
    225            hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    226            hadc2.Init.Resolution = ADC_RESOLUTION_12B;
    227            hadc2.Init.ScanConvMode = DISABLE;
    228            hadc2.Init.ContinuousConvMode = ENABLE;
    229            hadc2.Init.DiscontinuousConvMode = DISABLE;
    230            hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    231            hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    232            hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    233            hadc2.Init.NbrOfConversion = 1;
    234            hadc2.Init.DMAContinuousRequests = DISABLE;
    235            hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    236            if (HAL_ADC_Init(&hadc2) != HAL_OK)
    237            {
    238              Error_Handler();
    239            }
    240            /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    241            */
    242            sConfig.Channel = ADC_CHANNEL_10;
    243            sConfig.Rank = 1;
    244            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    245            if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
    246            {
    247              Error_Handler();
    248            }
    249            /* USER CODE BEGIN ADC2_Init 2 */
    250          
    251            /* USER CODE END ADC2_Init 2 */
    252          
    253          }
    254          
    255          /**
    256            * @brief TIM2 Initialization Function
    257            * @param None
    258            * @retval None
    259            */
    260          static void MX_TIM2_Init(void)
    261          {
    262          
    263            /* USER CODE BEGIN TIM2_Init 0 */
    264          
    265            /* USER CODE END TIM2_Init 0 */
    266          
    267            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    268            TIM_MasterConfigTypeDef sMasterConfig = {0};
    269          
    270            /* USER CODE BEGIN TIM2_Init 1 */
    271          
    272            /* USER CODE END TIM2_Init 1 */
    273            htim2.Instance = TIM2;
    274            htim2.Init.Prescaler = 20000;
    275            htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    276            htim2.Init.Period = 105;
    277            htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    278            htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    279            if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    280            {
    281              Error_Handler();
    282            }
    283            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    284            if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
    285            {
    286              Error_Handler();
    287            }
    288            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    289            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    290            if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    291            {
    292              Error_Handler();
    293            }
    294            /* USER CODE BEGIN TIM2_Init 2 */
    295          
    296            /* USER CODE END TIM2_Init 2 */
    297          
    298          }
    299          
    300          /**
    301            * @brief GPIO Initialization Function
    302            * @param None
    303            * @retval None
    304            */
    305          static void MX_GPIO_Init(void)
    306          {
    307            GPIO_InitTypeDef GPIO_InitStruct = {0};
    308          
    309            /* GPIO Ports Clock Enable */
    310            __HAL_RCC_GPIOH_CLK_ENABLE();
    311            __HAL_RCC_GPIOC_CLK_ENABLE();
    312            __HAL_RCC_GPIOA_CLK_ENABLE();
    313            __HAL_RCC_GPIOD_CLK_ENABLE();
    314          
    315            /*Configure GPIO pin Output Level */
    316            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
    317          
    318            /*Configure GPIO pin Output Level */
    319            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
    320                                    |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
    321          
    322            /*Configure GPIO pins : PA0 PA1 */
    323            GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    324            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    325            GPIO_InitStruct.Pull = GPIO_NOPULL;
    326            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    327            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    328          
    329            /*Configure GPIO pin : PA2 */
    330            GPIO_InitStruct.Pin = GPIO_PIN_2;
    331            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    332            GPIO_InitStruct.Pull = GPIO_NOPULL;
    333            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    334          
    335            /*Configure GPIO pins : PD8 PD9 PD10 PD11 
    336                                     PD12 PD13 PD14 PD15 */
    337            GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
    338                                    |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    339            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    340            GPIO_InitStruct.Pull = GPIO_NOPULL;
    341            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    342            HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    343          
    344          }
    345          
    346          /* USER CODE BEGIN 4 */
    347          
    348          /* USER CODE END 4 */
    349          
    350          /**
    351            * @brief  This function is executed in case of error occurrence.
    352            * @retval None
    353            */

   \                                 In section .text, align 2, keep-with-next
    354          void Error_Handler(void)
    355          {
    356            /* USER CODE BEGIN Error_Handler_Debug */
    357            /* User can add his own implementation to report the HAL error return state */
    358          
    359            /* USER CODE END Error_Handler_Debug */
    360          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x9101             STR      R1,[SP, #+4]
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x9202             STR      R2,[SP, #+8]
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x9103             STR      R1,[SP, #+12]
   \        0xA   0x2203             MOVS     R2,#+3
   \        0xC   0x9204             STR      R2,[SP, #+16]
   \        0xE   0xA901             ADD      R1,SP,#+4
   \       0x10   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x4002'0C14        DC32     0x40020c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     temp_array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x....'....        DC32     hadc2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x4001'2100        DC32     0x40012100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x0F00'0001        DC32     0xf000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x4C 0x41          DC8 "LAB*"

   \              0x42 0x2A    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00
    361          
    362          #ifdef  USE_FULL_ASSERT
    363          /**
    364            * @brief  Reports the name of the source file and the source line number
    365            *         where the assert_param error has occurred.
    366            * @param  file: pointer to the source file name
    367            * @param  line: assert_param error line source number
    368            * @retval None
    369            */
    370          void assert_failed(uint8_t *file, uint32_t line)
    371          { 
    372            /* USER CODE BEGIN 6 */
    373            /* User can add his own implementation to report the file name and line number,
    374               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    375            /* USER CODE END 6 */
    376          }
    377          #endif /* USE_FULL_ASSERT */
    378          
    379          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
       8   clear
         8   -> HAL_Delay
         0   -> HAL_GPIO_WritePin
         8   -> HAL_GPIO_WritePin
       8   command
         8   -> HAL_Delay
         0   -> HAL_GPIO_WritePin
         8   -> HAL_GPIO_WritePin
       8   init
         8   -> HAL_Delay
         8   -> HAL_GPIO_WritePin
         0   -> command
         8   -> command
      40   main
        40   -> HAL_ADC_ConfigChannel
        40   -> HAL_ADC_Init
        40   -> HAL_ADC_Start_IT
        40   -> HAL_Delay
        40   -> HAL_GPIO_Init
        40   -> HAL_GPIO_WritePin
        40   -> HAL_Init
        40   -> HAL_TIMEx_MasterConfigSynchronization
        40   -> HAL_TIM_Base_Init
        40   -> HAL_TIM_Base_Start
        40   -> HAL_TIM_ConfigClockSource
        40   -> SystemClock_Config
        40   -> init
        40   -> memset
        40   -> write_string
       8   write
         8   -> HAL_Delay
         0   -> HAL_GPIO_WritePin
         8   -> HAL_GPIO_WritePin
      16   write_string
        16   -> clear
        16   -> write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      42  ?Subroutine0
      18  ?Subroutine1
      10  ?Subroutine2
       8  ?Subroutine3
       8  ?_0
       2  Error_Handler
     144  SystemClock_Config
       8  clear
      12  command
     136  hadc2
          htim2
      80  init
     388  main
       8  write
      40  write_string

 
 136 bytes in section .bss
 808 bytes in section .text
 
 808 bytes of CODE memory
 136 bytes of DATA memory

Errors: none
Warnings: none
