###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         07/Mar/2020  11:46:56
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\Src\stm32f4xx_it.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EWA4A.tmp
#        ("C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\Src\stm32f4xx_it.c" -D USE_HAL_DRIVER -D
#        STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM\TASK3\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB8\TASK3\EWARM\TASK3\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM\TASK3\List\stm32f4xx_it.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM\TASK3\Obj\stm32f4xx_it.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB8\TASK3\Src\stm32f4xx_it.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file    stm32f4xx_it.c
      5            * @brief   Interrupt Service Routines.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          #include "stm32f4xx_it.h"
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          /* USER CODE END Includes */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* USER CODE BEGIN TD */
     30          
     31          /* USER CODE END TD */
     32          
     33          /* Private define ------------------------------------------------------------*/
     34          /* USER CODE BEGIN PD */
     35           
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/
     44          /* USER CODE BEGIN PV */

   \                                 In section .bss, align 4
     45          __IO uint32_t raw_temp= 0;
   \                     raw_temp:
   \        0x0                      DS8 4

   \                                 In section .data, align 4
     46          __IO uint16_t input = 0;
     47          __IO float temp = 0;
     48          char temp_array[5] = { 0x30, 0x30, 0xDF, 0x43, '\0' };
   \                     temp_array:
   \        0x0   0x30 0x30          DC8 48, 48, 223, 67, 0, 0, 0, 0

   \              0xDF 0x43    

   \              0x00 0x00    

   \              0x00 0x00
     49          uint16_t int_temp;
     50          uint8_t temp_data1 = 0;
   \                     temp_data1:
   \        0x8   0x00               DC8 0
   \        0x9   0x00               DC8 0
   \                     input:
   \        0xA   0x0000             DC16 0
   \                     int_temp:
   \        0xC   0x00 0x00          DC8 0, 0
   \        0xE   0x00 0x00          DC8 0, 0
   \                     temp:
   \       0x10   0x0000'0000        DC32 0x0
     51          
     52          /* USER CODE END PV */
     53          
     54          /* Private function prototypes -----------------------------------------------*/
     55          /* USER CODE BEGIN PFP */
     56          
     57          /* USER CODE END PFP */
     58          
     59          /* Private user code ---------------------------------------------------------*/
     60          /* USER CODE BEGIN 0 */
     61          
     62          /* USER CODE END 0 */
     63          
     64          /* External variables --------------------------------------------------------*/
     65          extern TIM_HandleTypeDef htim2;
     66          /* USER CODE BEGIN EV */
     67          extern I2C_HandleTypeDef hi2c1;
     68          /* USER CODE END EV */
     69          
     70          /******************************************************************************/
     71          /*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
     72          /******************************************************************************/
     73          /**
     74            * @brief This function handles Non maskable interrupt.
     75            */

   \                                 In section .text, align 2, keep-with-next
     76          void NMI_Handler(void)
     77          {
     78            /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
     79          
     80            /* USER CODE END NonMaskableInt_IRQn 0 */
     81            /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
     82          
     83            /* USER CODE END NonMaskableInt_IRQn 1 */
     84          }
   \                     NMI_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     85          
     86          /**
     87            * @brief This function handles Hard fault interrupt.
     88            */

   \                                 In section .text, align 2, keep-with-next
     89          void HardFault_Handler(void)
     90          {
     91            /* USER CODE BEGIN HardFault_IRQn 0 */
     92          
     93            /* USER CODE END HardFault_IRQn 0 */
     94            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??HardFault_Handler_0
     95            {
     96              /* USER CODE BEGIN W1_HardFault_IRQn 0 */
     97              /* USER CODE END W1_HardFault_IRQn 0 */
     98            }
     99          }
    100          
    101          /**
    102            * @brief This function handles Memory management fault.
    103            */

   \                                 In section .text, align 2, keep-with-next
    104          void MemManage_Handler(void)
    105          {
    106            /* USER CODE BEGIN MemoryManagement_IRQn 0 */
    107          
    108            /* USER CODE END MemoryManagement_IRQn 0 */
    109            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??MemManage_Handler_0
    110            {
    111              /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    112              /* USER CODE END W1_MemoryManagement_IRQn 0 */
    113            }
    114          }
    115          
    116          /**
    117            * @brief This function handles Pre-fetch fault, memory access fault.
    118            */

   \                                 In section .text, align 2, keep-with-next
    119          void BusFault_Handler(void)
    120          {
    121            /* USER CODE BEGIN BusFault_IRQn 0 */
    122          
    123            /* USER CODE END BusFault_IRQn 0 */
    124            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??BusFault_Handler_0
    125            {
    126              /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    127              /* USER CODE END W1_BusFault_IRQn 0 */
    128            }
    129          }
    130          
    131          /**
    132            * @brief This function handles Undefined instruction or illegal state.
    133            */

   \                                 In section .text, align 2, keep-with-next
    134          void UsageFault_Handler(void)
    135          {
    136            /* USER CODE BEGIN UsageFault_IRQn 0 */
    137          
    138            /* USER CODE END UsageFault_IRQn 0 */
    139            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \        0x0   0xE7FE             B.N      ??UsageFault_Handler_0
    140            {
    141              /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    142              /* USER CODE END W1_UsageFault_IRQn 0 */
    143            }
    144          }
    145          
    146          /**
    147            * @brief This function handles System service call via SWI instruction.
    148            */

   \                                 In section .text, align 2, keep-with-next
    149          void SVC_Handler(void)
    150          {
    151            /* USER CODE BEGIN SVCall_IRQn 0 */
    152          
    153            /* USER CODE END SVCall_IRQn 0 */
    154            /* USER CODE BEGIN SVCall_IRQn 1 */
    155          
    156            /* USER CODE END SVCall_IRQn 1 */
    157          }
   \                     SVC_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    158          
    159          /**
    160            * @brief This function handles Debug monitor.
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          void DebugMon_Handler(void)
    163          {
    164            /* USER CODE BEGIN DebugMonitor_IRQn 0 */
    165          
    166            /* USER CODE END DebugMonitor_IRQn 0 */
    167            /* USER CODE BEGIN DebugMonitor_IRQn 1 */
    168          
    169            /* USER CODE END DebugMonitor_IRQn 1 */
    170          }
   \                     DebugMon_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    171          
    172          /**
    173            * @brief This function handles Pendable request for system service.
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void PendSV_Handler(void)
    176          {
    177            /* USER CODE BEGIN PendSV_IRQn 0 */
    178          
    179            /* USER CODE END PendSV_IRQn 0 */
    180            /* USER CODE BEGIN PendSV_IRQn 1 */
    181          
    182            /* USER CODE END PendSV_IRQn 1 */
    183          }
   \                     PendSV_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    184          
    185          /**
    186            * @brief This function handles System tick timer.
    187            */

   \                                 In section .text, align 2, keep-with-next
    188          void SysTick_Handler(void)
    189          {
    190            /* USER CODE BEGIN SysTick_IRQn 0 */
    191          
    192            /* USER CODE END SysTick_IRQn 0 */
    193            HAL_IncTick();
   \                     SysTick_Handler: (+1)
   \        0x0   0x....'....        B.W      HAL_IncTick
    194            /* USER CODE BEGIN SysTick_IRQn 1 */
    195          
    196            /* USER CODE END SysTick_IRQn 1 */
    197          }
    198          
    199          /******************************************************************************/
    200          /* STM32F4xx Peripheral Interrupt Handlers                                    */
    201          /* Add here the Interrupt Handlers for the used peripherals.                  */
    202          /* For the available peripheral interrupt handler names,                      */
    203          /* please refer to the startup file (startup_stm32f4xx.s).                    */
    204          /******************************************************************************/
    205          
    206          /**
    207            * @brief This function handles TIM2 global interrupt.
    208            */

   \                                 In section .text, align 2, keep-with-next
    209          void TIM2_IRQHandler(void)
    210          {
   \                     TIM2_IRQHandler: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    211            /* USER CODE BEGIN TIM2_IRQn 0 */
    212          
    213            /* USER CODE END TIM2_IRQn 0 */
    214            HAL_TIM_IRQHandler(&htim2);
   \        0x2   0x....             LDR.N    R0,??DataTable1
   \        0x4   0x....             LDR.N    R4,??DataTable1_1
   \        0x6   0x....'....        BL       HAL_TIM_IRQHandler
    215            /* USER CODE BEGIN TIM2_IRQn 1 */
    216            input = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2);
   \        0xA   0x2104             MOVS     R1,#+4
   \        0xC   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40020000
   \        0xE   0x....'....        BL       HAL_GPIO_ReadPin
   \       0x12   0x8160             STRH     R0,[R4, #+10]
    217            HAL_I2C_Master_Receive(&hi2c1,0x48<<1,(uint8_t*)temp_data1,1,10);
   \       0x14   0x200A             MOVS     R0,#+10
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0x2301             MOVS     R3,#+1
   \       0x1A   0x7A22             LDRB     R2,[R4, #+8]
   \       0x1C   0x....             LDR.N    R0,??DataTable1_3
   \       0x1E   0x2190             MOVS     R1,#+144
   \       0x20   0x....'....        BL       HAL_I2C_Master_Receive
    218              if(input == 1) {
   \       0x24   0x7A20             LDRB     R0,[R4, #+8]
   \       0x26   0x8961             LDRH     R1,[R4, #+10]
   \       0x28   0x2901             CMP      R1,#+1
   \       0x2A   0xD10E             BNE.N    ??TIM2_IRQHandler_0
    219                // temp is fahrenheit
    220                temp = (temp_data1 * 1.8) + 32;
   \       0x2C   0x....'....        BL       __aeabi_ui2d
   \       0x30   0x....             LDR.N    R2,??DataTable1_4  ;; 0xcccccccd
   \       0x32   0x....             LDR.N    R3,??DataTable1_5  ;; 0x3ffccccc
   \       0x34   0x....'....        BL       __aeabi_dmul
   \       0x38   0x2200             MOVS     R2,#+0
   \       0x3A   0x....             LDR.N    R3,??DataTable1_6  ;; 0x40400000
   \       0x3C   0x....'....        BL       __aeabi_dadd
   \       0x40   0x....'....        BL       __aeabi_d2f
   \       0x44   0x6120             STR      R0,[R4, #+16]
    221                temp_array[3] = 0x46;   // Character "F" 
   \       0x46   0x2046             MOVS     R0,#+70
   \       0x48   0xE006             B.N      ??TIM2_IRQHandler_1
    222              }
    223              else {
    224                // temp is celcius
    225                temp = temp_data1;
   \                     ??TIM2_IRQHandler_0: (+1)
   \       0x4A   0xEE00 0x0A10      VMOV     S0,R0
   \       0x4E   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \       0x52   0xED84 0x0A04      VSTR     S0,[R4, #+16]
    226                temp_array[3] = 0x43;  // Character "C"
   \       0x56   0x2043             MOVS     R0,#+67
   \                     ??TIM2_IRQHandler_1: (+1)
   \       0x58   0x70E0             STRB     R0,[R4, #+3]
    227              } 
    228            int_temp = (uint16_t)temp;
    229            temp_array[0] = ((int_temp /10) % 10) | 0x30;
   \       0x5A   0x220A             MOVS     R2,#+10
   \       0x5C   0xED94 0x0A04      VLDR     S0,[R4, #+16]
   \       0x60   0xEEBD 0x0AC0      VCVT.S32.F32 S0,S0
   \       0x64   0xEE10 0x0A10      VMOV     R0,S0
   \       0x68   0xB281             UXTH     R1,R0
   \       0x6A   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \       0x6E   0x250A             MOVS     R5,#+10
   \       0x70   0x230A             MOVS     R3,#+10
   \       0x72   0xFB92 0xF5F5      SDIV     R5,R2,R5
   \       0x76   0xFB03 0x2515      MLS      R5,R3,R5,R2
   \       0x7A   0xF045 0x0530      ORR      R5,R5,#0x30
    230            temp_array[1] = (int_temp % 10) | 0x30;
   \       0x7E   0xFB03 0x1112      MLS      R1,R3,R2,R1
   \       0x82   0x7025             STRB     R5,[R4, #+0]
   \       0x84   0xF041 0x0130      ORR      R1,R1,#0x30
    231            /* USER CODE END TIM2_IRQn 1 */
    232          }
   \       0x88   0x81A0             STRH     R0,[R4, #+12]
   \       0x8A   0x7061             STRB     R1,[R4, #+1]
   \       0x8C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     temp_array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x....'....        DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0xCCCC'CCCD        DC32     0xcccccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x3FFC'CCCC        DC32     0x3ffccccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x4040'0000        DC32     0x40400000
    233          
    234          /* USER CODE BEGIN 1 */
    235          
    236          /* USER CODE END 1 */
    237          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       0   SysTick_Handler
         0   -> HAL_IncTick
      16   TIM2_IRQHandler
        16   -> HAL_GPIO_ReadPin
        16   -> HAL_I2C_Master_Receive
        16   -> HAL_TIM_IRQHandler
        16   -> __aeabi_d2f
        16   -> __aeabi_dadd
        16   -> __aeabi_dmul
        16   -> __aeabi_ui2d
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       2  BusFault_Handler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
       4  SysTick_Handler
     142  TIM2_IRQHandler
       2  UsageFault_Handler
       4  raw_temp
      20  temp_array
          temp_data1
          input
          int_temp
          temp

 
   4 bytes in section .bss
  20 bytes in section .data
 190 bytes in section .text
 
 190 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
