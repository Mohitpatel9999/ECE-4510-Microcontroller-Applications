###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         07/Mar/2020  11:46:54
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\LAB8\TASK3\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW2B3.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB8\TASK3\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM\TASK3\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB8\TASK3\EWARM\TASK3\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM\TASK3\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB8\TASK3\EWARM\TASK3\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB8\TASK3\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          ADC_HandleTypeDef hadc2;
   \                     hadc2:
   \        0x0                      DS8 72
     45          
     46          I2C_HandleTypeDef hi2c1;
   \                     hi2c1:
   \       0x48                      DS8 84
     47          
     48          TIM_HandleTypeDef htim2;
   \                     htim2:
   \       0x9C                      DS8 64
     49          
     50          /* USER CODE BEGIN PV */
     51          extern char temp_array[5];
     52          /* USER CODE END PV */
     53          
     54          /* Private function prototypes -----------------------------------------------*/
     55          void SystemClock_Config(void);
     56          static void MX_GPIO_Init(void);
     57          static void MX_ADC2_Init(void);
     58          static void MX_TIM2_Init(void);
     59          static void MX_I2C1_Init(void);
     60          /* USER CODE BEGIN PFP */
     61          
     62          /* USER CODE END PFP */
     63          
     64          /* Private user code ---------------------------------------------------------*/
     65          /* USER CODE BEGIN 0 */

   \                                 In section .text, align 2, keep-with-next
     66          void command(char i)
     67          {
   \                     command: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     68           GPIOD-> ODR = i << 8 ; //put data on output Port
   \        0x2   0x....'....        BL       ?Subroutine5
     69           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_RESET); // D/I=LOW : send instruction
   \                     ??CrossCallReturnLabel_8: (+1)
   \        0x6   0x6018             STR      R0,[R3, #+0]
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x....             B.N      ??Subroutine0_0
     70           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET); // E-> HIGH
     71           HAL_Delay(1);
     72           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
     73          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable5  ;; 0x40020c14
   \        0x2   0x....             LDR.N    R4,??DataTable5_1  ;; 0x40020000
   \        0x4   0x0200             LSLS     R0,R0,#+8
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x6018             STR      R0,[R3, #+0]
   \        0x2   0x2201             MOVS     R2,#+1
   \                     ??Subroutine0_0: (+1)
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x4620             MOV      R0,R4
   \        0x8   0x....'....        BL       HAL_GPIO_WritePin
   \        0xC   0x2201             MOVS     R2,#+1
   \        0xE   0x2102             MOVS     R1,#+2
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       HAL_GPIO_WritePin
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x....'....        BL       HAL_Delay
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0xE8BD 0x4010      POP      {R4,LR}
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x....'....        B.W      HAL_GPIO_WritePin
     74          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          void write(char i)
     76          {
   \                     write: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     77           GPIOD-> ODR = i << 8 ; //put data on output Port
   \        0x2   0x....'....        BL       ?Subroutine5
     78           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET); // D/I=high : send data
   \                     ??CrossCallReturnLabel_9: (+1)
   \        0x6   0x....             B.N      ?Subroutine0
     79           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET); // E-> HIGH
     80           HAL_Delay(1);
     81           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
     82          }
     83          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          void init()
     85          {
   \                     init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     86           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2102             MOVS     R1,#+2
   \        0x6   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40020000
   \        0x8   0x....'....        BL       HAL_GPIO_WritePin
     87           HAL_Delay(100); //Wait >40 msec after power is applied
   \        0xC   0x2064             MOVS     R0,#+100
   \        0xE   0x....'....        BL       HAL_Delay
     88           command(0x30); //command 0x30 = Wake up
   \       0x12   0x2030             MOVS     R0,#+48
   \       0x14   0x....'....        BL       command
     89           HAL_Delay(30); //must wait 5ms, busy flag not available
   \       0x18   0x201E             MOVS     R0,#+30
   \       0x1A   0x....'....        BL       HAL_Delay
     90           command(0x30); //command 0x30 = Wake up #2
   \       0x1E   0x2030             MOVS     R0,#+48
   \       0x20   0x....'....        BL       command
     91           HAL_Delay(10); //must wait 160us, busy flag not available
   \       0x24   0x200A             MOVS     R0,#+10
   \       0x26   0x....'....        BL       HAL_Delay
     92           command(0x30); //command 0x30 = Wake up #3
   \       0x2A   0x2030             MOVS     R0,#+48
   \       0x2C   0x....'....        BL       command
     93           HAL_Delay(10); //must wait 160us, busy flag not available
   \       0x30   0x200A             MOVS     R0,#+10
   \       0x32   0x....'....        BL       HAL_Delay
     94           command(0x38); //Function set: 8-bit/2-line
   \       0x36   0x2038             MOVS     R0,#+56
   \       0x38   0x....'....        BL       command
     95           command(0x10); //Set cursor
   \       0x3C   0x2010             MOVS     R0,#+16
   \       0x3E   0x....'....        BL       command
     96           command(0x0c); //Display ON; Cursor ON
   \       0x42   0x200C             MOVS     R0,#+12
   \       0x44   0x....'....        BL       command
     97           command(0x06); //Entry mode set
   \       0x48   0xE8BD 0x4002      POP      {R1,LR}
   \       0x4C   0x2006             MOVS     R0,#+6
   \       0x4E   0x....             B.N      command
     98          }

   \                                 In section .text, align 2, keep-with-next
     99          void clear(void) {
   \                     clear: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    100           GPIOD->ODR = 0x0000;
   \        0x2   0x....             LDR.N    R3,??DataTable5  ;; 0x40020c14
    101           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, GPIO_PIN_SET); // D/I=high : send data
   \        0x4   0x....             LDR.N    R4,??DataTable5_1  ;; 0x40020000
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8                      REQUIRE ?Subroutine0
   \        0x8                      ;; // Fall through to label ?Subroutine0
    102           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET); // E-> HIGH
    103           HAL_Delay(1);
    104           HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET); // E-> LOW
    105          }
    106          /**********************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          void write_string(char *display_string) {
   \                     write_string: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
    108            clear();
   \        0x4   0x....'....        BL       clear
    109            uint8_t flag = 0;
   \        0x8   0x2500             MOVS     R5,#+0
    110            for(uint8_t i = 0; i < 16; i++){
   \        0xA   0x2600             MOVS     R6,#+0
    111              if(flag == 0){
    112                write(display_string[i]);
   \                     ??write_string_0: (+1)
   \        0xC   0x5DA0             LDRB     R0,[R4, R6]
   \        0xE   0xE002             B.N      ??write_string_1
    113              }
   \                     ??write_string_2: (+1)
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0xD0FB             BEQ.N    ??write_string_0
    114              else {
    115                write(0x00);
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??write_string_1: (+1)
   \       0x16   0x....'....        BL       write
    116              }
    117              if(display_string[i] == '\0'){
   \       0x1A   0x5DA0             LDRB     R0,[R4, R6]
   \       0x1C   0xB900             CBNZ.N   R0,??write_string_3
    118                flag = 1;
   \       0x1E   0x2501             MOVS     R5,#+1
    119              }
    120            }
   \                     ??write_string_3: (+1)
   \       0x20   0x1C76             ADDS     R6,R6,#+1
   \       0x22   0x2E10             CMP      R6,#+16
   \       0x24   0xDBF4             BLT.N    ??write_string_2
    121          }
   \       0x26   0xBD70             POP      {R4-R6,PC}       ;; return
    122          /* USER CODE END 0 */
    123          
    124          /**
    125            * @brief  The application entry point.
    126            * @retval int
    127            */

   \                                 In section .text, align 2, keep-with-next
    128          int main(void)
    129          {
   \                     main: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
    130            /* USER CODE BEGIN 1 */
    131            uint8_t buf[12];
    132            buf[0] = 0x01;
   \        0x4   0x2101             MOVS     R1,#+1
    133            buf[1] = 0x60;
   \        0x6   0x2260             MOVS     R2,#+96
   \        0x8   0xF88D 0x1018      STRB     R1,[SP, #+24]
   \        0xC   0xF88D 0x2019      STRB     R2,[SP, #+25]
    134            /* USER CODE END 1 */
    135            /* MCU Configuration--------------------------------------------------------*/
    136            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    137            HAL_Init();
   \       0x10   0x....'....        BL       HAL_Init
    138            /* USER CODE BEGIN Init */
    139            init();
   \       0x14   0x....'....        BL       init
    140            /* USER CODE END Init */
    141            /* Configure the system clock */
    142            SystemClock_Config();
   \       0x18   0x....'....        BL       SystemClock_Config
    143            /* USER CODE BEGIN SysInit */
    144            /* USER CODE END SysInit */
    145            /* Initialize all configured peripherals */
    146            MX_GPIO_Init();
   \       0x1C   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9000             STR      R0,[SP, #+0]
   \       0x24   0x....             LDR.N    R4,??DataTable5_1  ;; 0x40020000
   \       0x26   0x....             LDR.N    R0,??DataTable5_2  ;; 0x40023830
   \       0x28   0x....             LDR.N    R5,??DataTable5_3  ;; 0x40020c00
   \       0x2A   0x6801             LDR      R1,[R0, #+0]
   \       0x2C   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x30   0x6001             STR      R1,[R0, #+0]
   \       0x32   0x6802             LDR      R2,[R0, #+0]
   \       0x34   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x38   0x9200             STR      R2,[SP, #+0]
   \       0x3A   0x2200             MOVS     R2,#+0
   \       0x3C   0x9900             LDR      R1,[SP, #+0]
   \       0x3E   0x9200             STR      R2,[SP, #+0]
   \       0x40   0x6803             LDR      R3,[R0, #+0]
   \       0x42   0xF043 0x0304      ORR      R3,R3,#0x4
   \       0x46   0x6003             STR      R3,[R0, #+0]
   \       0x48   0x6801             LDR      R1,[R0, #+0]
   \       0x4A   0xF001 0x0104      AND      R1,R1,#0x4
   \       0x4E   0x9100             STR      R1,[SP, #+0]
   \       0x50   0x9900             LDR      R1,[SP, #+0]
   \       0x52   0x9200             STR      R2,[SP, #+0]
   \       0x54   0x6803             LDR      R3,[R0, #+0]
   \       0x56   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x5A   0x6003             STR      R3,[R0, #+0]
   \       0x5C   0x6801             LDR      R1,[R0, #+0]
   \       0x5E   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x62   0x9100             STR      R1,[SP, #+0]
   \       0x64   0x9900             LDR      R1,[SP, #+0]
   \       0x66   0x9200             STR      R2,[SP, #+0]
   \       0x68   0x6803             LDR      R3,[R0, #+0]
   \       0x6A   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0x6E   0x6003             STR      R3,[R0, #+0]
   \       0x70   0x6801             LDR      R1,[R0, #+0]
   \       0x72   0xF001 0x0108      AND      R1,R1,#0x8
   \       0x76   0x9100             STR      R1,[SP, #+0]
   \       0x78   0x9900             LDR      R1,[SP, #+0]
   \       0x7A   0x9200             STR      R2,[SP, #+0]
   \       0x7C   0x2103             MOVS     R1,#+3
   \       0x7E   0x6803             LDR      R3,[R0, #+0]
   \       0x80   0xF043 0x0302      ORR      R3,R3,#0x2
   \       0x84   0x6003             STR      R3,[R0, #+0]
   \       0x86   0x6800             LDR      R0,[R0, #+0]
   \       0x88   0xF000 0x0002      AND      R0,R0,#0x2
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0x9800             LDR      R0,[SP, #+0]
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x....'....        BL       HAL_GPIO_WritePin
   \       0x96   0x2200             MOVS     R2,#+0
   \       0x98   0xF44F 0x417F      MOV      R1,#+65280
   \       0x9C   0x4628             MOV      R0,R5
   \       0x9E   0x....'....        BL       HAL_GPIO_WritePin
   \       0xA2   0x2103             MOVS     R1,#+3
   \       0xA4   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xA8   0x4620             MOV      R0,R4
   \       0xAA   0x....'....        BL       HAL_GPIO_Init
   \       0xAE   0x2004             MOVS     R0,#+4
   \       0xB0   0x2100             MOVS     R1,#+0
   \       0xB2   0x9001             STR      R0,[SP, #+4]
   \       0xB4   0x9102             STR      R1,[SP, #+8]
   \       0xB6   0x9103             STR      R1,[SP, #+12]
   \       0xB8   0x4620             MOV      R0,R4
   \       0xBA   0xA901             ADD      R1,SP,#+4
   \       0xBC   0x....'....        BL       HAL_GPIO_Init
   \       0xC0   0xF44F 0x417F      MOV      R1,#+65280
   \       0xC4   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0xC8   0x4628             MOV      R0,R5
   \       0xCA   0x....'....        BL       HAL_GPIO_Init
    147            MX_ADC2_Init();
   \       0xCE   0x2210             MOVS     R2,#+16
   \       0xD0   0x2100             MOVS     R1,#+0
   \       0xD2   0x4668             MOV      R0,SP
   \       0xD4   0x....'....        BL       memset
   \       0xD8   0x....             LDR.N    R4,??DataTable5_4
   \       0xDA   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40012100
   \       0xDC   0x6020             STR      R0,[R4, #+0]
   \       0xDE   0xF44F 0x3180      MOV      R1,#+65536
   \       0xE2   0x....             LDR.N    R0,??DataTable5_6  ;; 0xf000001
   \       0xE4   0x62A0             STR      R0,[R4, #+40]
   \       0xE6   0x6061             STR      R1,[R4, #+4]
   \       0xE8   0x2001             MOVS     R0,#+1
   \       0xEA   0xF104 0x0530      ADD      R5,R4,#+48
   \       0xEE   0x2200             MOVS     R2,#+0
   \       0xF0   0x2101             MOVS     R1,#+1
   \       0xF2   0x61E0             STR      R0,[R4, #+28]
   \       0xF4   0x6160             STR      R0,[R4, #+20]
   \       0xF6   0x60A2             STR      R2,[R4, #+8]
   \       0xF8   0x6122             STR      R2,[R4, #+16]
   \       0xFA   0x7621             STRB     R1,[R4, #+24]
   \       0xFC   0xF884 0x2020      STRB     R2,[R4, #+32]
   \      0x100   0x62E2             STR      R2,[R4, #+44]
   \      0x102   0x60E2             STR      R2,[R4, #+12]
   \      0x104   0x702A             STRB     R2,[R5, #+0]
   \      0x106   0x4620             MOV      R0,R4
   \      0x108   0x....'....        BL       HAL_ADC_Init
   \      0x10C   0x2101             MOVS     R1,#+1
   \      0x10E   0x9101             STR      R1,[SP, #+4]
   \      0x110   0x200A             MOVS     R0,#+10
   \      0x112   0x2200             MOVS     R2,#+0
   \      0x114   0x9000             STR      R0,[SP, #+0]
   \      0x116   0x9202             STR      R2,[SP, #+8]
   \      0x118   0x4669             MOV      R1,SP
   \      0x11A   0x4620             MOV      R0,R4
   \      0x11C   0x....'....        BL       HAL_ADC_ConfigChannel
    148            MX_TIM2_Init();
   \      0x120   0x2210             MOVS     R2,#+16
   \      0x122   0x2100             MOVS     R1,#+0
   \      0x124   0xA802             ADD      R0,SP,#+8
   \      0x126   0x....'....        BL       memset
   \      0x12A   0x2208             MOVS     R2,#+8
   \      0x12C   0x2100             MOVS     R1,#+0
   \      0x12E   0x4668             MOV      R0,SP
   \      0x130   0x....'....        BL       memset
   \      0x134   0xF04F 0x4080      MOV      R0,#+1073741824
   \      0x138   0x66E8             STR      R0,[R5, #+108]
   \      0x13A   0xF644 0x6120      MOVW     R1,#+20000
   \      0x13E   0x6729             STR      R1,[R5, #+112]
   \      0x140   0x2000             MOVS     R0,#+0
   \      0x142   0x6768             STR      R0,[R5, #+116]
   \      0x144   0x2169             MOVS     R1,#+105
   \      0x146   0x67E8             STR      R0,[R5, #+124]
   \      0x148   0xF8C4 0x00B4      STR      R0,[R4, #+180]
   \      0x14C   0x67A9             STR      R1,[R5, #+120]
   \      0x14E   0xF104 0x069C      ADD      R6,R4,#+156
   \      0x152   0x4630             MOV      R0,R6
   \      0x154   0x....'....        BL       HAL_TIM_Base_Init
   \      0x158   0xF44F 0x5080      MOV      R0,#+4096
   \      0x15C   0x9002             STR      R0,[SP, #+8]
   \      0x15E   0xA902             ADD      R1,SP,#+8
   \      0x160   0x4630             MOV      R0,R6
   \      0x162   0x....'....        BL       HAL_TIM_ConfigClockSource
   \      0x166   0x2100             MOVS     R1,#+0
   \      0x168   0x9100             STR      R1,[SP, #+0]
   \      0x16A   0x9101             STR      R1,[SP, #+4]
   \      0x16C   0x4630             MOV      R0,R6
   \      0x16E   0x4669             MOV      R1,SP
   \      0x170   0x....'....        BL       HAL_TIMEx_MasterConfigSynchronization
    149            MX_I2C1_Init();
   \      0x174   0x....             LDR.N    R0,??DataTable5_7  ;; 0x40005400
   \      0x176   0x....             LDR.N    R1,??DataTable5_8  ;; 0x186a0
   \      0x178   0x61A8             STR      R0,[R5, #+24]
   \      0x17A   0x61E9             STR      R1,[R5, #+28]
   \      0x17C   0x2000             MOVS     R0,#+0
   \      0x17E   0x6228             STR      R0,[R5, #+32]
   \      0x180   0x2100             MOVS     R1,#+0
   \      0x182   0xF44F 0x4080      MOV      R0,#+16384
   \      0x186   0x62A8             STR      R0,[R5, #+40]
   \      0x188   0x6269             STR      R1,[R5, #+36]
   \      0x18A   0x62E9             STR      R1,[R5, #+44]
   \      0x18C   0x6329             STR      R1,[R5, #+48]
   \      0x18E   0x6369             STR      R1,[R5, #+52]
   \      0x190   0x63A9             STR      R1,[R5, #+56]
   \      0x192   0xF104 0x0048      ADD      R0,R4,#+72
   \      0x196   0x....'....        BL       HAL_I2C_Init
   \      0x19A   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_5: (+1)
   \      0x19E   0x....'....        BL       ?Subroutine4
    150            /* USER CODE BEGIN 2 */
    151            HAL_ADC_Start_IT(&hadc2);
   \                     ??CrossCallReturnLabel_7: (+1)
   \      0x1A2   0x4620             MOV      R0,R4
   \      0x1A4   0x....'....        BL       HAL_ADC_Start_IT
    152            HAL_TIM_Base_Start(&htim2);
   \      0x1A8   0x4630             MOV      R0,R6
   \      0x1AA   0x....'....        BL       HAL_TIM_Base_Start
    153             static void MX_I2C1_Init(void);
    154             if (HAL_I2C_Init(&hi2c1) != HAL_OK)
   \      0x1AE   0xF104 0x0048      ADD      R0,R4,#+72
   \      0x1B2   0x....'....        BL       HAL_I2C_Init
   \      0x1B6   0xB178             CBZ.N    R0,??main_0
    155             if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
   \      0x1B8   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x1BC   0x2800             CMP      R0,#+0
   \      0x1BE   0xD00B             BEQ.N    ??main_0
    156             if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
   \      0x1C0   0x....'....        BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_6: (+1)
   \      0x1C4   0xB140             CBZ.N    R0,??main_0
    157             HAL_I2C_Master_Transmit(&hi2c1,0x48<<1,buf, 2, 100); //PARAMATERS: address,data, size, timeout 
   \      0x1C6   0x2064             MOVS     R0,#+100
   \      0x1C8   0x9000             STR      R0,[SP, #+0]
   \      0x1CA   0x2302             MOVS     R3,#+2
   \      0x1CC   0xAA06             ADD      R2,SP,#+24
   \      0x1CE   0x2190             MOVS     R1,#+144
   \      0x1D0   0xF104 0x0048      ADD      R0,R4,#+72
   \      0x1D4   0x....'....        BL       HAL_I2C_Master_Transmit
    158            /* USER CODE END 2 */
    159            /* Infinite loop */
    160            /* USER CODE BEGIN WHILE */
    161            while (1)
    162            {
    163             write_string(temp_array);
   \                     ??main_0: (+1)
   \      0x1D8   0x....             LDR.N    R0,??DataTable5_9
   \      0x1DA   0x....'....        BL       write_string
    164             HAL_Delay(250);
   \      0x1DE   0x20FA             MOVS     R0,#+250
   \      0x1E0   0x....'....        BL       HAL_Delay
   \      0x1E4   0xE7F8             B.N      ??main_0
    165              /* USER CODE END WHILE */
    166              /* USER CODE BEGIN 3 */
    167            }
    168            /* USER CODE END 3 */
    169          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0xF104 0x0048      ADD      R0,R4,#+72
   \        0x6   0x....'....        B.W      HAL_I2CEx_ConfigDigitalFilter

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0xF104 0x0048      ADD      R0,R4,#+72
   \        0x6   0x....'....        B.W      HAL_I2CEx_ConfigAnalogFilter
    170          
    171          /**
    172            * @brief System Clock Configuration
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void SystemClock_Config(void)
    176          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x....'....        BL       ?Subroutine2
    177            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    178            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    179          
    180            /** Configure the main internal regulator output voltage 
    181            */
    182            __HAL_RCC_PWR_CLK_ENABLE();
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
    183            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    184            /** Initializes the CPU, AHB and APB busses clocks 
    185            */
    186            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    187            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x16   0xF44F 0x3380      MOV      R3,#+65536
   \       0x1A   0x....             LDR.N    R0,??DataTable5_10  ;; 0x40023840
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x22   0x6001             STR      R1,[R0, #+0]
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
   \       0x30   0x....             LDR.N    R0,??DataTable5_11  ;; 0x40007000
   \       0x32   0x9100             STR      R1,[SP, #+0]
   \       0x34   0x6802             LDR      R2,[R0, #+0]
   \       0x36   0xF442 0x4240      ORR      R2,R2,#0xC000
   \       0x3A   0x6002             STR      R2,[R0, #+0]
   \       0x3C   0x2201             MOVS     R2,#+1
   \       0x3E   0x6800             LDR      R0,[R0, #+0]
   \       0x40   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x44   0x9000             STR      R0,[SP, #+0]
    188            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    189            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    190            RCC_OscInitStruct.PLL.PLLM = 4;
    191            RCC_OscInitStruct.PLL.PLLN = 168;
    192            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    193            RCC_OscInitStruct.PLL.PLLQ = 4;
    194            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x46   0xA806             ADD      R0,SP,#+24
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0x9206             STR      R2,[SP, #+24]
   \       0x4C   0x2102             MOVS     R1,#+2
   \       0x4E   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x52   0x910C             STR      R1,[SP, #+48]
   \       0x54   0x920D             STR      R2,[SP, #+52]
   \       0x56   0x2104             MOVS     R1,#+4
   \       0x58   0x22A8             MOVS     R2,#+168
   \       0x5A   0x910E             STR      R1,[SP, #+56]
   \       0x5C   0x920F             STR      R2,[SP, #+60]
   \       0x5E   0x2102             MOVS     R1,#+2
   \       0x60   0x2204             MOVS     R2,#+4
   \       0x62   0x9307             STR      R3,[SP, #+28]
   \       0x64   0x9110             STR      R1,[SP, #+64]
   \       0x66   0x9211             STR      R2,[SP, #+68]
   \       0x68   0x....'....        BL       HAL_RCC_OscConfig
    195            {
    196              Error_Handler();
    197            }
    198            /** Initializes the CPU, AHB and APB busses clocks 
    199            */
    200            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    201                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    202            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x6C   0x2102             MOVS     R1,#+2
   \       0x6E   0x9102             STR      R1,[SP, #+8]
    203            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x70   0x2200             MOVS     R2,#+0
   \       0x72   0x9203             STR      R2,[SP, #+12]
   \       0x74   0x200F             MOVS     R0,#+15
    204            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x76   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x7A   0x9001             STR      R0,[SP, #+4]
   \       0x7C   0x9104             STR      R1,[SP, #+16]
    205            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x7E   0xF44F 0x5280      MOV      R2,#+4096
   \       0x82   0x9205             STR      R2,[SP, #+20]
    206          
    207            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
   \       0x84   0x2105             MOVS     R1,#+5
   \       0x86   0xA801             ADD      R0,SP,#+4
   \       0x88   0x....'....        BL       HAL_RCC_ClockConfig
    208            {
    209              Error_Handler();
    210            }
    211          }
   \       0x8C   0xB013             ADD      SP,SP,#+76
   \       0x8E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2214             MOVS     R2,#+20
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA801             ADD      R0,SP,#+4
   \        0x6   0x....'....        B.W      memset
    212          
    213          /**
    214            * @brief ADC2 Initialization Function
    215            * @param None
    216            * @retval None
    217            */
    218          static void MX_ADC2_Init(void)
    219          {
    220          
    221            /* USER CODE BEGIN ADC2_Init 0 */
    222          
    223            /* USER CODE END ADC2_Init 0 */
    224          
    225            ADC_ChannelConfTypeDef sConfig = {0};
    226          
    227            /* USER CODE BEGIN ADC2_Init 1 */
    228          
    229            /* USER CODE END ADC2_Init 1 */
    230            /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    231            */
    232            hadc2.Instance = ADC2;
    233            hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    234            hadc2.Init.Resolution = ADC_RESOLUTION_12B;
    235            hadc2.Init.ScanConvMode = DISABLE;
    236            hadc2.Init.ContinuousConvMode = ENABLE;
    237            hadc2.Init.DiscontinuousConvMode = DISABLE;
    238            hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    239            hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    240            hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    241            hadc2.Init.NbrOfConversion = 1;
    242            hadc2.Init.DMAContinuousRequests = DISABLE;
    243            hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    244            if (HAL_ADC_Init(&hadc2) != HAL_OK)
    245            {
    246              Error_Handler();
    247            }
    248            /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    249            */
    250            sConfig.Channel = ADC_CHANNEL_10;
    251            sConfig.Rank = 1;
    252            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    253            if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
    254            {
    255              Error_Handler();
    256            }
    257            /* USER CODE BEGIN ADC2_Init 2 */
    258          
    259            /* USER CODE END ADC2_Init 2 */
    260          
    261          }
    262          
    263          /**
    264            * @brief I2C1 Initialization Function
    265            * @param None
    266            * @retval None
    267            */
    268          static void MX_I2C1_Init(void)
    269          {
    270          
    271            /* USER CODE BEGIN I2C1_Init 0 */
    272          
    273            /* USER CODE END I2C1_Init 0 */
    274          
    275            /* USER CODE BEGIN I2C1_Init 1 */
    276          
    277            /* USER CODE END I2C1_Init 1 */
    278            hi2c1.Instance = I2C1;
    279            hi2c1.Init.ClockSpeed = 100000;
    280            hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    281            hi2c1.Init.OwnAddress1 = 0;
    282            hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    283            hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    284            hi2c1.Init.OwnAddress2 = 0;
    285            hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    286            hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    287            if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    288            {
    289              Error_Handler();
    290            }
    291            /** Configure Analogue filter 
    292            */
    293            if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
    294            {
    295              Error_Handler();
    296            }
    297            /** Configure Digital filter 
    298            */
    299            if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
    300            {
    301              Error_Handler();
    302            }
    303            /* USER CODE BEGIN I2C1_Init 2 */
    304          
    305            /* USER CODE END I2C1_Init 2 */
    306          
    307          }
    308          
    309          /**
    310            * @brief TIM2 Initialization Function
    311            * @param None
    312            * @retval None
    313            */
    314          static void MX_TIM2_Init(void)
    315          {
    316          
    317            /* USER CODE BEGIN TIM2_Init 0 */
    318          
    319            /* USER CODE END TIM2_Init 0 */
    320          
    321            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    322            TIM_MasterConfigTypeDef sMasterConfig = {0};
    323          
    324            /* USER CODE BEGIN TIM2_Init 1 */
    325          
    326            /* USER CODE END TIM2_Init 1 */
    327            htim2.Instance = TIM2;
    328            htim2.Init.Prescaler = 20000;
    329            htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    330            htim2.Init.Period = 105;
    331            htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    332            htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    333            if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    334            {
    335              Error_Handler();
    336            }
    337            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    338            if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
    339            {
    340              Error_Handler();
    341            }
    342            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    343            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    344            if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    345            {
    346              Error_Handler();
    347            }
    348            /* USER CODE BEGIN TIM2_Init 2 */
    349          
    350            /* USER CODE END TIM2_Init 2 */
    351          
    352          }
    353          
    354          /**
    355            * @brief GPIO Initialization Function
    356            * @param None
    357            * @retval None
    358            */
    359          static void MX_GPIO_Init(void)
    360          {
    361            GPIO_InitTypeDef GPIO_InitStruct = {0};
    362          
    363            /* GPIO Ports Clock Enable */
    364            __HAL_RCC_GPIOH_CLK_ENABLE();
    365            __HAL_RCC_GPIOC_CLK_ENABLE();
    366            __HAL_RCC_GPIOA_CLK_ENABLE();
    367            __HAL_RCC_GPIOD_CLK_ENABLE();
    368            __HAL_RCC_GPIOB_CLK_ENABLE();
    369          
    370            /*Configure GPIO pin Output Level */
    371            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
    372          
    373            /*Configure GPIO pin Output Level */
    374            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
    375                                    |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
    376          
    377            /*Configure GPIO pins : PA0 PA1 */
    378            GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    379            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    380            GPIO_InitStruct.Pull = GPIO_NOPULL;
    381            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    382            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    383          
    384            /*Configure GPIO pin : PA2 */
    385            GPIO_InitStruct.Pin = GPIO_PIN_2;
    386            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    387            GPIO_InitStruct.Pull = GPIO_NOPULL;
    388            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    389          
    390            /*Configure GPIO pins : PD8 PD9 PD10 PD11 
    391                                     PD12 PD13 PD14 PD15 */
    392            GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
    393                                    |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    394            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    395            GPIO_InitStruct.Pull = GPIO_NOPULL;
    396            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    397            HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    398          
    399          }
    400          
    401          /* USER CODE BEGIN 4 */
    402          
    403          /* USER CODE END 4 */
    404          
    405          /**
    406            * @brief  This function is executed in case of error occurrence.
    407            * @retval None
    408            */

   \                                 In section .text, align 2, keep-with-next
    409          void Error_Handler(void)
    410          {
    411            /* USER CODE BEGIN Error_Handler_Debug */
    412            /* User can add his own implementation to report the HAL error return state */
    413          
    414            /* USER CODE END Error_Handler_Debug */
    415          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x9101             STR      R1,[SP, #+4]
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x9202             STR      R2,[SP, #+8]
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x9103             STR      R1,[SP, #+12]
   \        0xA   0x2203             MOVS     R2,#+3
   \        0xC   0x9204             STR      R2,[SP, #+16]
   \        0xE   0xA901             ADD      R1,SP,#+4
   \       0x10   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x4002'0C14        DC32     0x40020c14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     hadc2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x4001'2100        DC32     0x40012100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \        0x0   0x0F00'0001        DC32     0xf000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \        0x0   0x4000'5400        DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \        0x0   0x0001'86A0        DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \        0x0   0x....'....        DC32     temp_array

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \        0x0   0x4000'7000        DC32     0x40007000
    416          
    417          #ifdef  USE_FULL_ASSERT
    418          /**
    419            * @brief  Reports the name of the source file and the source line number
    420            *         where the assert_param error has occurred.
    421            * @param  file: pointer to the source file name
    422            * @param  line: assert_param error line source number
    423            * @retval None
    424            */
    425          void assert_failed(uint8_t *file, uint32_t line)
    426          { 
    427            /* USER CODE BEGIN 6 */
    428            /* User can add his own implementation to report the file name and line number,
    429               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    430            /* USER CODE END 6 */
    431          }
    432          #endif /* USE_FULL_ASSERT */
    433          
    434          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
       8   clear
         8   -> HAL_Delay
         0   -> HAL_GPIO_WritePin
         8   -> HAL_GPIO_WritePin
       8   command
         8   -> HAL_Delay
         0   -> HAL_GPIO_WritePin
         8   -> HAL_GPIO_WritePin
       8   init
         8   -> HAL_Delay
         8   -> HAL_GPIO_WritePin
         0   -> command
         8   -> command
      56   main
        56   -> HAL_ADC_ConfigChannel
        56   -> HAL_ADC_Init
        56   -> HAL_ADC_Start_IT
        56   -> HAL_Delay
        56   -> HAL_GPIO_Init
        56   -> HAL_GPIO_WritePin
        56   -> HAL_I2CEx_ConfigAnalogFilter
        56   -> HAL_I2CEx_ConfigDigitalFilter
        56   -> HAL_I2C_Init
        56   -> HAL_I2C_Master_Transmit
        56   -> HAL_Init
        56   -> HAL_TIMEx_MasterConfigSynchronization
        56   -> HAL_TIM_Base_Init
        56   -> HAL_TIM_Base_Start
        56   -> HAL_TIM_ConfigClockSource
        56   -> SystemClock_Config
        56   -> init
        56   -> memset
        56   -> write_string
       8   write
         8   -> HAL_Delay
         0   -> HAL_GPIO_WritePin
         8   -> HAL_GPIO_WritePin
      16   write_string
        16   -> clear
        16   -> write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      42  ?Subroutine0
      18  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
      10  ?Subroutine4
       8  ?Subroutine5
       2  Error_Handler
     144  SystemClock_Config
       8  clear
      12  command
     220  hadc2
          hi2c1
          htim2
      80  init
     486  main
       8  write
      40  write_string

 
 220 bytes in section .bss
 926 bytes in section .text
 
 926 bytes of CODE memory
 220 bytes of DATA memory

Errors: none
Warnings: none
