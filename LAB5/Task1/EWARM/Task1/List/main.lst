###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         11/Feb/2020  11:57:58
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\mohit\Desktop\Microapps projects\LAB5\Task1\Src\main.c
#    Command line             =
#        -f C:\Users\mohit\AppData\Local\Temp\EW6E7.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB5\Task1\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM\Task1\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB5\Task1\EWARM\Task1\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale                   =  C
#    List file                =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM\Task1\List\main.lst
#    Object file              =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB5\Task1\EWARM\Task1\Obj\main.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#      __iar_require _Printf     
#      __size_limit           =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB5\Task1\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          #include "stdio.h"
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          TIM_HandleTypeDef htim2;
   \                     htim2:
   \        0x0                      DS8 64
     45          TIM_HandleTypeDef htim3;
   \                     htim3:
   \       0x40                      DS8 64
     46          TIM_HandleTypeDef htim4;
   \                     htim4:
   \       0x80                      DS8 64
     47          
     48          /* USER CODE BEGIN PV */
     49          
     50          /* USER CODE END PV */
     51          
     52          /* Private function prototypes -----------------------------------------------*/
     53          void SystemClock_Config(void);
     54          static void MX_GPIO_Init(void);
     55          static void MX_TIM2_Init(void);
     56          static void MX_TIM4_Init(void);
     57          static void MX_TIM3_Init(void);
     58          /* USER CODE BEGIN PFP */
     59          
     60          /* USER CODE END PFP */
     61          
     62          /* Private user code ---------------------------------------------------------*/
     63          /* USER CODE BEGIN 0 */
     64          
     65          

   \                                 In section .bss, align 2
     66          uint16_t IC_Val1 = 0;
     67          uint16_t IC_Val2 = 0;
     68          uint16_t Difference = 0;
     69          uint16_t Difference1 = 0;
     70          
     71          uint8_t Is_First_Captured = 0;  // is the first value captured ?
   \                     Is_First_Captured:
   \        0x0                      DS8 1
   \        0x1                      DS8 1
   \                     IC_Val1:
   \        0x2                      DS8 2
   \                     IC_Val2:
   \        0x4                      DS8 2
   \                     Difference:
   \        0x6                      DS8 2
   \                     Difference1:
   \        0x8                      DS8 2
     72          
     73          // Let's write the callbacl function now
     74          
     75          
     76          
     77          

   \                                 In section .text, align 4, keep-with-next
     78          void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
     79          {
   \                     HAL_TIM_IC_CaptureCallback: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     80          	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel4
   \        0x4   0x7F20             LDRB     R0,[R4, #+28]
   \        0x6   0x2808             CMP      R0,#+8
   \        0x8   0xD12F             BNE.N    ??HAL_TIM_IC_CaptureCallback_0
     81          	{
     82          		if (Is_First_Captured==0) // if the first value is not captured
   \        0xA   0x....             LDR.N    R5,??DataTable4
   \        0xC   0x7828             LDRB     R0,[R5, #+0]
   \        0xE   0xB9A0             CBNZ.N   R0,??HAL_TIM_IC_CaptureCallback_1
     83          		{
     84          			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
   \       0x10   0x210C             MOVS     R1,#+12
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       HAL_TIM_ReadCapturedValue
   \       0x18   0x8068             STRH     R0,[R5, #+2]
     85                                  
     86                                  if (IC_Val1 > IC_Val2)
   \       0x1A   0x88A9             LDRH     R1,[R5, #+4]
   \       0x1C   0x8868             LDRH     R0,[R5, #+2]
   \       0x1E   0x4281             CMP      R1,R0
   \       0x20   0xD205             BCS.N    ??HAL_TIM_IC_CaptureCallback_2
     87          			{
     88          				Difference1 = IC_Val1-IC_Val2;
   \       0x22   0x1A41             SUBS     R1,R0,R1
     89                                          printf("lower pw = %d" , Difference1);
   \       0x24   0x8129             STRH     R1,[R5, #+8]
   \       0x26   0xB289             UXTH     R1,R1
   \       0x28   0x....             ADR.N    R0,?_0
   \       0x2A   0x....'....        BL       printf
     90          			}
     91          
     92                                  
     93                                  
     94          			Is_First_Captured = 1;  // set the first captured as true
   \                     ??HAL_TIM_IC_CaptureCallback_2: (+1)
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0x....'....        BL       ?Subroutine0
     95          			// Now change the polarity to falling edge
     96          			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
     97          		}
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x34   0xF441 0x5100      ORR      R1,R1,#0x2000
   \       0x38   0xE016             B.N      ??CrossCallReturnLabel_1
     98          
     99          		else if (Is_First_Captured==1)   // if the first is already captured
   \                     ??HAL_TIM_IC_CaptureCallback_1: (+1)
   \       0x3A   0x2801             CMP      R0,#+1
   \       0x3C   0xD115             BNE.N    ??HAL_TIM_IC_CaptureCallback_0
    100          		{
    101          			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
   \       0x3E   0x210C             MOVS     R1,#+12
   \       0x40   0x4620             MOV      R0,R4
   \       0x42   0x....'....        BL       HAL_TIM_ReadCapturedValue
   \       0x46   0x80A8             STRH     R0,[R5, #+4]
    102          			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0x6821             LDR      R1,[R4, #+0]
   \       0x4C   0x6248             STR      R0,[R1, #+36]
    103          
    104          			if (IC_Val2 > IC_Val1)
   \       0x4E   0x8869             LDRH     R1,[R5, #+2]
   \       0x50   0x88A8             LDRH     R0,[R5, #+4]
   \       0x52   0x4281             CMP      R1,R0
   \       0x54   0xD205             BCS.N    ??HAL_TIM_IC_CaptureCallback_3
    105          			{
    106          				Difference = IC_Val2-IC_Val1;
   \       0x56   0x1A41             SUBS     R1,R0,R1
    107                                          printf("upper pw = %d" , Difference);
   \       0x58   0x80E9             STRH     R1,[R5, #+6]
   \       0x5A   0xB289             UXTH     R1,R1
   \       0x5C   0x....             ADR.N    R0,?_1
   \       0x5E   0x....'....        BL       printf
    108          			}
    109          
    110          			Is_First_Captured = 0; // set it back to false
   \                     ??HAL_TIM_IC_CaptureCallback_3: (+1)
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x....'....        BL       ?Subroutine0
    111          
    112          			// set polarity to rising edge
    113          			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x68   0x6201             STR      R1,[R0, #+32]
    114          
    115          		}
    116          	}
    117          }
   \                     ??HAL_TIM_IC_CaptureCallback_0: (+1)
   \       0x6A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x7028             STRB     R0,[R5, #+0]
   \        0x2   0x6820             LDR      R0,[R4, #+0]
   \        0x4   0x6A01             LDR      R1,[R0, #+32]
   \        0x6   0xF421 0x4120      BIC      R1,R1,#0xA000
   \        0xA   0x6201             STR      R1,[R0, #+32]
   \        0xC   0x6A01             LDR      R1,[R0, #+32]
   \        0xE   0x4770             BX       LR
    118          
    119          
    120          /* USER CODE END 0 */
    121          
    122          /**
    123            * @brief  The application entry point.
    124            * @retval int
    125            */

   \                                 In section .text, align 2, keep-with-next
    126          int main(void)
    127          {
   \                     main: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB08D             SUB      SP,SP,#+52
    128            /* USER CODE BEGIN 1 */
    129          
    130            /* USER CODE END 1 */
    131            
    132          
    133            /* MCU Configuration--------------------------------------------------------*/
    134          
    135            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    136            HAL_Init();
   \        0x4   0x....'....        BL       HAL_Init
    137          
    138            /* USER CODE BEGIN Init */
    139          
    140            /* USER CODE END Init */
    141          
    142            /* Configure the system clock */
    143            SystemClock_Config();
   \        0x8   0x....'....        BL       SystemClock_Config
    144          
    145            /* USER CODE BEGIN SysInit */
    146          
    147            /* USER CODE END SysInit */
    148          
    149            /* Initialize all configured peripherals */
    150            MX_GPIO_Init();
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
    151            MX_TIM2_Init();
   \       0x10   0xF44F 0x5580      MOV      R5,#+4096
   \       0x14   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40023830
   \       0x16   0x....             LDR.N    R4,??DataTable4_2
   \       0x18   0x6801             LDR      R1,[R0, #+0]
   \       0x1A   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x1E   0x6001             STR      R1,[R0, #+0]
   \       0x20   0xF104 0x0680      ADD      R6,R4,#+128
   \       0x24   0x6802             LDR      R2,[R0, #+0]
   \       0x26   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x2A   0x9200             STR      R2,[SP, #+0]
   \       0x2C   0x2200             MOVS     R2,#+0
   \       0x2E   0x9900             LDR      R1,[SP, #+0]
   \       0x30   0x9200             STR      R2,[SP, #+0]
   \       0x32   0x6803             LDR      R3,[R0, #+0]
   \       0x34   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x38   0x6003             STR      R3,[R0, #+0]
   \       0x3A   0x6801             LDR      R1,[R0, #+0]
   \       0x3C   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x40   0x9100             STR      R1,[SP, #+0]
   \       0x42   0x9900             LDR      R1,[SP, #+0]
   \       0x44   0x9200             STR      R2,[SP, #+0]
   \       0x46   0x2210             MOVS     R2,#+16
   \       0x48   0x6803             LDR      R3,[R0, #+0]
   \       0x4A   0xF043 0x0302      ORR      R3,R3,#0x2
   \       0x4E   0x6003             STR      R3,[R0, #+0]
   \       0x50   0x2100             MOVS     R1,#+0
   \       0x52   0x6800             LDR      R0,[R0, #+0]
   \       0x54   0xF000 0x0002      AND      R0,R0,#0x2
   \       0x58   0x9000             STR      R0,[SP, #+0]
   \       0x5A   0x9800             LDR      R0,[SP, #+0]
   \       0x5C   0xA806             ADD      R0,SP,#+24
   \       0x5E   0x....'....        BL       memset
   \       0x62   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x66   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x6A   0xF04F 0x4080      MOV      R0,#+1073741824
   \       0x6E   0x6020             STR      R0,[R4, #+0]
   \       0x70   0x2163             MOVS     R1,#+99
   \       0x72   0x....             LDR.N    R0,??DataTable4_3  ;; 0xffffe
   \       0x74   0x60E0             STR      R0,[R4, #+12]
   \       0x76   0x2200             MOVS     R2,#+0
   \       0x78   0x6061             STR      R1,[R4, #+4]
   \       0x7A   0x60A2             STR      R2,[R4, #+8]
   \       0x7C   0x6122             STR      R2,[R4, #+16]
   \       0x7E   0x61A2             STR      R2,[R4, #+24]
   \       0x80   0x4620             MOV      R0,R4
   \       0x82   0x....'....        BL       HAL_TIM_Base_Init
   \       0x86   0x9506             STR      R5,[SP, #+24]
   \       0x88   0xA906             ADD      R1,SP,#+24
   \       0x8A   0x4620             MOV      R0,R4
   \       0x8C   0x....'....        BL       HAL_TIM_ConfigClockSource
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x....'....        BL       HAL_TIM_IC_Init
   \       0x96   0x2100             MOVS     R1,#+0
   \       0x98   0x9100             STR      R1,[SP, #+0]
   \       0x9A   0x9101             STR      R1,[SP, #+4]
   \       0x9C   0x4620             MOV      R0,R4
   \       0x9E   0x4669             MOV      R1,SP
   \       0xA0   0x....'....        BL       HAL_TIMEx_MasterConfigSynchronization
   \       0xA4   0x2100             MOVS     R1,#+0
   \       0xA6   0x2201             MOVS     R2,#+1
   \       0xA8   0x9102             STR      R1,[SP, #+8]
   \       0xAA   0x9203             STR      R2,[SP, #+12]
   \       0xAC   0x9104             STR      R1,[SP, #+16]
   \       0xAE   0x9105             STR      R1,[SP, #+20]
   \       0xB0   0x220C             MOVS     R2,#+12
   \       0xB2   0xA902             ADD      R1,SP,#+8
   \       0xB4   0x4620             MOV      R0,R4
   \       0xB6   0x....'....        BL       HAL_TIM_IC_ConfigChannel
    152            MX_TIM4_Init();
   \       0xBA   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0xBE   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0xC2   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40000800
   \       0xC4   0xF8C4 0x0080      STR      R0,[R4, #+128]
   \       0xC8   0x2100             MOVS     R1,#+0
   \       0xCA   0xF104 0x0084      ADD      R0,R4,#+132
   \       0xCE   0x6001             STR      R1,[R0, #+0]
   \       0xD0   0x6041             STR      R1,[R0, #+4]
   \       0xD2   0x6081             STR      R1,[R0, #+8]
   \       0xD4   0x60C1             STR      R1,[R0, #+12]
   \       0xD6   0x6141             STR      R1,[R0, #+20]
   \       0xD8   0x4630             MOV      R0,R6
   \       0xDA   0x....'....        BL       HAL_TIM_Base_Init
   \       0xDE   0x9502             STR      R5,[SP, #+8]
   \       0xE0   0xA902             ADD      R1,SP,#+8
   \       0xE2   0x4630             MOV      R0,R6
   \       0xE4   0x....'....        BL       HAL_TIM_ConfigClockSource
   \       0xE8   0x2100             MOVS     R1,#+0
   \       0xEA   0x9100             STR      R1,[SP, #+0]
   \       0xEC   0x9101             STR      R1,[SP, #+4]
   \       0xEE   0x4630             MOV      R0,R6
   \       0xF0   0x4669             MOV      R1,SP
   \       0xF2   0x....'....        BL       HAL_TIMEx_MasterConfigSynchronization
    153            MX_TIM3_Init();
   \       0xF6   0x2210             MOVS     R2,#+16
   \       0xF8   0x2100             MOVS     R1,#+0
   \       0xFA   0xA809             ADD      R0,SP,#+36
   \       0xFC   0x....'....        BL       memset
   \      0x100   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x104   0x221C             MOVS     R2,#+28
   \      0x106   0x....'....        BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_7: (+1)
   \      0x10A   0x....             LDR.N    R0,??DataTable4_5  ;; 0x40000400
   \      0x10C   0x6420             STR      R0,[R4, #+64]
   \      0x10E   0x2163             MOVS     R1,#+99
   \      0x110   0x6461             STR      R1,[R4, #+68]
   \      0x112   0x2000             MOVS     R0,#+0
   \      0x114   0x64A0             STR      R0,[R4, #+72]
   \      0x116   0xF64F 0x71FE      MOVW     R1,#+65534
   \      0x11A   0x6520             STR      R0,[R4, #+80]
   \      0x11C   0x65A0             STR      R0,[R4, #+88]
   \      0x11E   0x64E1             STR      R1,[R4, #+76]
   \      0x120   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x124   0x....'....        BL       HAL_TIM_Base_Init
   \      0x128   0x9509             STR      R5,[SP, #+36]
   \      0x12A   0xA909             ADD      R1,SP,#+36
   \      0x12C   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x130   0x....'....        BL       HAL_TIM_ConfigClockSource
   \      0x134   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x138   0x....'....        BL       HAL_TIM_OC_Init
   \      0x13C   0x2100             MOVS     R1,#+0
   \      0x13E   0x9100             STR      R1,[SP, #+0]
   \      0x140   0x9101             STR      R1,[SP, #+4]
   \      0x142   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x146   0x4669             MOV      R1,SP
   \      0x148   0x....'....        BL       HAL_TIMEx_MasterConfigSynchronization
   \      0x14C   0x2100             MOVS     R1,#+0
   \      0x14E   0x9102             STR      R1,[SP, #+8]
   \      0x150   0x9103             STR      R1,[SP, #+12]
   \      0x152   0x9104             STR      R1,[SP, #+16]
   \      0x154   0x9106             STR      R1,[SP, #+24]
   \      0x156   0x2208             MOVS     R2,#+8
   \      0x158   0xA902             ADD      R1,SP,#+8
   \      0x15A   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x15E   0x....'....        BL       HAL_TIM_OC_ConfigChannel
   \      0x162   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x166   0x....'....        BL       HAL_TIM_MspPostInit
    154            /* USER CODE BEGIN 2 */
    155          
    156            /* USER CODE END 2 */
    157           
    158           
    159          
    160            /* Infinite loop */
    161            /* USER CODE BEGIN WHILE */
    162            while (1)
   \                     ??main_0: (+1)
   \      0x16A   0xE7FE             B.N      ??main_0
    163            {
    164              /* USER CODE END WHILE */
    165          
    166              /* USER CODE BEGIN 3 */
    167            }
    168            /* USER CODE END 3 */
    169          }
    170          
    171          /**
    172            * @brief System Clock Configuration
    173            * @retval None
    174            */

   \                                 In section .text, align 2, keep-with-next
    175          void SystemClock_Config(void)
    176          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2214             MOVS     R2,#+20
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       memset
    177            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    178            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    179          
    180            /** Configure the main internal regulator output voltage 
    181            */
    182            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
    183            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
    184            /** Initializes the CPU, AHB and APB busses clocks 
    185            */
    186            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    187            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x1C   0xF44F 0x3380      MOV      R3,#+65536
   \       0x20   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40023840
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40007000
   \       0x38   0x9100             STR      R1,[SP, #+0]
   \       0x3A   0x6802             LDR      R2,[R0, #+0]
   \       0x3C   0xF422 0x4240      BIC      R2,R2,#0xC000
   \       0x40   0xF442 0x4280      ORR      R2,R2,#0x4000
   \       0x44   0x6002             STR      R2,[R0, #+0]
   \       0x46   0x2201             MOVS     R2,#+1
   \       0x48   0x6800             LDR      R0,[R0, #+0]
   \       0x4A   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x4E   0x9000             STR      R0,[SP, #+0]
    188            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    189            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    190            RCC_OscInitStruct.PLL.PLLM = 4;
    191            RCC_OscInitStruct.PLL.PLLN = 100;
    192            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    193            RCC_OscInitStruct.PLL.PLLQ = 4;
    194            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x50   0xA806             ADD      R0,SP,#+24
   \       0x52   0x9900             LDR      R1,[SP, #+0]
   \       0x54   0x9206             STR      R2,[SP, #+24]
   \       0x56   0x2102             MOVS     R1,#+2
   \       0x58   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x5C   0x910C             STR      R1,[SP, #+48]
   \       0x5E   0x920D             STR      R2,[SP, #+52]
   \       0x60   0x2104             MOVS     R1,#+4
   \       0x62   0x2264             MOVS     R2,#+100
   \       0x64   0x910E             STR      R1,[SP, #+56]
   \       0x66   0x920F             STR      R2,[SP, #+60]
   \       0x68   0x2102             MOVS     R1,#+2
   \       0x6A   0x2204             MOVS     R2,#+4
   \       0x6C   0x9307             STR      R3,[SP, #+28]
   \       0x6E   0x9110             STR      R1,[SP, #+64]
   \       0x70   0x9211             STR      R2,[SP, #+68]
   \       0x72   0x....'....        BL       HAL_RCC_OscConfig
    195            {
    196              Error_Handler();
    197            }
    198            /** Initializes the CPU, AHB and APB busses clocks 
    199            */
    200            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    201                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    202            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x9102             STR      R1,[SP, #+8]
    203            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x9203             STR      R2,[SP, #+12]
   \       0x7E   0x200F             MOVS     R0,#+15
    204            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x80   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x9104             STR      R1,[SP, #+16]
    205            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x88   0xF44F 0x5280      MOV      R2,#+4096
   \       0x8C   0x9205             STR      R2,[SP, #+20]
    206          
    207            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
   \       0x8E   0x2103             MOVS     R1,#+3
   \       0x90   0xA801             ADD      R0,SP,#+4
   \       0x92   0x....'....        BL       HAL_RCC_ClockConfig
    208            {
    209              Error_Handler();
    210            }
    211          }
   \       0x96   0xB013             ADD      SP,SP,#+76
   \       0x98   0xBD00             POP      {PC}             ;; return
    212          
    213          /**
    214            * @brief TIM2 Initialization Function
    215            * @param None
    216            * @retval None
    217            */
    218          static void MX_TIM2_Init(void)
    219          {
    220          
    221            /* USER CODE BEGIN TIM2_Init 0 */
    222          
    223            /* USER CODE END TIM2_Init 0 */
    224          
    225            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    226            TIM_MasterConfigTypeDef sMasterConfig = {0};
    227            TIM_IC_InitTypeDef sConfigIC = {0};
    228          
    229            /* USER CODE BEGIN TIM2_Init 1 */
    230          
    231            /* USER CODE END TIM2_Init 1 */
    232            htim2.Instance = TIM2;
    233            htim2.Init.Prescaler = 99;
    234            htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    235            htim2.Init.Period = 0xfffff-1;
    236            htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    237            htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    238            if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    239            {
    240              Error_Handler();
    241            }
    242            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    243            if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
    244            {
    245              Error_Handler();
    246            }
    247            if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
    248            {
    249              Error_Handler();
    250            }
    251            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    252            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    253            if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    254            {
    255              Error_Handler();
    256            }
    257            sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
    258            sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
    259            sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
    260            sConfigIC.ICFilter = 0;
    261            if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
    262            {
    263              Error_Handler();
    264            }
    265            /* USER CODE BEGIN TIM2_Init 2 */
    266          
    267            /* USER CODE END TIM2_Init 2 */
    268          
    269          }
    270          
    271          /**
    272            * @brief TIM3 Initialization Function
    273            * @param None
    274            * @retval None
    275            */
    276          static void MX_TIM3_Init(void)
    277          {
    278          
    279            /* USER CODE BEGIN TIM3_Init 0 */
    280          
    281            /* USER CODE END TIM3_Init 0 */
    282          
    283            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    284            TIM_MasterConfigTypeDef sMasterConfig = {0};
    285            TIM_OC_InitTypeDef sConfigOC = {0};
    286          
    287            /* USER CODE BEGIN TIM3_Init 1 */
    288          
    289            /* USER CODE END TIM3_Init 1 */
    290            htim3.Instance = TIM3;
    291            htim3.Init.Prescaler = 99;
    292            htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
    293            htim3.Init.Period = 0xffff-1;
    294            htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    295            htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    296            if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
    297            {
    298              Error_Handler();
    299            }
    300            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    301            if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
    302            {
    303              Error_Handler();
    304            }
    305            if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
    306            {
    307              Error_Handler();
    308            }
    309            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    310            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    311            if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
    312            {
    313              Error_Handler();
    314            }
    315            sConfigOC.OCMode = TIM_OCMODE_TIMING;
    316            sConfigOC.Pulse = 0;
    317            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    318            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    319            if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
    320            {
    321              Error_Handler();
    322            }
    323            /* USER CODE BEGIN TIM3_Init 2 */
    324          
    325            /* USER CODE END TIM3_Init 2 */
    326            HAL_TIM_MspPostInit(&htim3);
    327          
    328          }
    329          
    330          /**
    331            * @brief TIM4 Initialization Function
    332            * @param None
    333            * @retval None
    334            */
    335          static void MX_TIM4_Init(void)
    336          {
    337          
    338            /* USER CODE BEGIN TIM4_Init 0 */
    339          
    340            /* USER CODE END TIM4_Init 0 */
    341          
    342            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    343            TIM_MasterConfigTypeDef sMasterConfig = {0};
    344          
    345            /* USER CODE BEGIN TIM4_Init 1 */
    346          
    347            /* USER CODE END TIM4_Init 1 */
    348            htim4.Instance = TIM4;
    349            htim4.Init.Prescaler = 0;
    350            htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
    351            htim4.Init.Period = 0;
    352            htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    353            htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    354            if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
    355            {
    356              Error_Handler();
    357            }
    358            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    359            if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
    360            {
    361              Error_Handler();
    362            }
    363            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    364            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    365            if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
    366            {
    367              Error_Handler();
    368            }
    369            /* USER CODE BEGIN TIM4_Init 2 */
    370          
    371            /* USER CODE END TIM4_Init 2 */
    372          
    373          }
    374          
    375          /**
    376            * @brief GPIO Initialization Function
    377            * @param None
    378            * @retval None
    379            */
    380          static void MX_GPIO_Init(void)
    381          {
    382          
    383            /* GPIO Ports Clock Enable */
    384            __HAL_RCC_GPIOH_CLK_ENABLE();
    385            __HAL_RCC_GPIOA_CLK_ENABLE();
    386            __HAL_RCC_GPIOB_CLK_ENABLE();
    387          
    388          }
    389          
    390          /* USER CODE BEGIN 4 */
    391          
    392          /* USER CODE END 4 */
    393          
    394          /**
    395            * @brief  This function is executed in case of error occurrence.
    396            * @retval None
    397            */

   \                                 In section .text, align 2, keep-with-next
    398          void Error_Handler(void)
    399          {
    400            /* USER CODE BEGIN Error_Handler_Debug */
    401            /* User can add his own implementation to report the HAL error return state */
    402          
    403            /* USER CODE END Error_Handler_Debug */
    404          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2210             MOVS     R2,#+16
   \                     ??Subroutine2_0: (+1)
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x....'....        B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2208             MOVS     R2,#+8
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x4668             MOV      R0,SP
   \        0x6   0x....'....        B.W      memset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     Is_First_Captured

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x000F'FFFE        DC32     0xffffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x6C 0x6F          DC8 "lower pw = %d"

   \              0x77 0x65    

   \              0x72 0x20    

   \              0x70 0x77    

   \              0x20 0x3D    

   \              0x20 0x25    

   \              0x64 0x00
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x75 0x70          DC8 "upper pw = %d"

   \              0x70 0x65    

   \              0x72 0x20    

   \              0x70 0x77    

   \              0x20 0x3D    

   \              0x20 0x25    

   \              0x64 0x00
   \        0xE   0x00 0x00          DC8 0, 0
    405          
    406          #ifdef  USE_FULL_ASSERT
    407          /**
    408            * @brief  Reports the name of the source file and the source line number
    409            *         where the assert_param error has occurred.
    410            * @param  file: pointer to the source file name
    411            * @param  line: assert_param error line source number
    412            * @retval None
    413            */
    414          void assert_failed(uint8_t *file, uint32_t line)
    415          { 
    416            /* USER CODE BEGIN 6 */
    417            /* User can add his own implementation to report the file name and line number,
    418               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    419            /* USER CODE END 6 */
    420          }
    421          #endif /* USE_FULL_ASSERT */
    422          
    423          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      16   HAL_TIM_IC_CaptureCallback
        16   -> HAL_TIM_ReadCapturedValue
        16   -> printf
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      72   main
        72   -> HAL_Init
        72   -> HAL_TIMEx_MasterConfigSynchronization
        72   -> HAL_TIM_Base_Init
        72   -> HAL_TIM_ConfigClockSource
        72   -> HAL_TIM_IC_ConfigChannel
        72   -> HAL_TIM_IC_Init
        72   -> HAL_TIM_MspPostInit
        72   -> HAL_TIM_OC_ConfigChannel
        72   -> HAL_TIM_OC_Init
        72   -> SystemClock_Config
        72   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
      16  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine2
      16  ?_0
      16  ?_1
       2  Error_Handler
     108  HAL_TIM_IC_CaptureCallback
      10  Is_First_Captured
          IC_Val1
          IC_Val2
          Difference
          Difference1
     154  SystemClock_Config
     192  htim2
          htim3
          htim4
     364  main

 
 202 bytes in section .bss
 728 bytes in section .text
 
 728 bytes of CODE memory
 202 bytes of DATA memory

Errors: none
Warnings: none
