###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         06/Feb/2020  11:09:34
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW3\HW 3\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW8717.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\HW3\HW 3\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\HW3\HW 3\EWARM\HW 3\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\HW3\HW 3\EWARM\HW 3\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW3\HW 3\EWARM/../Inc\" -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW3\HW 3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps projects\HW3\HW
#        3\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps projects\HW3\HW
#        3\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\" -I
#        "C:\Users\mohit\Desktop\Microapps projects\HW3\HW
#        3\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps projects\HW3\HW 3\EWARM\HW
#        3\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW3\HW 3\EWARM\HW
#        3\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\HW3\HW 3\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/
     44          
     45          /* USER CODE BEGIN PV */
     46          
     47          /* USER CODE END PV */
     48          
     49          /* Private function prototypes -----------------------------------------------*/
     50          void SystemClock_Config(void);
     51          static void MX_GPIO_Init(void);
     52          /* USER CODE BEGIN PFP */
     53          
     54          /* USER CODE END PFP */
     55          
     56          /* Private user code ---------------------------------------------------------*/
     57          /* USER CODE BEGIN 0 */
     58          
     59          /* USER CODE END 0 */
     60          
     61          /**
     62            * @brief  The application entry point.
     63            * @retval int
     64            */

   \                                 In section .text, align 2, keep-with-next
     65          int main(void)
     66          {
   \                     main: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
     67            /* USER CODE BEGIN 1 */
     68          
     69            /* USER CODE END 1 */
     70            
     71          
     72            /* MCU Configuration--------------------------------------------------------*/
     73          
     74            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     75            HAL_Init();
   \        0x4   0x....'....        BL       HAL_Init
     76          
     77            /* USER CODE BEGIN Init */
     78          
     79            /* USER CODE END Init */
     80          
     81            /* Configure the system clock */
     82            SystemClock_Config();
   \        0x8   0x....'....        BL       SystemClock_Config
     83          
     84            /* USER CODE BEGIN SysInit */
     85          
     86            /* USER CODE END SysInit */
     87          
     88            /* Initialize all configured peripherals */
     89            MX_GPIO_Init();
   \        0xC   0x2214             MOVS     R2,#+20
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       memset
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x9005             STR      R0,[SP, #+20]
   \       0x1A   0xF240 0x15FF      MOVW     R5,#+511
   \       0x1E   0x....             LDR.N    R0,??DataTable1  ;; 0x40023830
   \       0x20   0x....             LDR.N    R4,??DataTable1_1  ;; 0x40021400
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0x....             LDR.N    R6,??DataTable1_2  ;; 0x40020000
   \       0x26   0xF041 0x0110      ORR      R1,R1,#0x10
   \       0x2A   0x6001             STR      R1,[R0, #+0]
   \       0x2C   0x27FF             MOVS     R7,#+255
   \       0x2E   0x6802             LDR      R2,[R0, #+0]
   \       0x30   0xF002 0x0210      AND      R2,R2,#0x10
   \       0x34   0x9205             STR      R2,[SP, #+20]
   \       0x36   0x2200             MOVS     R2,#+0
   \       0x38   0x9905             LDR      R1,[SP, #+20]
   \       0x3A   0x9205             STR      R2,[SP, #+20]
   \       0x3C   0x6803             LDR      R3,[R0, #+0]
   \       0x3E   0xF043 0x0320      ORR      R3,R3,#0x20
   \       0x42   0x6003             STR      R3,[R0, #+0]
   \       0x44   0x6801             LDR      R1,[R0, #+0]
   \       0x46   0xF001 0x0120      AND      R1,R1,#0x20
   \       0x4A   0x9105             STR      R1,[SP, #+20]
   \       0x4C   0x9905             LDR      R1,[SP, #+20]
   \       0x4E   0x9205             STR      R2,[SP, #+20]
   \       0x50   0x6803             LDR      R3,[R0, #+0]
   \       0x52   0xF043 0x0380      ORR      R3,R3,#0x80
   \       0x56   0x6003             STR      R3,[R0, #+0]
   \       0x58   0x6801             LDR      R1,[R0, #+0]
   \       0x5A   0xF001 0x0180      AND      R1,R1,#0x80
   \       0x5E   0x9105             STR      R1,[SP, #+20]
   \       0x60   0x9905             LDR      R1,[SP, #+20]
   \       0x62   0x9205             STR      R2,[SP, #+20]
   \       0x64   0x6803             LDR      R3,[R0, #+0]
   \       0x66   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x6A   0x6003             STR      R3,[R0, #+0]
   \       0x6C   0x6801             LDR      R1,[R0, #+0]
   \       0x6E   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x72   0x9105             STR      R1,[SP, #+20]
   \       0x74   0x9905             LDR      R1,[SP, #+20]
   \       0x76   0x9205             STR      R2,[SP, #+20]
   \       0x78   0x2180             MOVS     R1,#+128
   \       0x7A   0x6803             LDR      R3,[R0, #+0]
   \       0x7C   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0x80   0x6003             STR      R3,[R0, #+0]
   \       0x82   0x6800             LDR      R0,[R0, #+0]
   \       0x84   0xF000 0x0008      AND      R0,R0,#0x8
   \       0x88   0x9005             STR      R0,[SP, #+20]
   \       0x8A   0x9805             LDR      R0,[SP, #+20]
   \       0x8C   0x4620             MOV      R0,R4
   \       0x8E   0x....'....        BL       HAL_GPIO_WritePin
   \       0x92   0x2200             MOVS     R2,#+0
   \       0x94   0x4629             MOV      R1,R5
   \       0x96   0x4630             MOV      R0,R6
   \       0x98   0x....'....        BL       HAL_GPIO_WritePin
   \       0x9C   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xA0   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40021000
   \       0xA2   0x....'....        BL       HAL_GPIO_Init
   \       0xA6   0x2180             MOVS     R1,#+128
   \       0xA8   0x9100             STR      R1,[SP, #+0]
   \       0xAA   0x2201             MOVS     R2,#+1
   \       0xAC   0x9201             STR      R2,[SP, #+4]
   \       0xAE   0x2100             MOVS     R1,#+0
   \       0xB0   0x9102             STR      R1,[SP, #+8]
   \       0xB2   0x2203             MOVS     R2,#+3
   \       0xB4   0x9203             STR      R2,[SP, #+12]
   \       0xB6   0x4669             MOV      R1,SP
   \       0xB8   0x4620             MOV      R0,R4
   \       0xBA   0x....'....        BL       HAL_GPIO_Init
   \       0xBE   0x2001             MOVS     R0,#+1
   \       0xC0   0x2103             MOVS     R1,#+3
   \       0xC2   0x9001             STR      R0,[SP, #+4]
   \       0xC4   0x2200             MOVS     R2,#+0
   \       0xC6   0x9103             STR      R1,[SP, #+12]
   \       0xC8   0x9202             STR      R2,[SP, #+8]
   \       0xCA   0x9500             STR      R5,[SP, #+0]
   \       0xCC   0x4669             MOV      R1,SP
   \       0xCE   0x4630             MOV      R0,R6
   \       0xD0   0x....'....        BL       HAL_GPIO_Init
   \       0xD4   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0xD8   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40020c00
   \       0xDA   0x....'....        BL       HAL_GPIO_Init
     90            /* USER CODE BEGIN 2 */
     91          SysTick_Config(180000);
   \       0xDE   0x....             LDR.N    R0,??DataTable1_5  ;; 0xe000e010
   \       0xE0   0x....             LDR.N    R1,??DataTable1_6  ;; 0x2bf1f
   \       0xE2   0x....             LDR.N    R3,??DataTable1_7  ;; 0xe000ed23
   \       0xE4   0x6041             STR      R1,[R0, #+4]
   \       0xE6   0x22F0             MOVS     R2,#+240
   \       0xE8   0x701A             STRB     R2,[R3, #+0]
   \       0xEA   0x2100             MOVS     R1,#+0
   \       0xEC   0x6081             STR      R1,[R0, #+8]
   \       0xEE   0x2207             MOVS     R2,#+7
   \       0xF0   0x6002             STR      R2,[R0, #+0]
     92            /* USER CODE END 2 */
     93           
     94           
     95          
     96            /* Infinite loop */
     97            /* USER CODE BEGIN WHILE */
     98            while (1)
   \                     ??main_0: (+1)
   \       0xF2   0xE7FE             B.N      ??main_0
     99            {
    100              /* USER CODE END WHILE */
    101          
    102              /* USER CODE BEGIN 3 */
    103            }
    104            /* USER CODE END 3 */
    105          }
    106          
    107          /**
    108            * @brief System Clock Configuration
    109            * @retval None
    110            */

   \                                 In section .text, align 2, keep-with-next
    111          void SystemClock_Config(void)
    112          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2214             MOVS     R2,#+20
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       memset
    113            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    114            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    115          
    116            /** Configure the main internal regulator output voltage 
    117            */
    118            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
    119            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    120            /** Initializes the CPU, AHB and APB busses clocks 
    121            */
    122            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    123            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x1C   0xF44F 0x3380      MOV      R3,#+65536
   \       0x20   0x....             LDR.N    R0,??DataTable1_8  ;; 0x40023840
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x....             LDR.N    R0,??DataTable1_9  ;; 0x40007000
   \       0x38   0x9100             STR      R1,[SP, #+0]
   \       0x3A   0x6802             LDR      R2,[R0, #+0]
   \       0x3C   0xF442 0x4240      ORR      R2,R2,#0xC000
   \       0x40   0x6002             STR      R2,[R0, #+0]
   \       0x42   0x2201             MOVS     R2,#+1
   \       0x44   0x6800             LDR      R0,[R0, #+0]
   \       0x46   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x4A   0x9000             STR      R0,[SP, #+0]
    124            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    125            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    126            RCC_OscInitStruct.PLL.PLLM = 4;
    127            RCC_OscInitStruct.PLL.PLLN = 180;
    128            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    129            RCC_OscInitStruct.PLL.PLLQ = 4;
    130            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x4C   0xA806             ADD      R0,SP,#+24
   \       0x4E   0x9900             LDR      R1,[SP, #+0]
   \       0x50   0x9206             STR      R2,[SP, #+24]
   \       0x52   0x2102             MOVS     R1,#+2
   \       0x54   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x58   0x910C             STR      R1,[SP, #+48]
   \       0x5A   0x920D             STR      R2,[SP, #+52]
   \       0x5C   0x2104             MOVS     R1,#+4
   \       0x5E   0x22B4             MOVS     R2,#+180
   \       0x60   0x910E             STR      R1,[SP, #+56]
   \       0x62   0x920F             STR      R2,[SP, #+60]
   \       0x64   0x2102             MOVS     R1,#+2
   \       0x66   0x2204             MOVS     R2,#+4
   \       0x68   0x9307             STR      R3,[SP, #+28]
   \       0x6A   0x9110             STR      R1,[SP, #+64]
   \       0x6C   0x9211             STR      R2,[SP, #+68]
   \       0x6E   0x....'....        BL       HAL_RCC_OscConfig
    131            {
    132              Error_Handler();
    133            }
    134            /** Activate the Over-Drive mode 
    135            */
    136            if (HAL_PWREx_EnableOverDrive() != HAL_OK)
   \       0x72   0x....'....        BL       HAL_PWREx_EnableOverDrive
    137            {
    138              Error_Handler();
    139            }
    140            /** Initializes the CPU, AHB and APB busses clocks 
    141            */
    142            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    143                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    144            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x9102             STR      R1,[SP, #+8]
    145            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x9203             STR      R2,[SP, #+12]
   \       0x7E   0x200F             MOVS     R0,#+15
    146            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x80   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x9104             STR      R1,[SP, #+16]
    147            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x88   0xF44F 0x5280      MOV      R2,#+4096
   \       0x8C   0x9205             STR      R2,[SP, #+20]
    148          
    149            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
   \       0x8E   0x2105             MOVS     R1,#+5
   \       0x90   0xA801             ADD      R0,SP,#+4
   \       0x92   0x....'....        BL       HAL_RCC_ClockConfig
    150            {
    151              Error_Handler();
    152            }
    153          }
   \       0x96   0xB013             ADD      SP,SP,#+76
   \       0x98   0xBD00             POP      {PC}             ;; return
    154          
    155          /**
    156            * @brief GPIO Initialization Function
    157            * @param None
    158            * @retval None
    159            */
    160          static void MX_GPIO_Init(void)
    161          {
    162            GPIO_InitTypeDef GPIO_InitStruct = {0};
    163          
    164            /* GPIO Ports Clock Enable */
    165            __HAL_RCC_GPIOE_CLK_ENABLE();
    166            __HAL_RCC_GPIOF_CLK_ENABLE();
    167            __HAL_RCC_GPIOH_CLK_ENABLE();
    168            __HAL_RCC_GPIOA_CLK_ENABLE();
    169            __HAL_RCC_GPIOD_CLK_ENABLE();
    170          
    171            /*Configure GPIO pin Output Level */
    172            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
    173          
    174            /*Configure GPIO pin Output Level */
    175            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
    176                                    |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
    177                                    |GPIO_PIN_8, GPIO_PIN_RESET);
    178          
    179            /*Configure GPIO pins : PE2 PE3 PE4 PE5 
    180                                     PE6 PE7 PE0 PE1 */
    181            GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
    182                                    |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
    183            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    184            GPIO_InitStruct.Pull = GPIO_NOPULL;
    185            HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
    186          
    187            /*Configure GPIO pin : PF7 */
    188            GPIO_InitStruct.Pin = GPIO_PIN_7;
    189            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    190            GPIO_InitStruct.Pull = GPIO_NOPULL;
    191            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    192            HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
    193          
    194            /*Configure GPIO pins : PA0 PA1 PA2 PA3 
    195                                     PA4 PA5 PA6 PA7 
    196                                     PA8 */
    197            GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
    198                                    |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
    199                                    |GPIO_PIN_8;
    200            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    201            GPIO_InitStruct.Pull = GPIO_NOPULL;
    202            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    203            HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    204          
    205            /*Configure GPIO pins : PD0 PD1 PD2 PD3 
    206                                     PD4 PD5 PD6 PD7 */
    207            GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
    208                                    |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    209            GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    210            GPIO_InitStruct.Pull = GPIO_NOPULL;
    211            HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    212          
    213          }
    214          
    215          /* USER CODE BEGIN 4 */
    216          
    217          /* USER CODE END 4 */
    218          
    219          /**
    220            * @brief  This function is executed in case of error occurrence.
    221            * @retval None
    222            */

   \                                 In section .text, align 2, keep-with-next
    223          void Error_Handler(void)
    224          {
    225            /* USER CODE BEGIN Error_Handler_Debug */
    226            /* User can add his own implementation to report the HAL error return state */
    227          
    228            /* USER CODE END Error_Handler_Debug */
    229          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x9101             STR      R1,[SP, #+4]
   \        0x4   0x9102             STR      R1,[SP, #+8]
   \        0x6   0x9700             STR      R7,[SP, #+0]
   \        0x8   0x4669             MOV      R1,SP
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4002'1400        DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x0002'BF1F        DC32     0x2bf1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0xE000'ED23        DC32     0xe000ed23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x4000'7000        DC32     0x40007000
    230          
    231          #ifdef  USE_FULL_ASSERT
    232          /**
    233            * @brief  Reports the name of the source file and the source line number
    234            *         where the assert_param error has occurred.
    235            * @param  file: pointer to the source file name
    236            * @param  line: assert_param error line source number
    237            * @retval None
    238            */
    239          void assert_failed(uint8_t *file, uint32_t line)
    240          { 
    241            /* USER CODE BEGIN 6 */
    242            /* User can add his own implementation to report the file name and line number,
    243               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    244            /* USER CODE END 6 */
    245          }
    246          #endif /* USE_FULL_ASSERT */
    247          
    248          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_PWREx_EnableOverDrive
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      48   main
        48   -> HAL_GPIO_Init
        48   -> HAL_GPIO_WritePin
        48   -> HAL_Init
        48   -> SystemClock_Config
        48   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      12  ?Subroutine0
       2  Error_Handler
     154  SystemClock_Config
     244  main

 
 452 bytes in section .text
 
 452 bytes of CODE memory

Errors: none
Warnings: none
