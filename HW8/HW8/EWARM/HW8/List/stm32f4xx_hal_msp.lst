###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         02/Apr/2020  13:06:12
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\Src\stm32f4xx_hal_msp.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EWAE2D.tmp
#        ("C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\Src\stm32f4xx_hal_msp.c" -D USE_HAL_DRIVER -D
#        STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\List" -o "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\Obj" --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I "C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\EWARM/../Inc\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\List\stm32f4xx_hal_msp.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\Obj\stm32f4xx_hal_msp.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\Src\stm32f4xx_hal_msp.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * File Name          : stm32f4xx_hal_msp.c
      5            * Description        : This file provides code for the MSP Initialization 
      6            *                      and de-Initialization codes.
      7            ******************************************************************************
      8            * @attention
      9            *
     10            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     11            * All rights reserved.</center></h2>
     12            *
     13            * This software component is licensed by ST under BSD 3-Clause license,
     14            * the "License"; You may not use this file except in compliance with the
     15            * License. You may obtain a copy of the License at:
     16            *                        opensource.org/licenses/BSD-3-Clause
     17            *
     18            ******************************************************************************
     19            */
     20          /* USER CODE END Header */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "main.h"
     24          /* USER CODE BEGIN Includes */
     25          
     26          /* USER CODE END Includes */
     27          
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* USER CODE BEGIN TD */
     30          
     31          /* USER CODE END TD */
     32          
     33          /* Private define ------------------------------------------------------------*/
     34          /* USER CODE BEGIN Define */
     35           
     36          /* USER CODE END Define */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN Macro */
     40          
     41          /* USER CODE END Macro */
     42          
     43          /* Private variables ---------------------------------------------------------*/
     44          /* USER CODE BEGIN PV */
     45          
     46          /* USER CODE END PV */
     47          
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* USER CODE BEGIN PFP */
     50          
     51          /* USER CODE END PFP */
     52          
     53          /* External functions --------------------------------------------------------*/
     54          /* USER CODE BEGIN ExternalFunctions */
     55          
     56          /* USER CODE END ExternalFunctions */
     57          
     58          /* USER CODE BEGIN 0 */
     59          
     60          /* USER CODE END 0 */
     61                                  
     62          void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
     63                              /**
     64            * Initializes the Global MSP.
     65            */

   \                                 In section .text, align 2, keep-with-next
     66          void HAL_MspInit(void)
     67          {
   \                     HAL_MspInit: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
     68            /* USER CODE BEGIN MspInit 0 */
     69          
     70            /* USER CODE END MspInit 0 */
     71          
     72            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x9000             STR      R0,[SP, #+0]
     73            __HAL_RCC_PWR_CLK_ENABLE();
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x....             LDR.N    R0,??DataTable3  ;; 0x40023840
   \        0xA   0x6841             LDR      R1,[R0, #+4]
   \        0xC   0xF441 0x4180      ORR      R1,R1,#0x4000
   \       0x10   0x6041             STR      R1,[R0, #+4]
   \       0x12   0x6841             LDR      R1,[R0, #+4]
   \       0x14   0xF401 0x4180      AND      R1,R1,#0x4000
   \       0x18   0x9100             STR      R1,[SP, #+0]
   \       0x1A   0x9900             LDR      R1,[SP, #+0]
   \       0x1C   0x9200             STR      R2,[SP, #+0]
   \       0x1E   0x6803             LDR      R3,[R0, #+0]
   \       0x20   0xF043 0x5380      ORR      R3,R3,#0x10000000
   \       0x24   0x6003             STR      R3,[R0, #+0]
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
     74          
     75            /* System interrupt init*/
     76          
     77            /* USER CODE BEGIN MspInit 1 */
     78          
     79            /* USER CODE END MspInit 1 */
     80          }
   \       0x30   0xB001             ADD      SP,SP,#+4
   \       0x32   0x4770             BX       LR               ;; return
     81          
     82          /**
     83          * @brief TIM_Base MSP Initialization
     84          * This function configures the hardware resources used in this example
     85          * @param htim_base: TIM_Base handle pointer
     86          * @retval None
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
     89          {
   \                     HAL_TIM_Base_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x2214             MOVS     R2,#+20
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x....'....        BL       memset
     90            GPIO_InitTypeDef GPIO_InitStruct = {0};
     91            if(htim_base->Instance==TIM2)
   \       0x10   0x6822             LDR      R2,[R4, #+0]
   \       0x12   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40020000
   \       0x14   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40023830
   \       0x16   0xF1B2 0x4F80      CMP      R2,#+1073741824
   \       0x1A   0xD119             BNE.N    ??HAL_TIM_Base_MspInit_0
     92            {
     93            /* USER CODE BEGIN TIM2_MspInit 0 */
     94          
     95            /* USER CODE END TIM2_MspInit 0 */
     96              /* Peripheral clock enable */
     97              __HAL_RCC_TIM2_CLK_ENABLE();
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x9205             STR      R2,[SP, #+20]
   \       0x20   0x690B             LDR      R3,[R1, #+16]
   \       0x22   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x26   0x610B             STR      R3,[R1, #+16]
     98            
     99              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x28   0x2300             MOVS     R3,#+0
   \       0x2A   0x690A             LDR      R2,[R1, #+16]
   \       0x2C   0xF002 0x0201      AND      R2,R2,#0x1
   \       0x30   0x9205             STR      R2,[SP, #+20]
   \       0x32   0x9A05             LDR      R2,[SP, #+20]
   \       0x34   0x9305             STR      R3,[SP, #+20]
    100              /**TIM2 GPIO Configuration    
    101              PA5     ------> TIM2_CH1 
    102              */
    103              GPIO_InitStruct.Pin = GPIO_PIN_5;
   \       0x36   0x2220             MOVS     R2,#+32
   \       0x38   0x....'....        BL       ?Subroutine0
    104              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    105              GPIO_InitStruct.Pull = GPIO_NOPULL;
    106              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    107              GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x3C   0x2201             MOVS     R2,#+1
   \       0x3E   0x....'....        BL       ?Subroutine1
    108              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    109          
    110              /* TIM2 interrupt Init */
    111              HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x42   0x2200             MOVS     R2,#+0
   \       0x44   0x2100             MOVS     R1,#+0
   \       0x46   0x201C             MOVS     R0,#+28
   \       0x48   0x....'....        BL       HAL_NVIC_SetPriority
    112              HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \       0x4C   0x201C             MOVS     R0,#+28
   \       0x4E   0xE049             B.N      ??HAL_TIM_Base_MspInit_1
    113            /* USER CODE BEGIN TIM2_MspInit 1 */
    114          
    115            /* USER CODE END TIM2_MspInit 1 */
    116            }
    117            else if(htim_base->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspInit_0: (+1)
   \       0x50   0x....             LDR.N    R3,??DataTable3_3  ;; 0x40000400
   \       0x52   0x429A             CMP      R2,R3
   \       0x54   0xD119             BNE.N    ??HAL_TIM_Base_MspInit_2
    118            {
    119            /* USER CODE BEGIN TIM3_MspInit 0 */
    120          
    121            /* USER CODE END TIM3_MspInit 0 */
    122              /* Peripheral clock enable */
    123              __HAL_RCC_TIM3_CLK_ENABLE();
   \       0x56   0x2200             MOVS     R2,#+0
   \       0x58   0x9205             STR      R2,[SP, #+20]
   \       0x5A   0x690B             LDR      R3,[R1, #+16]
   \       0x5C   0xF043 0x0302      ORR      R3,R3,#0x2
   \       0x60   0x610B             STR      R3,[R1, #+16]
    124            
    125              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x62   0x2300             MOVS     R3,#+0
   \       0x64   0x690A             LDR      R2,[R1, #+16]
   \       0x66   0xF002 0x0202      AND      R2,R2,#0x2
   \       0x6A   0x9205             STR      R2,[SP, #+20]
   \       0x6C   0x9A05             LDR      R2,[SP, #+20]
   \       0x6E   0x9305             STR      R3,[SP, #+20]
    126              /**TIM3 GPIO Configuration    
    127              PA6     ------> TIM3_CH1 
    128              */
    129              GPIO_InitStruct.Pin = GPIO_PIN_6;
   \       0x70   0x2240             MOVS     R2,#+64
   \       0x72   0x....'....        BL       ?Subroutine0
    130              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    131              GPIO_InitStruct.Pull = GPIO_NOPULL;
    132              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    133              GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x76   0x2202             MOVS     R2,#+2
   \       0x78   0x....'....        BL       ?Subroutine1
    134              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    135          
    136              /* TIM3 interrupt Init */
    137              HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x7C   0x2200             MOVS     R2,#+0
   \       0x7E   0x2100             MOVS     R1,#+0
   \       0x80   0x201D             MOVS     R0,#+29
   \       0x82   0x....'....        BL       HAL_NVIC_SetPriority
    138              HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \       0x86   0x201D             MOVS     R0,#+29
   \       0x88   0xE02C             B.N      ??HAL_TIM_Base_MspInit_1
    139            /* USER CODE BEGIN TIM3_MspInit 1 */
    140          
    141            /* USER CODE END TIM3_MspInit 1 */
    142            }
    143            else if(htim_base->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspInit_2: (+1)
   \       0x8A   0x....             LDR.N    R0,??DataTable3_4  ;; 0x40000800
   \       0x8C   0x4282             CMP      R2,R0
   \       0x8E   0xD12C             BNE.N    ??HAL_TIM_Base_MspInit_3
    144            {
    145            /* USER CODE BEGIN TIM4_MspInit 0 */
    146          
    147            /* USER CODE END TIM4_MspInit 0 */
    148              /* Peripheral clock enable */
    149              __HAL_RCC_TIM4_CLK_ENABLE();
   \       0x90   0x2200             MOVS     R2,#+0
   \       0x92   0x9205             STR      R2,[SP, #+20]
   \       0x94   0x6908             LDR      R0,[R1, #+16]
   \       0x96   0xF040 0x0004      ORR      R0,R0,#0x4
   \       0x9A   0x6108             STR      R0,[R1, #+16]
   \       0x9C   0x6908             LDR      R0,[R1, #+16]
   \       0x9E   0xF000 0x0004      AND      R0,R0,#0x4
   \       0xA2   0x9005             STR      R0,[SP, #+20]
   \       0xA4   0x9805             LDR      R0,[SP, #+20]
    150            
    151              __HAL_RCC_GPIOD_CLK_ENABLE();
   \       0xA6   0x9205             STR      R2,[SP, #+20]
    152              /**TIM4 GPIO Configuration    
    153              PD12     ------> TIM4_CH1 
    154              */
    155              GPIO_InitStruct.Pin = GPIO_PIN_12;
    156              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0xA8   0x2202             MOVS     R2,#+2
   \       0xAA   0x680B             LDR      R3,[R1, #+0]
   \       0xAC   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0xB0   0x600B             STR      R3,[R1, #+0]
   \       0xB2   0x6808             LDR      R0,[R1, #+0]
   \       0xB4   0xF000 0x0008      AND      R0,R0,#0x8
   \       0xB8   0x9005             STR      R0,[SP, #+20]
   \       0xBA   0xF44F 0x5180      MOV      R1,#+4096
   \       0xBE   0x9805             LDR      R0,[SP, #+20]
    157              GPIO_InitStruct.Pull = GPIO_NOPULL;
    158              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    159              GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    160              HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
   \       0xC0   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40020c00
   \       0xC2   0x9100             STR      R1,[SP, #+0]
   \       0xC4   0x9201             STR      R2,[SP, #+4]
   \       0xC6   0x2100             MOVS     R1,#+0
   \       0xC8   0x9102             STR      R1,[SP, #+8]
   \       0xCA   0x2203             MOVS     R2,#+3
   \       0xCC   0x2102             MOVS     R1,#+2
   \       0xCE   0x9104             STR      R1,[SP, #+16]
   \       0xD0   0x9203             STR      R2,[SP, #+12]
   \       0xD2   0x4669             MOV      R1,SP
   \       0xD4   0x....'....        BL       HAL_GPIO_Init
    161          
    162              /* TIM4 interrupt Init */
    163              HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
   \       0xD8   0x2200             MOVS     R2,#+0
   \       0xDA   0x2100             MOVS     R1,#+0
   \       0xDC   0x201E             MOVS     R0,#+30
   \       0xDE   0x....'....        BL       HAL_NVIC_SetPriority
    164              HAL_NVIC_EnableIRQ(TIM4_IRQn);
   \       0xE2   0x201E             MOVS     R0,#+30
   \                     ??HAL_TIM_Base_MspInit_1: (+1)
   \       0xE4   0x....'....        BL       HAL_NVIC_EnableIRQ
   \       0xE8   0xE00D             B.N      ??HAL_TIM_Base_MspInit_4
    165            /* USER CODE BEGIN TIM4_MspInit 1 */
    166          
    167            /* USER CODE END TIM4_MspInit 1 */
    168            }
    169            else if(htim_base->Instance==TIM5)
   \                     ??HAL_TIM_Base_MspInit_3: (+1)
   \       0xEA   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40000c00
   \       0xEC   0x4282             CMP      R2,R0
   \       0xEE   0xD10A             BNE.N    ??HAL_TIM_Base_MspInit_4
    170            {
    171            /* USER CODE BEGIN TIM5_MspInit 0 */
    172          
    173            /* USER CODE END TIM5_MspInit 0 */
    174              /* Peripheral clock enable */
    175              __HAL_RCC_TIM5_CLK_ENABLE();
   \       0xF0   0x2200             MOVS     R2,#+0
   \       0xF2   0x9205             STR      R2,[SP, #+20]
   \       0xF4   0x6908             LDR      R0,[R1, #+16]
   \       0xF6   0xF040 0x0008      ORR      R0,R0,#0x8
   \       0xFA   0x6108             STR      R0,[R1, #+16]
   \       0xFC   0x6908             LDR      R0,[R1, #+16]
   \       0xFE   0xF000 0x0008      AND      R0,R0,#0x8
   \      0x102   0x9005             STR      R0,[SP, #+20]
   \      0x104   0x9805             LDR      R0,[SP, #+20]
    176            /* USER CODE BEGIN TIM5_MspInit 1 */
    177          
    178            /* USER CODE END TIM5_MspInit 1 */
    179            }
    180          
    181          }
   \                     ??HAL_TIM_Base_MspInit_4: (+1)
   \      0x106   0xB006             ADD      SP,SP,#+24
   \      0x108   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x9303             STR      R3,[SP, #+12]
   \        0x2   0x9204             STR      R2,[SP, #+16]
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x....'....        B.W      HAL_GPIO_Init

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x680C             LDR      R4,[R1, #+0]
   \        0x2   0xF044 0x0401      ORR      R4,R4,#0x1
   \        0x6   0x600C             STR      R4,[R1, #+0]
   \        0x8   0x2302             MOVS     R3,#+2
   \        0xA   0x6809             LDR      R1,[R1, #+0]
   \        0xC   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x10   0x9105             STR      R1,[SP, #+20]
   \       0x12   0x9905             LDR      R1,[SP, #+20]
   \       0x14   0x9200             STR      R2,[SP, #+0]
   \       0x16   0x9301             STR      R3,[SP, #+4]
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x9202             STR      R2,[SP, #+8]
   \       0x1C   0x2303             MOVS     R3,#+3
   \       0x1E   0x4770             BX       LR
    182          

   \                                 In section .text, align 2, keep-with-next
    183          void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
    184          {
   \                     HAL_TIM_MspPostInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x2214             MOVS     R2,#+20
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0xA801             ADD      R0,SP,#+4
   \        0xC   0x....'....        BL       memset
    185            GPIO_InitTypeDef GPIO_InitStruct = {0};
    186            if(htim->Instance==TIM5)
   \       0x10   0x6821             LDR      R1,[R4, #+0]
   \       0x12   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40000c00
   \       0x14   0x4281             CMP      R1,R0
   \       0x16   0xD119             BNE.N    ??HAL_TIM_MspPostInit_0
    187            {
    188            /* USER CODE BEGIN TIM5_MspPostInit 0 */
    189          
    190            /* USER CODE END TIM5_MspPostInit 0 */
    191            
    192              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40023830
   \       0x1C   0x9200             STR      R2,[SP, #+0]
    193              /**TIM5 GPIO Configuration    
    194              PA0/WKUP     ------> TIM5_CH1
    195              PA1     ------> TIM5_CH2
    196              PA2     ------> TIM5_CH3 
    197              */
    198              GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    199              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0x1E   0x2202             MOVS     R2,#+2
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0xF041 0x0101      ORR      R1,R1,#0x1
   \       0x26   0x6001             STR      R1,[R0, #+0]
   \       0x28   0x2107             MOVS     R1,#+7
   \       0x2A   0x6800             LDR      R0,[R0, #+0]
   \       0x2C   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0x9800             LDR      R0,[SP, #+0]
    200              GPIO_InitStruct.Pull = GPIO_NOPULL;
    201              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    202              GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    203              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0x34   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40020000
   \       0x36   0x9101             STR      R1,[SP, #+4]
   \       0x38   0x9202             STR      R2,[SP, #+8]
   \       0x3A   0x2100             MOVS     R1,#+0
   \       0x3C   0x9103             STR      R1,[SP, #+12]
   \       0x3E   0x2203             MOVS     R2,#+3
   \       0x40   0x2102             MOVS     R1,#+2
   \       0x42   0x9105             STR      R1,[SP, #+20]
   \       0x44   0x9204             STR      R2,[SP, #+16]
   \       0x46   0xA901             ADD      R1,SP,#+4
   \       0x48   0x....'....        BL       HAL_GPIO_Init
    204          
    205            /* USER CODE BEGIN TIM5_MspPostInit 1 */
    206          
    207            /* USER CODE END TIM5_MspPostInit 1 */
    208            }
    209          
    210          }
   \                     ??HAL_TIM_MspPostInit_0: (+1)
   \       0x4C   0xB006             ADD      SP,SP,#+24
   \       0x4E   0xBD10             POP      {R4,PC}          ;; return
    211          /**
    212          * @brief TIM_Base MSP De-Initialization
    213          * This function freeze the hardware resources used in this example
    214          * @param htim_base: TIM_Base handle pointer
    215          * @retval None
    216          */

   \                                 In section .text, align 2, keep-with-next
    217          void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
    218          {
   \                     HAL_TIM_Base_MspDeInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    219            if(htim_base->Instance==TIM2)
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40020000
   \        0x6   0x....             LDR.N    R2,??DataTable3  ;; 0x40023840
   \        0x8   0xF1B1 0x4F80      CMP      R1,#+1073741824
   \        0xC   0xD108             BNE.N    ??HAL_TIM_Base_MspDeInit_0
    220            {
    221            /* USER CODE BEGIN TIM2_MspDeInit 0 */
    222          
    223            /* USER CODE END TIM2_MspDeInit 0 */
    224              /* Peripheral clock disable */
    225              __HAL_RCC_TIM2_CLK_DISABLE();
   \        0xE   0x6811             LDR      R1,[R2, #+0]
   \       0x10   0x0849             LSRS     R1,R1,#+1
   \       0x12   0x0049             LSLS     R1,R1,#+1
   \       0x14   0x6011             STR      R1,[R2, #+0]
    226            
    227              /**TIM2 GPIO Configuration    
    228              PA5     ------> TIM2_CH1 
    229              */
    230              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
   \       0x16   0x2120             MOVS     R1,#+32
   \       0x18   0x....'....        BL       HAL_GPIO_DeInit
    231          
    232              /* TIM2 interrupt DeInit */
    233              HAL_NVIC_DisableIRQ(TIM2_IRQn);
   \       0x1C   0x201C             MOVS     R0,#+28
   \       0x1E   0xE018             B.N      ??HAL_TIM_Base_MspDeInit_1
    234            /* USER CODE BEGIN TIM2_MspDeInit 1 */
    235          
    236            /* USER CODE END TIM2_MspDeInit 1 */
    237            }
    238            else if(htim_base->Instance==TIM3)
   \                     ??HAL_TIM_Base_MspDeInit_0: (+1)
   \       0x20   0x....             LDR.N    R3,??DataTable3_3  ;; 0x40000400
   \       0x22   0x4299             CMP      R1,R3
   \       0x24   0xD108             BNE.N    ??HAL_TIM_Base_MspDeInit_2
    239            {
    240            /* USER CODE BEGIN TIM3_MspDeInit 0 */
    241          
    242            /* USER CODE END TIM3_MspDeInit 0 */
    243              /* Peripheral clock disable */
    244              __HAL_RCC_TIM3_CLK_DISABLE();
   \       0x26   0x6811             LDR      R1,[R2, #+0]
   \       0x28   0xF021 0x0102      BIC      R1,R1,#0x2
   \       0x2C   0x6011             STR      R1,[R2, #+0]
    245            
    246              /**TIM3 GPIO Configuration    
    247              PA6     ------> TIM3_CH1 
    248              */
    249              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
   \       0x2E   0x2140             MOVS     R1,#+64
   \       0x30   0x....'....        BL       HAL_GPIO_DeInit
    250          
    251              /* TIM3 interrupt DeInit */
    252              HAL_NVIC_DisableIRQ(TIM3_IRQn);
   \       0x34   0x201D             MOVS     R0,#+29
   \       0x36   0xE00C             B.N      ??HAL_TIM_Base_MspDeInit_1
    253            /* USER CODE BEGIN TIM3_MspDeInit 1 */
    254          
    255            /* USER CODE END TIM3_MspDeInit 1 */
    256            }
    257            else if(htim_base->Instance==TIM4)
   \                     ??HAL_TIM_Base_MspDeInit_2: (+1)
   \       0x38   0x....             LDR.N    R0,??DataTable3_4  ;; 0x40000800
   \       0x3A   0x4281             CMP      R1,R0
   \       0x3C   0xD10D             BNE.N    ??HAL_TIM_Base_MspDeInit_3
    258            {
    259            /* USER CODE BEGIN TIM4_MspDeInit 0 */
    260          
    261            /* USER CODE END TIM4_MspDeInit 0 */
    262              /* Peripheral clock disable */
    263              __HAL_RCC_TIM4_CLK_DISABLE();
   \       0x3E   0x6811             LDR      R1,[R2, #+0]
    264            
    265              /**TIM4 GPIO Configuration    
    266              PD12     ------> TIM4_CH1 
    267              */
    268              HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
   \       0x40   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40020c00
   \       0x42   0xF021 0x0104      BIC      R1,R1,#0x4
   \       0x46   0x6011             STR      R1,[R2, #+0]
   \       0x48   0xF44F 0x5180      MOV      R1,#+4096
   \       0x4C   0x....'....        BL       HAL_GPIO_DeInit
    269          
    270              /* TIM4 interrupt DeInit */
    271              HAL_NVIC_DisableIRQ(TIM4_IRQn);
   \       0x50   0x201E             MOVS     R0,#+30
   \                     ??HAL_TIM_Base_MspDeInit_1: (+1)
   \       0x52   0xE8BD 0x4002      POP      {R1,LR}
   \       0x56   0x....'....        B.W      HAL_NVIC_DisableIRQ
    272            /* USER CODE BEGIN TIM4_MspDeInit 1 */
    273          
    274            /* USER CODE END TIM4_MspDeInit 1 */
    275            }
    276            else if(htim_base->Instance==TIM5)
   \                     ??HAL_TIM_Base_MspDeInit_3: (+1)
   \       0x5A   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40000c00
   \       0x5C   0x4281             CMP      R1,R0
   \       0x5E   0xD103             BNE.N    ??HAL_TIM_Base_MspDeInit_4
    277            {
    278            /* USER CODE BEGIN TIM5_MspDeInit 0 */
    279          
    280            /* USER CODE END TIM5_MspDeInit 0 */
    281              /* Peripheral clock disable */
    282              __HAL_RCC_TIM5_CLK_DISABLE();
   \       0x60   0x6811             LDR      R1,[R2, #+0]
   \       0x62   0xF021 0x0108      BIC      R1,R1,#0x8
   \       0x66   0x6011             STR      R1,[R2, #+0]
    283            /* USER CODE BEGIN TIM5_MspDeInit 1 */
    284          
    285            /* USER CODE END TIM5_MspDeInit 1 */
    286            }
    287          
    288          }
   \                     ??HAL_TIM_Base_MspDeInit_4: (+1)
   \       0x68   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x4000'0C00        DC32     0x40000c00
    289          
    290          /* USER CODE BEGIN 1 */
    291          
    292          /* USER CODE END 1 */
    293          
    294          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   HAL_MspInit
       8   HAL_TIM_Base_MspDeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
      32   HAL_TIM_Base_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> memset
      32   HAL_TIM_MspPostInit
        32   -> HAL_GPIO_Init
        32   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      32  ?Subroutine0
      10  ?Subroutine1
      52  HAL_MspInit
     106  HAL_TIM_Base_MspDeInit
     266  HAL_TIM_Base_MspInit
      80  HAL_TIM_MspPostInit

 
 574 bytes in section .text
 
 574 bytes of CODE memory

Errors: none
Warnings: none
