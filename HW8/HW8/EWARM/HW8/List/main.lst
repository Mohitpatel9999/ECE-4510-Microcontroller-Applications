###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         02/Apr/2020  13:06:12
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EWAB25.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\List" -o "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\Obj" --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I "C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\EWARM/../Inc\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW8\HW8\EWARM\HW8\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\EWARM\HW8\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\HW8\HW8\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          TIM_HandleTypeDef htim2;
   \                     htim2:
   \        0x0                      DS8 64
     45          TIM_HandleTypeDef htim3;
   \                     htim3:
   \       0x40                      DS8 64
     46          TIM_HandleTypeDef htim4;
   \                     htim4:
   \       0x80                      DS8 64
     47          TIM_HandleTypeDef htim5;
   \                     htim5:
   \       0xC0                      DS8 64
     48          
     49          /* USER CODE BEGIN PV */
     50          extern uint64_t input_cm_PL,input_cm_PR,input_cm_PS;
     51          /* USER CODE END PV */
     52          
     53          /* Private function prototypes -----------------------------------------------*/
     54          void SystemClock_Config(void);
     55          static void MX_GPIO_Init(void);
     56          static void MX_TIM2_Init(void);
     57          static void MX_TIM3_Init(void);
     58          static void MX_TIM4_Init(void);
     59          static void MX_TIM5_Init(void);
     60          /* USER CODE BEGIN PFP */
     61          
     62          /* USER CODE END PFP */
     63          
     64          /* Private user code ---------------------------------------------------------*/
     65          /* USER CODE BEGIN 0 */
     66          
     67          /* USER CODE END 0 */
     68          
     69          /**
     70            * @brief  The application entry point.
     71            * @retval int
     72            */

   \                                 In section .text, align 2, keep-with-next
     73          int main(void)
     74          {
   \                     main: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB08D             SUB      SP,SP,#+52
     75            /* USER CODE BEGIN 1 */
     76          
     77            /* USER CODE END 1 */
     78            
     79          
     80            /* MCU Configuration--------------------------------------------------------*/
     81          
     82            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     83            HAL_Init();
   \        0x6   0x....'....        BL       HAL_Init
     84          
     85            /* USER CODE BEGIN Init */
     86          
     87            /* USER CODE END Init */
     88          
     89            /* Configure the system clock */
     90            SystemClock_Config();
   \        0xA   0x....'....        BL       SystemClock_Config
     91          
     92            /* USER CODE BEGIN SysInit */
     93          
     94            /* USER CODE END SysInit */
     95          
     96            /* Initialize all configured peripherals */
     97            MX_GPIO_Init();
   \        0xE   0x....'....        BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_22: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF44F 0x5680      MOV      R6,#+4096
   \       0x1A   0x....             LDR.N    R0,??DataTable1  ;; 0x40023830
   \       0x1C   0x....'....        LDR.W    R8,??DataTable1_1  ;; 0x40021400
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0x....             LDR.N    R5,??DataTable1_2
   \       0x24   0xF041 0x0120      ORR      R1,R1,#0x20
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0xF64F 0x74FF      MOVW     R4,#+65535
   \       0x2E   0x6802             LDR      R2,[R0, #+0]
   \       0x30   0xF002 0x0220      AND      R2,R2,#0x20
   \       0x34   0x9200             STR      R2,[SP, #+0]
   \       0x36   0x2200             MOVS     R2,#+0
   \       0x38   0x9900             LDR      R1,[SP, #+0]
   \       0x3A   0x9200             STR      R2,[SP, #+0]
   \       0x3C   0x6803             LDR      R3,[R0, #+0]
   \       0x3E   0xF043 0x0380      ORR      R3,R3,#0x80
   \       0x42   0x6003             STR      R3,[R0, #+0]
   \       0x44   0x6801             LDR      R1,[R0, #+0]
   \       0x46   0xF001 0x0180      AND      R1,R1,#0x80
   \       0x4A   0x9100             STR      R1,[SP, #+0]
   \       0x4C   0x9900             LDR      R1,[SP, #+0]
   \       0x4E   0x9200             STR      R2,[SP, #+0]
   \       0x50   0x6803             LDR      R3,[R0, #+0]
   \       0x52   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x56   0x6003             STR      R3,[R0, #+0]
   \       0x58   0x6801             LDR      R1,[R0, #+0]
   \       0x5A   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x5E   0x9100             STR      R1,[SP, #+0]
   \       0x60   0x9900             LDR      R1,[SP, #+0]
   \       0x62   0x9200             STR      R2,[SP, #+0]
   \       0x64   0x210E             MOVS     R1,#+14
   \       0x66   0x6803             LDR      R3,[R0, #+0]
   \       0x68   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0x6C   0x6003             STR      R3,[R0, #+0]
   \       0x6E   0x6800             LDR      R0,[R0, #+0]
   \       0x70   0xF000 0x0008      AND      R0,R0,#0x8
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0x9800             LDR      R0,[SP, #+0]
   \       0x78   0x....'....        BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_32: (+1)
   \       0x7C   0x210E             MOVS     R1,#+14
   \       0x7E   0x9101             STR      R1,[SP, #+4]
   \       0x80   0x2201             MOVS     R2,#+1
   \       0x82   0x9202             STR      R2,[SP, #+8]
   \       0x84   0x2100             MOVS     R1,#+0
   \       0x86   0x9103             STR      R1,[SP, #+12]
   \       0x88   0x2203             MOVS     R2,#+3
   \       0x8A   0x9204             STR      R2,[SP, #+16]
   \       0x8C   0xA901             ADD      R1,SP,#+4
   \       0x8E   0x4640             MOV      R0,R8
   \       0x90   0x....'....        BL       HAL_GPIO_Init
     98            MX_TIM2_Init();
   \       0x94   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x98   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x9C   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0xA0   0xF04F 0x4080      MOV      R0,#+1073741824
   \       0xA4   0x6028             STR      R0,[R5, #+0]
   \       0xA6   0x2100             MOVS     R1,#+0
   \       0xA8   0xF04F 0x30FF      MOV      R0,#-1
   \       0xAC   0x60E8             STR      R0,[R5, #+12]
   \       0xAE   0x6069             STR      R1,[R5, #+4]
   \       0xB0   0x60A9             STR      R1,[R5, #+8]
   \       0xB2   0x6129             STR      R1,[R5, #+16]
   \       0xB4   0x61A9             STR      R1,[R5, #+24]
   \       0xB6   0x4628             MOV      R0,R5
   \       0xB8   0x....'....        BL       HAL_TIM_Base_Init
   \       0xBC   0x9606             STR      R6,[SP, #+24]
   \       0xBE   0xA906             ADD      R1,SP,#+24
   \       0xC0   0x4628             MOV      R0,R5
   \       0xC2   0x....'....        BL       HAL_TIM_ConfigClockSource
   \       0xC6   0x4628             MOV      R0,R5
   \       0xC8   0x....'....        BL       HAL_TIM_IC_Init
   \       0xCC   0x....'....        BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_26: (+1)
   \       0xD0   0x4628             MOV      R0,R5
   \       0xD2   0x....'....        BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_41: (+1)
   \       0xD6   0x....'....        BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_19: (+1)
   \       0xDA   0x4628             MOV      R0,R5
   \       0xDC   0x....'....        BL       HAL_TIM_IC_ConfigChannel
     99            MX_TIM3_Init();
   \       0xE0   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0xE4   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0xE8   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_13: (+1)
   \       0xEC   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40000400
   \       0xEE   0x6428             STR      R0,[R5, #+64]
   \       0xF0   0x2100             MOVS     R1,#+0
   \       0xF2   0x6469             STR      R1,[R5, #+68]
   \       0xF4   0x64A9             STR      R1,[R5, #+72]
   \       0xF6   0x64EC             STR      R4,[R5, #+76]
   \       0xF8   0x6529             STR      R1,[R5, #+80]
   \       0xFA   0x65A9             STR      R1,[R5, #+88]
   \       0xFC   0xF105 0x0040      ADD      R0,R5,#+64
   \      0x100   0x....'....        BL       HAL_TIM_Base_Init
   \      0x104   0x9606             STR      R6,[SP, #+24]
   \      0x106   0xA906             ADD      R1,SP,#+24
   \      0x108   0xF105 0x0040      ADD      R0,R5,#+64
   \      0x10C   0x....'....        BL       HAL_TIM_ConfigClockSource
   \      0x110   0xF105 0x0040      ADD      R0,R5,#+64
   \      0x114   0x....'....        BL       HAL_TIM_IC_Init
   \      0x118   0x....'....        BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_27: (+1)
   \      0x11C   0xF105 0x0040      ADD      R0,R5,#+64
   \      0x120   0x....'....        BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_40: (+1)
   \      0x124   0x....'....        BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_20: (+1)
   \      0x128   0xF105 0x0040      ADD      R0,R5,#+64
   \      0x12C   0x....'....        BL       HAL_TIM_IC_ConfigChannel
    100            MX_TIM4_Init();
   \      0x130   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_6: (+1)
   \      0x134   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \      0x138   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_14: (+1)
   \      0x13C   0xF105 0x0784      ADD      R7,R5,#+132
   \      0x140   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40000800
   \      0x142   0xF8C5 0x0080      STR      R0,[R5, #+128]
   \      0x146   0x2100             MOVS     R1,#+0
   \      0x148   0x6039             STR      R1,[R7, #+0]
   \      0x14A   0x6079             STR      R1,[R7, #+4]
   \      0x14C   0x60BC             STR      R4,[R7, #+8]
   \      0x14E   0x60F9             STR      R1,[R7, #+12]
   \      0x150   0x6179             STR      R1,[R7, #+20]
   \      0x152   0xF105 0x0480      ADD      R4,R5,#+128
   \      0x156   0x4620             MOV      R0,R4
   \      0x158   0x....'....        BL       HAL_TIM_Base_Init
   \      0x15C   0x9606             STR      R6,[SP, #+24]
   \      0x15E   0xA906             ADD      R1,SP,#+24
   \      0x160   0x4620             MOV      R0,R4
   \      0x162   0x....'....        BL       HAL_TIM_ConfigClockSource
   \      0x166   0x4620             MOV      R0,R4
   \      0x168   0x....'....        BL       HAL_TIM_IC_Init
   \      0x16C   0x....'....        BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_28: (+1)
   \      0x170   0x4620             MOV      R0,R4
   \      0x172   0x....'....        BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_39: (+1)
   \      0x176   0x....'....        BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_21: (+1)
   \      0x17A   0x4620             MOV      R0,R4
   \      0x17C   0x....'....        BL       HAL_TIM_IC_ConfigChannel
    101            MX_TIM5_Init();
   \      0x180   0x2210             MOVS     R2,#+16
   \      0x182   0x2100             MOVS     R1,#+0
   \      0x184   0xA809             ADD      R0,SP,#+36
   \      0x186   0x....'....        BL       memset
   \      0x18A   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11: (+1)
   \      0x18E   0x221C             MOVS     R2,#+28
   \      0x190   0x....'....        BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_15: (+1)
   \      0x194   0x....             LDR.N    R0,??DataTable1_5  ;; 0x40000c00
   \      0x196   0x63F8             STR      R0,[R7, #+60]
   \      0x198   0x2100             MOVS     R1,#+0
   \      0x19A   0x6439             STR      R1,[R7, #+64]
   \      0x19C   0x2000             MOVS     R0,#+0
   \      0x19E   0x....             LDR.N    R1,??DataTable1_6  ;; 0x467edf
   \      0x1A0   0x6478             STR      R0,[R7, #+68]
   \      0x1A2   0x64B9             STR      R1,[R7, #+72]
   \      0x1A4   0x64F8             STR      R0,[R7, #+76]
   \      0x1A6   0x6578             STR      R0,[R7, #+84]
   \      0x1A8   0xF105 0x07C0      ADD      R7,R5,#+192
   \      0x1AC   0x4638             MOV      R0,R7
   \      0x1AE   0x....'....        BL       HAL_TIM_Base_Init
   \      0x1B2   0x9609             STR      R6,[SP, #+36]
   \      0x1B4   0xA909             ADD      R1,SP,#+36
   \      0x1B6   0x4638             MOV      R0,R7
   \      0x1B8   0x....'....        BL       HAL_TIM_ConfigClockSource
   \      0x1BC   0x4638             MOV      R0,R7
   \      0x1BE   0x....'....        BL       HAL_TIM_OC_Init
   \      0x1C2   0x....'....        BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_29: (+1)
   \      0x1C6   0x4638             MOV      R0,R7
   \      0x1C8   0x....'....        BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_38: (+1)
   \      0x1CC   0xF640 0x0233      MOVW     R2,#+2099
   \      0x1D0   0x9203             STR      R2,[SP, #+12]
   \      0x1D2   0x2100             MOVS     R1,#+0
   \      0x1D4   0x9102             STR      R1,[SP, #+8]
   \      0x1D6   0x9104             STR      R1,[SP, #+16]
   \      0x1D8   0x2200             MOVS     R2,#+0
   \      0x1DA   0x9206             STR      R2,[SP, #+24]
   \      0x1DC   0x....'....        BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_37: (+1)
   \      0x1E0   0x2204             MOVS     R2,#+4
   \      0x1E2   0x....'....        BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_36: (+1)
   \      0x1E6   0x2208             MOVS     R2,#+8
   \      0x1E8   0x....'....        BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_35: (+1)
   \      0x1EC   0x4638             MOV      R0,R7
   \      0x1EE   0x....'....        BL       HAL_TIM_MspPostInit
    102            /* USER CODE BEGIN 2 */
    103            HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
   \      0x1F2   0x2100             MOVS     R1,#+0
   \      0x1F4   0x4628             MOV      R0,R5
   \      0x1F6   0x....'....        BL       HAL_TIM_IC_Start
    104            HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
   \      0x1FA   0x2100             MOVS     R1,#+0
   \      0x1FC   0xF105 0x0040      ADD      R0,R5,#+64
   \      0x200   0x....'....        BL       HAL_TIM_IC_Start
    105            HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
   \      0x204   0x2100             MOVS     R1,#+0
   \      0x206   0x4620             MOV      R0,R4
   \      0x208   0x....'....        BL       HAL_TIM_IC_Start
    106            HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
   \      0x20C   0x2100             MOVS     R1,#+0
   \      0x20E   0x4638             MOV      R0,R7
   \      0x210   0x....'....        BL       HAL_TIM_PWM_Start
    107            HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
   \      0x214   0x2104             MOVS     R1,#+4
   \      0x216   0x4638             MOV      R0,R7
   \      0x218   0x....'....        BL       HAL_TIM_PWM_Start
    108            HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
   \      0x21C   0x2108             MOVS     R1,#+8
   \      0x21E   0x4638             MOV      R0,R7
   \      0x220   0x....'....        BL       HAL_TIM_PWM_Start
    109            
    110            // intialization
    111            HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET); // DR is low
   \      0x224   0x....'....        BL       ?Subroutine0
    112            HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET); // DL is low
   \                     ??CrossCallReturnLabel_3: (+1)
   \      0x228   0x....'....        BL       ?Subroutine4
    113            HAL_GPIO_WritePin(GPIOF,GPIO_PIN_3,GPIO_PIN_SET);    // DS is high 
   \                     ??CrossCallReturnLabel_18: (+1)
   \      0x22C   0x....'....        BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_34: (+1)
   \      0x230   0x....             LDR.N    R5,??DataTable1_7
   \      0x232   0x....             LDR.N    R6,??DataTable1_8
   \      0x234   0x....             LDR.N    R7,??DataTable1_9
   \      0x236   0xE013             B.N      ??CrossCallReturnLabel_33
    114            /* USER CODE END 2 */
    115           
    116           
    117          
    118            /* Infinite loop */
    119            /* USER CODE BEGIN WHILE */
    120            while (1)
    121            {
    122              if (input_cm_PL <= 50.0 && !input_cm_PS<= 50.0)                     // if about to hit the left wall and not close to the front wall then
    123              {
    124              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_SET);                   // DR is high
   \                     ??main_0: (+1)
   \      0x238   0x2201             MOVS     R2,#+1
   \      0x23A   0x2102             MOVS     R1,#+2
   \      0x23C   0x....'....        BL       ??Subroutine9_0
    125              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET);                  // DL is low
   \                     ??CrossCallReturnLabel_31: (+1)
   \      0x240   0x2200             MOVS     R2,#+0
   \                     ??main_1: (+1)
   \      0x242   0x2104             MOVS     R1,#+4
   \      0x244   0x....'....        BL       ??Subroutine9_0
    126              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_3,GPIO_PIN_RESET);                 // DS is low  
   \                     ??CrossCallReturnLabel_30: (+1)
   \      0x248   0x....'....        BL       ?Subroutine7
    127              
    128              HAL_Delay(2000);                                                    // 2 second delay to have DR high for 2 secodns and after make DS high
   \                     ??CrossCallReturnLabel_25: (+1)
   \      0x24C   0xF44F 0x60FA      MOV      R0,#+2000
   \      0x250   0x....'....        BL       HAL_Delay
    129              
    130              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET);                 // DR is low
   \      0x254   0x....'....        BL       ?Subroutine0
    131              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET);                 // DL is low
   \                     ??CrossCallReturnLabel_2: (+1)
   \      0x258   0x....'....        BL       ?Subroutine4
    132              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_3,GPIO_PIN_SET);                    // DS is high 
   \                     ??CrossCallReturnLabel_17: (+1)
   \      0x25C   0x....'....        BL       ?Subroutine9
    133              }
   \                     ??CrossCallReturnLabel_33: (+1)
   \      0x260   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \      0x264   0x2900             CMP      R1,#+0
   \      0x266   0xD801             BHI.N    ??main_2
   \      0x268   0x2833             CMP      R0,#+51
   \      0x26A   0xD3E5             BCC.N    ??main_0
    134              
    135              else if (input_cm_PR <= 50.0 && !input_cm_PS<= 50.0)                // if about to hit the right wall and not close to the front wall then
   \                     ??main_2: (+1)
   \      0x26C   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \      0x270   0x2B00             CMP      R3,#+0
   \      0x272   0xBF98             IT       LS
   \      0x274   0x2A33             CMPLS    R2,#+51
   \      0x276   0xD203             BCS.N    ??main_3
    136              {
    137              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET);                 // DR is low
   \      0x278   0x....'....        BL       ?Subroutine0
    138              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_SET);                   // DL is high
   \                     ??CrossCallReturnLabel_1: (+1)
   \      0x27C   0x2201             MOVS     R2,#+1
   \      0x27E   0xE7E0             B.N      ??main_1
    139              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_3,GPIO_PIN_RESET);                  // DS is low  
    140              
    141              HAL_Delay(2000);                                                    // 2 second delay to have DL high for 2 secodns and after make DS high
    142              
    143              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET);                 // DR is low
    144              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET);                 // DL is low
    145              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_3,GPIO_PIN_SET);                   // DS is high 
    146              }
    147              
    148              else if (input_cm_PS<= 50.0)                                       // if about to reach the end desitination
   \                     ??main_3: (+1)
   \      0x280   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \      0x284   0x2900             CMP      R1,#+0
   \      0x286   0xD8FB             BHI.N    ??main_3
   \      0x288   0x2833             CMP      R0,#+51
   \      0x28A   0xD2F9             BCS.N    ??main_3
    149              {
    150              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_1,GPIO_PIN_RESET);                 // DR is low
   \      0x28C   0x....'....        BL       ?Subroutine0
    151              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET);                 // DL is low
   \                     ??CrossCallReturnLabel_0: (+1)
   \      0x290   0x....'....        BL       ?Subroutine4
    152              HAL_GPIO_WritePin(GPIOF,GPIO_PIN_3,GPIO_PIN_RESET);                 // DS is high 
   \                     ??CrossCallReturnLabel_16: (+1)
   \      0x294   0x....'....        BL       ?Subroutine7
    153              break;                                                             // once all drive controls are rested, break out
    154              }
    155              
    156              /* USER CODE END WHILE */
    157          
    158              /* USER CODE BEGIN 3 */
    159            }
    160            /* USER CODE END 3 */
    161          }
   \                     ??CrossCallReturnLabel_24: (+1)
   \      0x298   0x2000             MOVS     R0,#+0
   \      0x29A   0xB00E             ADD      SP,SP,#+56
   \      0x29C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0x2108             MOVS     R1,#+8
   \                     ??Subroutine9_0: (+1)
   \        0x4   0x4640             MOV      R0,R8
   \        0x6   0x....'....        B.W      HAL_GPIO_WritePin

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2108             MOVS     R1,#+8
   \        0x4   0x4640             MOV      R0,R8
   \        0x6   0x....'....        B.W      HAL_GPIO_WritePin

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2104             MOVS     R1,#+4
   \        0x4   0x4640             MOV      R0,R8
   \        0x6   0x....'....        B.W      HAL_GPIO_WritePin

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2102             MOVS     R1,#+2
   \        0x4   0x4640             MOV      R0,R8
   \        0x6   0x....'....        B.W      HAL_GPIO_WritePin
    162          
    163          /**
    164            * @brief System Clock Configuration
    165            * @retval None
    166            */

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2210             MOVS     R2,#+16
   \                     ??Subroutine1_0: (+1)
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA806             ADD      R0,SP,#+24
   \        0x6   0x....'....        B.W      memset

   \                                 In section .text, align 2, keep-with-next
    167          void SystemClock_Config(void)
    168          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x....'....        BL       ??Subroutine1_0
   \                     ??CrossCallReturnLabel_7: (+1)
   \        0xA   0x....'....        BL       ?Subroutine6
    169            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    170            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    171          
    172            /** Configure the main internal regulator output voltage 
    173            */
    174            __HAL_RCC_PWR_CLK_ENABLE();
   \                     ??CrossCallReturnLabel_23: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x9000             STR      R0,[SP, #+0]
    175            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
    176            /** Initializes the CPU, AHB and APB busses clocks 
    177            */
    178            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    179            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x12   0xF44F 0x3380      MOV      R3,#+65536
   \       0x16   0x....             LDR.N    R0,??DataTable1_10  ;; 0x40023840
   \       0x18   0x6801             LDR      R1,[R0, #+0]
   \       0x1A   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x1E   0x6001             STR      R1,[R0, #+0]
   \       0x20   0x2100             MOVS     R1,#+0
   \       0x22   0x6800             LDR      R0,[R0, #+0]
   \       0x24   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0x9800             LDR      R0,[SP, #+0]
   \       0x2C   0x....             LDR.N    R0,??DataTable1_11  ;; 0x40007000
   \       0x2E   0x9100             STR      R1,[SP, #+0]
   \       0x30   0x6802             LDR      R2,[R0, #+0]
   \       0x32   0xF442 0x4240      ORR      R2,R2,#0xC000
   \       0x36   0x6002             STR      R2,[R0, #+0]
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0x6800             LDR      R0,[R0, #+0]
   \       0x3C   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x40   0x9000             STR      R0,[SP, #+0]
    180            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    181            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    182            RCC_OscInitStruct.PLL.PLLM = 4;
    183            RCC_OscInitStruct.PLL.PLLN = 168;
    184            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    185            RCC_OscInitStruct.PLL.PLLQ = 4;
    186            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x42   0xA806             ADD      R0,SP,#+24
   \       0x44   0x9900             LDR      R1,[SP, #+0]
   \       0x46   0x9206             STR      R2,[SP, #+24]
   \       0x48   0x2102             MOVS     R1,#+2
   \       0x4A   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x4E   0x910C             STR      R1,[SP, #+48]
   \       0x50   0x920D             STR      R2,[SP, #+52]
   \       0x52   0x2104             MOVS     R1,#+4
   \       0x54   0x22A8             MOVS     R2,#+168
   \       0x56   0x910E             STR      R1,[SP, #+56]
   \       0x58   0x920F             STR      R2,[SP, #+60]
   \       0x5A   0x2102             MOVS     R1,#+2
   \       0x5C   0x2204             MOVS     R2,#+4
   \       0x5E   0x9307             STR      R3,[SP, #+28]
   \       0x60   0x9110             STR      R1,[SP, #+64]
   \       0x62   0x9211             STR      R2,[SP, #+68]
   \       0x64   0x....'....        BL       HAL_RCC_OscConfig
    187            {
    188              Error_Handler();
    189            }
    190            /** Initializes the CPU, AHB and APB busses clocks 
    191            */
    192            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    193                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    194            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x68   0x2102             MOVS     R1,#+2
   \       0x6A   0x9102             STR      R1,[SP, #+8]
    195            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x6C   0x2200             MOVS     R2,#+0
   \       0x6E   0x9203             STR      R2,[SP, #+12]
   \       0x70   0x200F             MOVS     R0,#+15
    196            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x72   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x76   0x9001             STR      R0,[SP, #+4]
   \       0x78   0x9104             STR      R1,[SP, #+16]
    197            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x7A   0xF44F 0x5280      MOV      R2,#+4096
   \       0x7E   0x9205             STR      R2,[SP, #+20]
    198          
    199            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
   \       0x80   0x2105             MOVS     R1,#+5
   \       0x82   0xA801             ADD      R0,SP,#+4
   \       0x84   0x....'....        BL       HAL_RCC_ClockConfig
    200            {
    201              Error_Handler();
    202            }
    203          }
   \       0x88   0xB013             ADD      SP,SP,#+76
   \       0x8A   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \        0x0   0x2214             MOVS     R2,#+20
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA801             ADD      R0,SP,#+4
   \        0x6   0x....'....        B.W      memset
    204          
    205          /**
    206            * @brief TIM2 Initialization Function
    207            * @param None
    208            * @retval None
    209            */
    210          static void MX_TIM2_Init(void)
    211          {
    212          
    213            /* USER CODE BEGIN TIM2_Init 0 */
    214          
    215            /* USER CODE END TIM2_Init 0 */
    216          
    217            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    218            TIM_MasterConfigTypeDef sMasterConfig = {0};
    219            TIM_IC_InitTypeDef sConfigIC = {0};
    220          
    221            /* USER CODE BEGIN TIM2_Init 1 */
    222          
    223            /* USER CODE END TIM2_Init 1 */
    224            htim2.Instance = TIM2;
    225            htim2.Init.Prescaler = 0;
    226            htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    227            htim2.Init.Period = 0xffffffff;
    228            htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    229            htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    230            if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    231            {
    232              Error_Handler();
    233            }
    234            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    235            if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
    236            {
    237              Error_Handler();
    238            }
    239            if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
    240            {
    241              Error_Handler();
    242            }
    243            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    244            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    245            if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    246            {
    247              Error_Handler();
    248            }
    249            sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
    250            sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
    251            sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
    252            sConfigIC.ICFilter = 0;
    253            if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
    254            {
    255              Error_Handler();
    256            }
    257            /* USER CODE BEGIN TIM2_Init 2 */
    258          
    259            /* USER CODE END TIM2_Init 2 */
    260          
    261          }
    262          
    263          /**
    264            * @brief TIM3 Initialization Function
    265            * @param None
    266            * @retval None
    267            */
    268          static void MX_TIM3_Init(void)
    269          {
    270          
    271            /* USER CODE BEGIN TIM3_Init 0 */
    272          
    273            /* USER CODE END TIM3_Init 0 */
    274          
    275            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    276            TIM_MasterConfigTypeDef sMasterConfig = {0};
    277            TIM_IC_InitTypeDef sConfigIC = {0};
    278          
    279            /* USER CODE BEGIN TIM3_Init 1 */
    280          
    281            /* USER CODE END TIM3_Init 1 */
    282            htim3.Instance = TIM3;
    283            htim3.Init.Prescaler = 0;
    284            htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
    285            htim3.Init.Period = 0xffff;
    286            htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    287            htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    288            if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
    289            {
    290              Error_Handler();
    291            }
    292            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    293            if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
    294            {
    295              Error_Handler();
    296            }
    297            if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
    298            {
    299              Error_Handler();
    300            }
    301            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    302            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    303            if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
    304            {
    305              Error_Handler();
    306            }
    307            sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
    308            sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
    309            sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
    310            sConfigIC.ICFilter = 0;
    311            if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
    312            {
    313              Error_Handler();
    314            }
    315            /* USER CODE BEGIN TIM3_Init 2 */
    316          
    317            /* USER CODE END TIM3_Init 2 */
    318          
    319          }
    320          
    321          /**
    322            * @brief TIM4 Initialization Function
    323            * @param None
    324            * @retval None
    325            */
    326          static void MX_TIM4_Init(void)
    327          {
    328          
    329            /* USER CODE BEGIN TIM4_Init 0 */
    330          
    331            /* USER CODE END TIM4_Init 0 */
    332          
    333            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    334            TIM_MasterConfigTypeDef sMasterConfig = {0};
    335            TIM_IC_InitTypeDef sConfigIC = {0};
    336          
    337            /* USER CODE BEGIN TIM4_Init 1 */
    338          
    339            /* USER CODE END TIM4_Init 1 */
    340            htim4.Instance = TIM4;
    341            htim4.Init.Prescaler = 0;
    342            htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
    343            htim4.Init.Period = 0xffff;
    344            htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    345            htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    346            if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
    347            {
    348              Error_Handler();
    349            }
    350            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    351            if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
    352            {
    353              Error_Handler();
    354            }
    355            if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
    356            {
    357              Error_Handler();
    358            }
    359            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    360            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    361            if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
    362            {
    363              Error_Handler();
    364            }
    365            sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
    366            sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
    367            sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
    368            sConfigIC.ICFilter = 0;
    369            if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
    370            {
    371              Error_Handler();
    372            }
    373            /* USER CODE BEGIN TIM4_Init 2 */
    374          
    375            /* USER CODE END TIM4_Init 2 */
    376          
    377          }
    378          
    379          /**
    380            * @brief TIM5 Initialization Function
    381            * @param None
    382            * @retval None
    383            */
    384          static void MX_TIM5_Init(void)
    385          {
    386          
    387            /* USER CODE BEGIN TIM5_Init 0 */
    388          
    389            /* USER CODE END TIM5_Init 0 */
    390          
    391            TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    392            TIM_MasterConfigTypeDef sMasterConfig = {0};
    393            TIM_OC_InitTypeDef sConfigOC = {0};
    394          
    395            /* USER CODE BEGIN TIM5_Init 1 */
    396          
    397            /* USER CODE END TIM5_Init 1 */
    398            htim5.Instance = TIM5;
    399            htim5.Init.Prescaler = 0;
    400            htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
    401            htim5.Init.Period = 4620000-1;
    402            htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    403            htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    404            if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
    405            {
    406              Error_Handler();
    407            }
    408            sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    409            if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
    410            {
    411              Error_Handler();
    412            }
    413            if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
    414            {
    415              Error_Handler();
    416            }
    417            sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    418            sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    419            if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
    420            {
    421              Error_Handler();
    422            }
    423            sConfigOC.OCMode = TIM_OCMODE_TIMING;
    424            sConfigOC.Pulse = 2100-1;
    425            sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    426            sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    427            if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
    428            {
    429              Error_Handler();
    430            }
    431            if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    432            {
    433              Error_Handler();
    434            }
    435            if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
    436            {
    437              Error_Handler();
    438            }
    439            /* USER CODE BEGIN TIM5_Init 2 */
    440          
    441            /* USER CODE END TIM5_Init 2 */
    442            HAL_TIM_MspPostInit(&htim5);
    443          
    444          }
    445          
    446          /**
    447            * @brief GPIO Initialization Function
    448            * @param None
    449            * @retval None
    450            */
    451          static void MX_GPIO_Init(void)
    452          {
    453            GPIO_InitTypeDef GPIO_InitStruct = {0};
    454          
    455            /* GPIO Ports Clock Enable */
    456            __HAL_RCC_GPIOF_CLK_ENABLE();
    457            __HAL_RCC_GPIOH_CLK_ENABLE();
    458            __HAL_RCC_GPIOA_CLK_ENABLE();
    459            __HAL_RCC_GPIOD_CLK_ENABLE();
    460          
    461            /*Configure GPIO pin Output Level */
    462            HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
    463          
    464            /*Configure GPIO pins : PF1 PF2 PF3 */
    465            GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    466            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    467            GPIO_InitStruct.Pull = GPIO_NOPULL;
    468            GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    469            HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
    470          
    471          }
    472          
    473          /* USER CODE BEGIN 4 */
    474          
    475          /* USER CODE END 4 */
    476          
    477          /**
    478            * @brief  This function is executed in case of error occurrence.
    479            * @retval None
    480            */

   \                                 In section .text, align 2, keep-with-next
    481          void Error_Handler(void)
    482          {
    483            /* USER CODE BEGIN Error_Handler_Debug */
    484            /* User can add his own implementation to report the HAL error return state */
    485          
    486            /* USER CODE END Error_Handler_Debug */
    487          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \        0x0   0x4669             MOV      R1,SP
   \        0x2   0x....'....        B.W      HAL_TIMEx_MasterConfigSynchronization

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \        0x0   0xA902             ADD      R1,SP,#+8
   \        0x2   0x4638             MOV      R0,R7
   \        0x4   0x....'....        B.W      HAL_TIM_OC_ConfigChannel

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x9100             STR      R1,[SP, #+0]
   \        0x4   0x9101             STR      R1,[SP, #+4]
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0x210A             MOVS     R1,#+10
   \        0x2   0x9102             STR      R1,[SP, #+8]
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0x9203             STR      R2,[SP, #+12]
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x9104             STR      R1,[SP, #+16]
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x9205             STR      R2,[SP, #+20]
   \       0x10   0xA902             ADD      R1,SP,#+8
   \       0x12   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2210             MOVS     R2,#+16
   \                     ??Subroutine3_0: (+1)
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x....'....        B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2208             MOVS     R2,#+8
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x4668             MOV      R0,SP
   \        0x6   0x....'....        B.W      memset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4002'1400        DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x....'....        DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x4000'0C00        DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x0046'7EDF        DC32     0x467edf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x....'....        DC32     input_cm_PS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x....'....        DC32     input_cm_PR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x....'....        DC32     input_cm_PL

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x4000'7000        DC32     0x40007000
    488          
    489          #ifdef  USE_FULL_ASSERT
    490          /**
    491            * @brief  Reports the name of the source file and the source line number
    492            *         where the assert_param error has occurred.
    493            * @param  file: pointer to the source file name
    494            * @param  line: assert_param error line source number
    495            * @retval None
    496            */
    497          void assert_failed(uint8_t *file, uint32_t line)
    498          { 
    499            /* USER CODE BEGIN 6 */
    500            /* User can add his own implementation to report the file name and line number,
    501               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    502            /* USER CODE END 6 */
    503          }
    504          #endif /* USE_FULL_ASSERT */
    505          
    506          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      80   main
        80   -> HAL_Delay
        80   -> HAL_GPIO_Init
        80   -> HAL_GPIO_WritePin
        80   -> HAL_Init
        80   -> HAL_TIMEx_MasterConfigSynchronization
        80   -> HAL_TIM_Base_Init
        80   -> HAL_TIM_ConfigClockSource
        80   -> HAL_TIM_IC_ConfigChannel
        80   -> HAL_TIM_IC_Init
        80   -> HAL_TIM_IC_Start
        80   -> HAL_TIM_MspPostInit
        80   -> HAL_TIM_OC_ConfigChannel
        80   -> HAL_TIM_OC_Init
        80   -> HAL_TIM_PWM_Start
        80   -> SystemClock_Config
        80   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      10  ?Subroutine0
      10  ?Subroutine1
       8  ?Subroutine10
       6  ?Subroutine11
      10  ?Subroutine2
      10  ?Subroutine3
      10  ?Subroutine4
      20  ?Subroutine5
      10  ?Subroutine6
      10  ?Subroutine7
       8  ?Subroutine8
      10  ?Subroutine9
       2  Error_Handler
     140  SystemClock_Config
     256  htim2
          htim3
          htim4
          htim5
     672  main

 
 256 bytes in section .bss
 984 bytes in section .text
 
 984 bytes of CODE memory
 256 bytes of DATA memory

Errors: none
Warnings: none
