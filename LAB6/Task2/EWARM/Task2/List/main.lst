###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         17/Feb/2020  18:42:21
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\mohit\Desktop\Microapps projects\LAB6\Task2\Src\main.c
#    Command line             =
#        -f C:\Users\mohit\AppData\Local\Temp\EWFDDF.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\LAB6\Task2\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM\Task2\List" -o
#        "C:\Users\mohit\Desktop\Microapps projects\LAB6\Task2\EWARM\Task2\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM/../Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale                   =  C
#    List file                =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM\Task2\List\main.lst
#    Object file              =
#        C:\Users\mohit\Desktop\Microapps
#        projects\LAB6\Task2\EWARM\Task2\Obj\main.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#      __iar_require _Printf     
#      __size_limit           =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\LAB6\Task2\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          #include "stdio.h"
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .data, align 4
     44          SRAM_HandleTypeDef hsram1;
     45          
     46          /* USER CODE BEGIN PV */
     47          uint16_t addr = 0x0000;
     48          uint8_t readData = 0x0000;
   \                     readData:
   \        0x0   0x00               DC8 0
   \        0x1   0x00 0x00          DC8 0, 0, 0

   \              0x00
     49          uint8_t buffer[15] = {0x0011,0x0022,0x0033,0x0044,0x0055,0x0066,0x0077,0x0088,0x0099,0x00aa,0x00bb,0x00cc,0x00dd,0x00ee,0x00ff};
   \                     buffer:
   \        0x4   0x11 0x22          DC8 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238

   \              0x33 0x44    

   \              0x55 0x66    

   \              0x77 0x88    

   \              0x99 0xAA    

   \              0xBB 0xCC    

   \              0xDD 0xEE
   \       0x12   0xFF 0x00          DC8 255, 0
   \                     hsram1:
   \       0x14   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x24   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x34   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x44   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x54   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \                     addr:
   \       0x64   0x0000             DC16 0
     50          /* USER CODE END PV */
     51          
     52          /* Private function prototypes -----------------------------------------------*/
     53          void SystemClock_Config(void);
     54          static void MX_GPIO_Init(void);
     55          static void MX_FMC_Init(void);
     56          /* USER CODE BEGIN PFP */
     57          
     58          /* USER CODE END PFP */
     59          
     60          /* Private user code ---------------------------------------------------------*/
     61          /* USER CODE BEGIN 0 */
     62          
     63          /* USER CODE END 0 */
     64          
     65          /**
     66            * @brief  The application entry point.
     67            * @retval int
     68            */

   \                                 In section .text, align 2, keep-with-next
     69          int main(void)
     70          {
   \                     main: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB08E             SUB      SP,SP,#+56
     71            /* USER CODE BEGIN 1 */
     72          
     73            /* USER CODE END 1 */
     74            
     75          
     76            /* MCU Configuration--------------------------------------------------------*/
     77          
     78            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     79            HAL_Init();
   \        0x4   0x....'....        BL       HAL_Init
     80          
     81            /* USER CODE BEGIN Init */
     82          
     83            /* USER CODE END Init */
     84          
     85            /* Configure the system clock */
     86            SystemClock_Config();
   \        0x8   0x....'....        BL       SystemClock_Config
     87          
     88            /* USER CODE BEGIN SysInit */
     89          
     90            /* USER CODE END SysInit */
     91          
     92            /* Initialize all configured peripherals */
     93            MX_GPIO_Init();
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
     94            MX_FMC_Init();
   \       0x10   0x....             ADR.N    R6,??DataTable2  ;; 0x25, 0x78, 0x00, 0x00
   \       0x12   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40023830
   \       0x14   0x....             LDR.N    R5,??DataTable2_2
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0xF041 0x0120      ORR      R1,R1,#0x20
   \       0x1C   0x6001             STR      R1,[R0, #+0]
   \       0x1E   0xF240 0x37FF      MOVW     R7,#+1023
   \       0x22   0x6802             LDR      R2,[R0, #+0]
   \       0x24   0xF002 0x0220      AND      R2,R2,#0x20
   \       0x28   0x9200             STR      R2,[SP, #+0]
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0x9900             LDR      R1,[SP, #+0]
   \       0x2E   0x9200             STR      R2,[SP, #+0]
   \       0x30   0x6803             LDR      R3,[R0, #+0]
   \       0x32   0xF043 0x0380      ORR      R3,R3,#0x80
   \       0x36   0x6003             STR      R3,[R0, #+0]
   \       0x38   0x6801             LDR      R1,[R0, #+0]
   \       0x3A   0xF001 0x0180      AND      R1,R1,#0x80
   \       0x3E   0x9100             STR      R1,[SP, #+0]
   \       0x40   0x9900             LDR      R1,[SP, #+0]
   \       0x42   0x9200             STR      R2,[SP, #+0]
   \       0x44   0x6803             LDR      R3,[R0, #+0]
   \       0x46   0xF043 0x0310      ORR      R3,R3,#0x10
   \       0x4A   0x6003             STR      R3,[R0, #+0]
   \       0x4C   0x6801             LDR      R1,[R0, #+0]
   \       0x4E   0xF001 0x0110      AND      R1,R1,#0x10
   \       0x52   0x9100             STR      R1,[SP, #+0]
   \       0x54   0x9900             LDR      R1,[SP, #+0]
   \       0x56   0x9200             STR      R2,[SP, #+0]
   \       0x58   0x6803             LDR      R3,[R0, #+0]
   \       0x5A   0xF043 0x0308      ORR      R3,R3,#0x8
   \       0x5E   0x6003             STR      R3,[R0, #+0]
   \       0x60   0x6801             LDR      R1,[R0, #+0]
   \       0x62   0xF001 0x0108      AND      R1,R1,#0x8
   \       0x66   0x9100             STR      R1,[SP, #+0]
   \       0x68   0x9900             LDR      R1,[SP, #+0]
   \       0x6A   0x9200             STR      R2,[SP, #+0]
   \       0x6C   0x221C             MOVS     R2,#+28
   \       0x6E   0x6803             LDR      R3,[R0, #+0]
   \       0x70   0xF043 0x0340      ORR      R3,R3,#0x40
   \       0x74   0x6003             STR      R3,[R0, #+0]
   \       0x76   0x2100             MOVS     R1,#+0
   \       0x78   0x6800             LDR      R0,[R0, #+0]
   \       0x7A   0xF000 0x0040      AND      R0,R0,#0x40
   \       0x7E   0x9000             STR      R0,[SP, #+0]
   \       0x80   0x9800             LDR      R0,[SP, #+0]
   \       0x82   0xA807             ADD      R0,SP,#+28
   \       0x84   0x....'....        BL       memset
   \       0x88   0x221C             MOVS     R2,#+28
   \       0x8A   0x2100             MOVS     R1,#+0
   \       0x8C   0x4668             MOV      R0,SP
   \       0x8E   0x....'....        BL       memset
   \       0x92   0xF04F 0x4020      MOV      R0,#-1610612736
   \       0x96   0x....             LDR.N    R1,??DataTable2_3  ;; 0xa0000104
   \       0x98   0x6168             STR      R0,[R5, #+20]
   \       0x9A   0x61A9             STR      R1,[R5, #+24]
   \       0x9C   0x2004             MOVS     R0,#+4
   \       0x9E   0x2100             MOVS     R1,#+0
   \       0xA0   0x220F             MOVS     R2,#+15
   \       0xA2   0x61E8             STR      R0,[R5, #+28]
   \       0xA4   0x6229             STR      R1,[R5, #+32]
   \       0xA6   0x6269             STR      R1,[R5, #+36]
   \       0xA8   0x62A9             STR      R1,[R5, #+40]
   \       0xAA   0x62E9             STR      R1,[R5, #+44]
   \       0xAC   0x6329             STR      R1,[R5, #+48]
   \       0xAE   0x6369             STR      R1,[R5, #+52]
   \       0xB0   0x63A9             STR      R1,[R5, #+56]
   \       0xB2   0x6429             STR      R1,[R5, #+64]
   \       0xB4   0x64A9             STR      R1,[R5, #+72]
   \       0xB6   0x6529             STR      R1,[R5, #+80]
   \       0xB8   0x9208             STR      R2,[SP, #+32]
   \       0xBA   0x920A             STR      R2,[SP, #+40]
   \       0xBC   0xF44F 0x5080      MOV      R0,#+4096
   \       0xC0   0x210F             MOVS     R1,#+15
   \       0xC2   0x2211             MOVS     R2,#+17
   \       0xC4   0x63E8             STR      R0,[R5, #+60]
   \       0xC6   0x9107             STR      R1,[SP, #+28]
   \       0xC8   0x920C             STR      R2,[SP, #+48]
   \       0xCA   0xF44F 0x4080      MOV      R0,#+16384
   \       0xCE   0x21FF             MOVS     R1,#+255
   \       0xD0   0x220F             MOVS     R2,#+15
   \       0xD2   0x6468             STR      R0,[R5, #+68]
   \       0xD4   0x9109             STR      R1,[SP, #+36]
   \       0xD6   0x9200             STR      R2,[SP, #+0]
   \       0xD8   0x9201             STR      R2,[SP, #+4]
   \       0xDA   0x9102             STR      R1,[SP, #+8]
   \       0xDC   0x9203             STR      R2,[SP, #+12]
   \       0xDE   0x2000             MOVS     R0,#+0
   \       0xE0   0x2210             MOVS     R2,#+16
   \       0xE2   0x2111             MOVS     R1,#+17
   \       0xE4   0x64E8             STR      R0,[R5, #+76]
   \       0xE6   0x65A8             STR      R0,[R5, #+88]
   \       0xE8   0x2310             MOVS     R3,#+16
   \       0xEA   0x900D             STR      R0,[SP, #+52]
   \       0xEC   0x9204             STR      R2,[SP, #+16]
   \       0xEE   0x9105             STR      R1,[SP, #+20]
   \       0xF0   0x9006             STR      R0,[SP, #+24]
   \       0xF2   0x930B             STR      R3,[SP, #+44]
   \       0xF4   0x466A             MOV      R2,SP
   \       0xF6   0xA907             ADD      R1,SP,#+28
   \       0xF8   0xF105 0x0014      ADD      R0,R5,#+20
   \       0xFC   0x....'....        BL       HAL_SRAM_Init
   \      0x100   0xE00E             B.N      ??main_0
     95            /* USER CODE BEGIN 2 */
     96          
     97            /* USER CODE END 2 */
     98            /* Infinite loop */
     99            /* USER CODE BEGIN WHILE */
    100            while (1)
    101            {
    102              
    103              while (addr != 0x03FF){
    104                for (int i = 0; i < sizeof(buffer); i++){
   \                     ??main_1: (+1)
   \      0x102   0x2400             MOVS     R4,#+0
    105                    HAL_SRAM_Write_8b(&hsram1, (uint32_t*)addr, (uint8_t*)buffer[i], 0x00000008);
   \                     ??main_2: (+1)
   \      0x104   0x1928             ADDS     R0,R5,R4
   \      0x106   0x7902             LDRB     R2,[R0, #+4]
   \      0x108   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \      0x10C   0x....'....        BL       HAL_SRAM_Write_8b
    106                    addr++;
   \      0x110   0xF8B5 0x0064      LDRH     R0,[R5, #+100]
    107                }
   \      0x114   0x1C64             ADDS     R4,R4,#+1
   \      0x116   0x1C40             ADDS     R0,R0,#+1
   \      0x118   0x2C0F             CMP      R4,#+15
   \      0x11A   0xF8A5 0x0064      STRH     R0,[R5, #+100]
   \      0x11E   0xD3F1             BCC.N    ??main_2
    108              }
   \                     ??main_0: (+1)
   \      0x120   0xF8B5 0x0064      LDRH     R0,[R5, #+100]
   \      0x124   0x42B8             CMP      R0,R7
   \      0x126   0xD1EC             BNE.N    ??main_1
    109              addr =0x0000;
   \                     ??main_3: (+1)
   \      0x128   0x2100             MOVS     R1,#+0
   \      0x12A   0xF8A5 0x1064      STRH     R1,[R5, #+100]
    110              while (addr != 0x03FF){
    111                for (int i = 0; i < sizeof(buffer); i++){
   \                     ??main_4: (+1)
   \      0x12E   0x240F             MOVS     R4,#+15
    112                    HAL_SRAM_Read_8b(&hsram1, (uint32_t*)addr, (uint8_t*)readData, 0x0008);
   \                     ??main_5: (+1)
   \      0x130   0x782A             LDRB     R2,[R5, #+0]
   \      0x132   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \      0x136   0x....'....        BL       HAL_SRAM_Read_8b
    113                    printf("%x", readData);
   \      0x13A   0x7829             LDRB     R1,[R5, #+0]
   \      0x13C   0x4630             MOV      R0,R6
   \      0x13E   0x....'....        BL       printf
    114                    addr++;
   \      0x142   0xF8B5 0x0064      LDRH     R0,[R5, #+100]
   \      0x146   0x1C40             ADDS     R0,R0,#+1
    115                }
   \      0x148   0x1E64             SUBS     R4,R4,#+1
   \      0x14A   0xF8A5 0x0064      STRH     R0,[R5, #+100]
   \      0x14E   0xD1EF             BNE.N    ??main_5
    116              }
   \      0x150   0xB280             UXTH     R0,R0
   \      0x152   0x42B8             CMP      R0,R7
   \      0x154   0xD1EB             BNE.N    ??main_4
   \      0x156   0xE7E7             B.N      ??main_3
    117              /* USER CODE END WHILE */
    118          
    119              /* USER CODE BEGIN 3 */
    120            
    121            /* USER CODE END 3 */
    122          }
    123          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF8B5 0x1064      LDRH     R1,[R5, #+100]
   \        0x4   0x2308             MOVS     R3,#+8
   \        0x6   0xF105 0x0014      ADD      R0,R5,#+20
   \        0xA   0x4770             BX       LR
    124          
    125          /**
    126            * @brief System Clock Configuration
    127            * @retval None
    128            */

   \                                 In section .text, align 2, keep-with-next
    129          void SystemClock_Config(void)
    130          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2214             MOVS     R2,#+20
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       memset
    131            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    132            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    133          
    134            /** Configure the main internal regulator output voltage 
    135            */
    136            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0x....             LDR.N    R0,??DataTable2_4  ;; 0x40023840
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x24   0x6001             STR      R1,[R0, #+0]
    137            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0x6800             LDR      R0,[R0, #+0]
   \       0x2A   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   \       0x30   0x9800             LDR      R0,[SP, #+0]
   \       0x32   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40007000
   \       0x34   0x9100             STR      R1,[SP, #+0]
    138            /** Initializes the CPU, AHB and APB busses clocks 
    139            */
    140            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
   \       0x36   0x2102             MOVS     R1,#+2
   \       0x38   0x6802             LDR      R2,[R0, #+0]
   \       0x3A   0xF442 0x4240      ORR      R2,R2,#0xC000
   \       0x3E   0x6002             STR      R2,[R0, #+0]
    141            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x6800             LDR      R0,[R0, #+0]
   \       0x44   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0x9800             LDR      R0,[SP, #+0]
   \       0x4C   0x9106             STR      R1,[SP, #+24]
   \       0x4E   0x9209             STR      R2,[SP, #+36]
    142            RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
   \       0x50   0x2110             MOVS     R1,#+16
   \       0x52   0x910A             STR      R1,[SP, #+40]
    143            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \       0x54   0x2202             MOVS     R2,#+2
    144            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
   \       0x56   0x2100             MOVS     R1,#+0
   \       0x58   0x920C             STR      R2,[SP, #+48]
   \       0x5A   0x910D             STR      R1,[SP, #+52]
    145            RCC_OscInitStruct.PLL.PLLM = 8;
   \       0x5C   0x2208             MOVS     R2,#+8
    146            RCC_OscInitStruct.PLL.PLLN = 180;
   \       0x5E   0x21B4             MOVS     R1,#+180
   \       0x60   0x920E             STR      R2,[SP, #+56]
   \       0x62   0x910F             STR      R1,[SP, #+60]
    147            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   \       0x64   0x2202             MOVS     R2,#+2
    148            RCC_OscInitStruct.PLL.PLLQ = 4;
   \       0x66   0x2104             MOVS     R1,#+4
   \       0x68   0x9210             STR      R2,[SP, #+64]
   \       0x6A   0x9111             STR      R1,[SP, #+68]
    149            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x6C   0xA806             ADD      R0,SP,#+24
   \       0x6E   0x....'....        BL       HAL_RCC_OscConfig
    150            {
    151              Error_Handler();
    152            }
    153            /** Activate the Over-Drive mode 
    154            */
    155            if (HAL_PWREx_EnableOverDrive() != HAL_OK)
   \       0x72   0x....'....        BL       HAL_PWREx_EnableOverDrive
    156            {
    157              Error_Handler();
    158            }
    159            /** Initializes the CPU, AHB and APB busses clocks 
    160            */
    161            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    162                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    163            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x9102             STR      R1,[SP, #+8]
    164            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x9203             STR      R2,[SP, #+12]
   \       0x7E   0x200F             MOVS     R0,#+15
    165            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x80   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x9104             STR      R1,[SP, #+16]
    166            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x88   0xF44F 0x5280      MOV      R2,#+4096
   \       0x8C   0x9205             STR      R2,[SP, #+20]
    167          
    168            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
   \       0x8E   0x2105             MOVS     R1,#+5
   \       0x90   0xA801             ADD      R0,SP,#+4
   \       0x92   0x....'....        BL       HAL_RCC_ClockConfig
    169            {
    170              Error_Handler();
    171            }
    172          }
   \       0x96   0xB013             ADD      SP,SP,#+76
   \       0x98   0xBD00             POP      {PC}             ;; return
    173          
    174          /* FMC initialization function */
    175          static void MX_FMC_Init(void)
    176          {
    177          
    178            /* USER CODE BEGIN FMC_Init 0 */
    179          
    180            /* USER CODE END FMC_Init 0 */
    181          
    182            FMC_NORSRAM_TimingTypeDef Timing = {0};
    183            FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
    184          
    185            /* USER CODE BEGIN FMC_Init 1 */
    186          
    187            /* USER CODE END FMC_Init 1 */
    188          
    189            /** Perform the SRAM1 memory initialization sequence
    190            */
    191            hsram1.Instance = FMC_NORSRAM_DEVICE;
    192            hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
    193            /* hsram1.Init */
    194            hsram1.Init.NSBank = FMC_NORSRAM_BANK3;
    195            hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
    196            hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
    197            hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
    198            hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
    199            hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
    200            hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
    201            hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
    202            hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
    203            hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
    204            hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
    205            hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
    206            hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
    207            hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
    208            hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
    209            /* Timing */
    210            Timing.AddressSetupTime = 15;
    211            Timing.AddressHoldTime = 15;
    212            Timing.DataSetupTime = 255;
    213            Timing.BusTurnAroundDuration = 15;
    214            Timing.CLKDivision = 16;
    215            Timing.DataLatency = 17;
    216            Timing.AccessMode = FMC_ACCESS_MODE_A;
    217            /* ExtTiming */
    218            ExtTiming.AddressSetupTime = 15;
    219            ExtTiming.AddressHoldTime = 15;
    220            ExtTiming.DataSetupTime = 255;
    221            ExtTiming.BusTurnAroundDuration = 15;
    222            ExtTiming.CLKDivision = 16;
    223            ExtTiming.DataLatency = 17;
    224            ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
    225          
    226            if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
    227            {
    228              Error_Handler( );
    229            }
    230          
    231            /* USER CODE BEGIN FMC_Init 2 */
    232          
    233            /* USER CODE END FMC_Init 2 */
    234          }
    235          
    236          /**
    237            * @brief GPIO Initialization Function
    238            * @param None
    239            * @retval None
    240            */
    241          static void MX_GPIO_Init(void)
    242          {
    243          
    244            /* GPIO Ports Clock Enable */
    245            __HAL_RCC_GPIOF_CLK_ENABLE();
    246            __HAL_RCC_GPIOH_CLK_ENABLE();
    247            __HAL_RCC_GPIOE_CLK_ENABLE();
    248            __HAL_RCC_GPIOD_CLK_ENABLE();
    249            __HAL_RCC_GPIOG_CLK_ENABLE();
    250          
    251          }
    252          
    253          /* USER CODE BEGIN 4 */
    254          
    255          /* USER CODE END 4 */
    256          
    257          /**
    258            * @brief  This function is executed in case of error occurrence.
    259            * @retval None
    260            */

   \                                 In section .text, align 2, keep-with-next
    261          void Error_Handler(void)
    262          {
    263            /* USER CODE BEGIN Error_Handler_Debug */
    264            /* User can add his own implementation to report the HAL error return state */
    265          
    266            /* USER CODE END Error_Handler_Debug */
    267          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x25 0x78          DC8      0x25, 0x78, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     readData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xA000'0104        DC32     0xa0000104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x25 0x78          DC8 "%x"

   \              0x00
   \        0x3   0x00               DC8 0
    268          
    269          #ifdef  USE_FULL_ASSERT
    270          /**
    271            * @brief  Reports the name of the source file and the source line number
    272            *         where the assert_param error has occurred.
    273            * @param  file: pointer to the source file name
    274            * @param  line: assert_param error line source number
    275            * @retval None
    276            */
    277          void assert_failed(uint8_t *file, uint32_t line)
    278          { 
    279            /* USER CODE BEGIN 6 */
    280            /* User can add his own implementation to report the file name and line number,
    281               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    282            /* USER CODE END 6 */
    283          }
    284          #endif /* USE_FULL_ASSERT */
    285          
    286          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
      80   SystemClock_Config
        80   -> HAL_PWREx_EnableOverDrive
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      80   main
        80   -> HAL_Init
        80   -> HAL_SRAM_Init
        80   -> HAL_SRAM_Read_8b
        80   -> HAL_SRAM_Write_8b
        80   -> SystemClock_Config
        80   -> memset
        80   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
      12  ?Subroutine0
       4  ?_0
       2  Error_Handler
     154  SystemClock_Config
     344  main
     102  readData
          buffer
          hsram1
          addr

 
 102 bytes in section .data
   4 bytes in section .rodata
 536 bytes in section .text
 
 536 bytes of CODE  memory
   4 bytes of CONST memory
 102 bytes of DATA  memory

Errors: none
Warnings: none
