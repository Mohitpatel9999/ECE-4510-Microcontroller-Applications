###############################################################################
#
# IAR ANSI C/C++ Compiler V8.42.1.233/W32 for ARM         19/Mar/2020  10:30:34
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW7\HW7\Src\main.c
#    Command line      =
#        -f C:\Users\mohit\AppData\Local\Temp\EW98AF.tmp
#        ("C:\Users\mohit\Desktop\Microapps projects\HW7\HW7\Src\main.c" -D
#        USE_HAL_DRIVER -D STM32F429xx -lC "C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM\HW7\List" -o "C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM\HW7\Obj" --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Full.h"
#        -I "C:\Users\mohit\Desktop\Microapps projects\HW7\HW7\EWARM/../Inc\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\" -I
#        "C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\"
#        -I "C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM/../Drivers/CMSIS/Include\" -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\mohit\Desktop\Microapps
#        projects\HW7\HW7\EWARM\HW7\List\main.lst
#    Object file       =
#        C:\Users\mohit\Desktop\Microapps projects\HW7\HW7\EWARM\HW7\Obj\main.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\mohit\Desktop\Microapps projects\HW7\HW7\Src\main.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * @file           : main.c
      5            * @brief          : Main program body
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          /* USER CODE END Header */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          
     24          /* Private includes ----------------------------------------------------------*/
     25          /* USER CODE BEGIN Includes */
     26          
     27          /* USER CODE END Includes */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* USER CODE BEGIN PTD */
     31          
     32          /* USER CODE END PTD */
     33          
     34          /* Private define ------------------------------------------------------------*/
     35          /* USER CODE BEGIN PD */
     36          /* USER CODE END PD */
     37          
     38          /* Private macro -------------------------------------------------------------*/
     39          /* USER CODE BEGIN PM */
     40          
     41          /* USER CODE END PM */
     42          
     43          /* Private variables ---------------------------------------------------------*/

   \                                 In section .bss, align 4
     44          ADC_HandleTypeDef hadc1;
   \                     hadc1:
   \        0x0                      DS8 72
     45          
     46          /* USER CODE BEGIN PV */
     47          extern float tempreture;
     48          /* USER CODE END PV */
     49          
     50          /* Private function prototypes -----------------------------------------------*/
     51          void SystemClock_Config(void);
     52          static void MX_GPIO_Init(void);
     53          static void MX_ADC1_Init(void);
     54          /* USER CODE BEGIN PFP */
     55          
     56          /* USER CODE END PFP */
     57          
     58          /* Private user code ---------------------------------------------------------*/
     59          /* USER CODE BEGIN 0 */
     60          
     61          /* USER CODE END 0 */
     62          
     63          /**
     64            * @brief  The application entry point.
     65            * @retval int
     66            */

   \                                 In section .text, align 4, keep-with-next
     67          int main(void)
     68          {
   \                     main: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xED2D 0x8B02      VPUSH    {D8}
   \        0x6   0xB084             SUB      SP,SP,#+16
     69            /* USER CODE BEGIN 1 */
     70            /* USER CODE END 1 */
     71            /* MCU Configuration--------------------------------------------------------*/
     72            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
     73            HAL_Init();
   \        0x8   0x....'....        BL       HAL_Init
     74            /* USER CODE BEGIN Init */
     75            /* USER CODE END Init */
     76            /* Configure the system clock */
     77            SystemClock_Config();
   \        0xC   0x....'....        BL       SystemClock_Config
     78            /* USER CODE BEGIN SysInit */
     79            /* USER CODE END SysInit */
     80            /* Initialize all configured peripherals */
     81            MX_GPIO_Init();
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x9000             STR      R0,[SP, #+0]
     82            MX_ADC1_Init();
     83            /* USER CODE BEGIN 2 */
     84            while (SysTick_Config (5000000));                         // 50ms
     85            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);    // out1 = 0
   \       0x14   0xED9F 0x....      VLDR.W   S16,??DataTable2  ;; 0x42f00000
   \       0x18   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40023830
   \       0x1A   0x....             LDR.N    R4,??DataTable2_4
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0xF041 0x0180      ORR      R1,R1,#0x80
   \       0x22   0x6001             STR      R1,[R0, #+0]
   \       0x24   0xEDDF 0x....      VLDR.W   S17,??DataTable2_1  ;; 0x42200000
   \       0x28   0x6802             LDR      R2,[R0, #+0]
   \       0x2A   0xF002 0x0280      AND      R2,R2,#0x80
   \       0x2E   0x9200             STR      R2,[SP, #+0]
   \       0x30   0x2200             MOVS     R2,#+0
   \       0x32   0x9900             LDR      R1,[SP, #+0]
   \       0x34   0x9200             STR      R2,[SP, #+0]
   \       0x36   0x2210             MOVS     R2,#+16
   \       0x38   0x6803             LDR      R3,[R0, #+0]
   \       0x3A   0xF043 0x0301      ORR      R3,R3,#0x1
   \       0x3E   0x6003             STR      R3,[R0, #+0]
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0x6800             LDR      R0,[R0, #+0]
   \       0x44   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0x9800             LDR      R0,[SP, #+0]
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x....'....        BL       memset
   \       0x52   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40012000
   \       0x54   0x6020             STR      R0,[R4, #+0]
   \       0x56   0x2100             MOVS     R1,#+0
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0x6120             STR      R0,[R4, #+16]
   \       0x5C   0xF884 0x0020      STRB     R0,[R4, #+32]
   \       0x60   0x6061             STR      R1,[R4, #+4]
   \       0x62   0x60A1             STR      R1,[R4, #+8]
   \       0x64   0x2101             MOVS     R1,#+1
   \       0x66   0x....             LDR.N    R0,??DataTable2_6  ;; 0xf000001
   \       0x68   0x62A0             STR      R0,[R4, #+40]
   \       0x6A   0x7621             STRB     R1,[R4, #+24]
   \       0x6C   0x2001             MOVS     R0,#+1
   \       0x6E   0x2100             MOVS     R1,#+0
   \       0x70   0x61E0             STR      R0,[R4, #+28]
   \       0x72   0x6160             STR      R0,[R4, #+20]
   \       0x74   0x62E1             STR      R1,[R4, #+44]
   \       0x76   0x60E1             STR      R1,[R4, #+12]
   \       0x78   0xF884 0x1030      STRB     R1,[R4, #+48]
   \       0x7C   0x4620             MOV      R0,R4
   \       0x7E   0x....'....        BL       HAL_ADC_Init
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0x2101             MOVS     R1,#+1
   \       0x86   0x9000             STR      R0,[SP, #+0]
   \       0x88   0x9101             STR      R1,[SP, #+4]
   \       0x8A   0x9002             STR      R0,[SP, #+8]
   \       0x8C   0x4669             MOV      R1,SP
   \       0x8E   0x4620             MOV      R0,R4
   \       0x90   0x....'....        BL       HAL_ADC_ConfigChannel
   \       0x94   0x....             LDR.N    R0,??DataTable2_7  ;; 0xe000e010
   \       0x96   0x....             LDR.N    R1,??DataTable2_8  ;; 0x4c4b3f
   \       0x98   0x....             LDR.N    R3,??DataTable2_9  ;; 0xe000ed23
   \       0x9A   0x6041             STR      R1,[R0, #+4]
   \       0x9C   0x22F0             MOVS     R2,#+240
   \       0x9E   0x701A             STRB     R2,[R3, #+0]
   \       0xA0   0x2100             MOVS     R1,#+0
   \       0xA2   0x6081             STR      R1,[R0, #+8]
   \       0xA4   0x2207             MOVS     R2,#+7
   \       0xA6   0x6002             STR      R2,[R0, #+0]
   \       0xA8   0x2200             MOVS     R2,#+0
   \       0xAA   0x....             LDR.N    R4,??DataTable2_10  ;; 0x40020000
   \       0xAC   0x....'....        BL       ?Subroutine0
     86            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);    // out0 = 0
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0xB0   0x2200             MOVS     R2,#+0
   \                     ??main_0: (+1)
   \       0xB2   0x2102             MOVS     R1,#+2
   \       0xB4   0x....'....        BL       ??Subroutine0_0
     87            /* USER CODE END 2 */
     88            /* Infinite loop */
     89            /* USER CODE BEGIN WHILE */
     90            while (1)
     91            {
     92              if (tempreture >= 0.0 && tempreture < 40.0){
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0xB8   0x....             LDR.N    R0,??DataTable2_11
   \       0xBA   0xED90 0x0A00      VLDR     S0,[R0, #0]
   \       0xBE   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \       0xC2   0xEEF1 0xFA10      FMSTAT
   \       0xC6   0xDB04             BLT.N    ??main_1
   \       0xC8   0xEEB4 0x0A68      VCMP.F32 S0,S17
   \       0xCC   0xEEF1 0xFA10      FMSTAT
   \       0xD0   0xD415             BMI.N    ??main_2
     93                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);    // out1 = 0
     94                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);      // out0 = 1
     95              }
     96              else if (tempreture >= 40.0 && tempreture < 120.0){
   \                     ??main_1: (+1)
   \       0xD2   0xEEB4 0x0A68      VCMP.F32 S0,S17
   \       0xD6   0xEEF1 0xFA10      FMSTAT
   \       0xDA   0xDB04             BLT.N    ??main_3
   \       0xDC   0xEEB4 0x0A48      VCMP.F32 S0,S16
   \       0xE0   0xEEF1 0xFA10      FMSTAT
   \       0xE4   0xD40B             BMI.N    ??main_2
     97                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);    // out1 = 1
     98                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);      // out0 = 0
     99              }
    100              else if (tempreture >= 120.0 && tempreture <= 200.0){
   \                     ??main_3: (+1)
   \       0xE6   0xEEB4 0x0A48      VCMP.F32 S0,S16
   \       0xEA   0xEEF1 0xFA10      FMSTAT
   \       0xEE   0xDBE3             BLT.N    ??CrossCallReturnLabel_0
   \       0xF0   0xEDDF 0x....      VLDR.W   S1,??DataTable2_2  ;; 0x43480001
   \       0xF4   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \       0xF8   0xEEF1 0xFA10      FMSTAT
   \       0xFC   0xD5DC             BPL.N    ??CrossCallReturnLabel_0
    101                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);    // out1 = 1
   \                     ??main_2: (+1)
   \       0xFE   0x2200             MOVS     R2,#+0
   \      0x100   0x....'....        BL       ?Subroutine0
    102                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);      // out0 = 1
   \                     ??CrossCallReturnLabel_1: (+1)
   \      0x104   0x2201             MOVS     R2,#+1
   \      0x106   0xE7D4             B.N      ??main_0
    103              }
    104              /* USER CODE END WHILE */
    105              /* USER CODE BEGIN 3 */
    106            }
    107            /* USER CODE END 3 */
    108          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2104             MOVS     R1,#+4
   \                     ??Subroutine0_0: (+1)
   \        0x2   0x4620             MOV      R0,R4
   \        0x4   0x....'....        B.W      HAL_GPIO_WritePin
    109          
    110          /**
    111            * @brief System Clock Configuration
    112            * @retval None
    113            */

   \                                 In section .text, align 2, keep-with-next
    114          void SystemClock_Config(void)
    115          {
   \                     SystemClock_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x2230             MOVS     R2,#+48
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xA806             ADD      R0,SP,#+24
   \        0xA   0x....'....        BL       memset
   \        0xE   0x2214             MOVS     R2,#+20
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       memset
    116            RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    117            RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    118          
    119            /** Configure the main internal regulator output voltage 
    120            */
    121            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
    122            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
    123            /** Initializes the CPU, AHB and APB busses clocks 
    124            */
    125            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    126            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \       0x1C   0xF44F 0x3380      MOV      R3,#+65536
   \       0x20   0x....             LDR.N    R0,??DataTable2_12  ;; 0x40023840
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF041 0x5180      ORR      R1,R1,#0x10000000
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x....             LDR.N    R0,??DataTable2_13  ;; 0x40007000
   \       0x38   0x9100             STR      R1,[SP, #+0]
   \       0x3A   0x6802             LDR      R2,[R0, #+0]
   \       0x3C   0xF422 0x4240      BIC      R2,R2,#0xC000
   \       0x40   0xF442 0x4280      ORR      R2,R2,#0x4000
   \       0x44   0x6002             STR      R2,[R0, #+0]
   \       0x46   0x2201             MOVS     R2,#+1
   \       0x48   0x6800             LDR      R0,[R0, #+0]
   \       0x4A   0xF400 0x4040      AND      R0,R0,#0xC000
   \       0x4E   0x9000             STR      R0,[SP, #+0]
    127            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    128            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    129            RCC_OscInitStruct.PLL.PLLM = 4;
    130            RCC_OscInitStruct.PLL.PLLN = 100;
    131            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    132            RCC_OscInitStruct.PLL.PLLQ = 4;
    133            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \       0x50   0xA806             ADD      R0,SP,#+24
   \       0x52   0x9900             LDR      R1,[SP, #+0]
   \       0x54   0x9206             STR      R2,[SP, #+24]
   \       0x56   0x2102             MOVS     R1,#+2
   \       0x58   0xF44F 0x0280      MOV      R2,#+4194304
   \       0x5C   0x910C             STR      R1,[SP, #+48]
   \       0x5E   0x920D             STR      R2,[SP, #+52]
   \       0x60   0x2104             MOVS     R1,#+4
   \       0x62   0x2264             MOVS     R2,#+100
   \       0x64   0x910E             STR      R1,[SP, #+56]
   \       0x66   0x920F             STR      R2,[SP, #+60]
   \       0x68   0x2102             MOVS     R1,#+2
   \       0x6A   0x2204             MOVS     R2,#+4
   \       0x6C   0x9307             STR      R3,[SP, #+28]
   \       0x6E   0x9110             STR      R1,[SP, #+64]
   \       0x70   0x9211             STR      R2,[SP, #+68]
   \       0x72   0x....'....        BL       HAL_RCC_OscConfig
    134            {
    135              Error_Handler();
    136            }
    137            /** Initializes the CPU, AHB and APB busses clocks 
    138            */
    139            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    140                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    141            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x9102             STR      R1,[SP, #+8]
    142            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \       0x7A   0x2200             MOVS     R2,#+0
   \       0x7C   0x9203             STR      R2,[SP, #+12]
   \       0x7E   0x200F             MOVS     R0,#+15
    143            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   \       0x80   0xF44F 0x51A0      MOV      R1,#+5120
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x9104             STR      R1,[SP, #+16]
    144            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   \       0x88   0xF44F 0x5280      MOV      R2,#+4096
   \       0x8C   0x9205             STR      R2,[SP, #+20]
    145          
    146            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
   \       0x8E   0x2103             MOVS     R1,#+3
   \       0x90   0xA801             ADD      R0,SP,#+4
   \       0x92   0x....'....        BL       HAL_RCC_ClockConfig
    147            {
    148              Error_Handler();
    149            }
    150          }
   \       0x96   0xB013             ADD      SP,SP,#+76
   \       0x98   0xBD00             POP      {PC}             ;; return
    151          
    152          /**
    153            * @brief ADC1 Initialization Function
    154            * @param None
    155            * @retval None
    156            */
    157          static void MX_ADC1_Init(void)
    158          {
    159          
    160            /* USER CODE BEGIN ADC1_Init 0 */
    161          
    162            /* USER CODE END ADC1_Init 0 */
    163          
    164            ADC_ChannelConfTypeDef sConfig = {0};
    165          
    166            /* USER CODE BEGIN ADC1_Init 1 */
    167          
    168            /* USER CODE END ADC1_Init 1 */
    169            /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    170            */
    171            hadc1.Instance = ADC1;
    172            hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
    173            hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    174            hadc1.Init.ScanConvMode = DISABLE;
    175            hadc1.Init.ContinuousConvMode = ENABLE;
    176            hadc1.Init.DiscontinuousConvMode = DISABLE;
    177            hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    178            hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    179            hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    180            hadc1.Init.NbrOfConversion = 1;
    181            hadc1.Init.DMAContinuousRequests = DISABLE;
    182            hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    183            if (HAL_ADC_Init(&hadc1) != HAL_OK)
    184            {
    185              Error_Handler();
    186            }
    187            /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    188            */
    189            sConfig.Channel = ADC_CHANNEL_0;
    190            sConfig.Rank = 1;
    191            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    192            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
    193            {
    194              Error_Handler();
    195            }
    196            /* USER CODE BEGIN ADC1_Init 2 */
    197          
    198            /* USER CODE END ADC1_Init 2 */
    199          
    200          }
    201          
    202          /**
    203            * @brief GPIO Initialization Function
    204            * @param None
    205            * @retval None
    206            */
    207          static void MX_GPIO_Init(void)
    208          {
    209          
    210            /* GPIO Ports Clock Enable */
    211            __HAL_RCC_GPIOH_CLK_ENABLE();
    212            __HAL_RCC_GPIOA_CLK_ENABLE();
    213          
    214          }
    215          
    216          /* USER CODE BEGIN 4 */
    217          
    218          /* USER CODE END 4 */
    219          
    220          /**
    221            * @brief  Period elapsed callback in non blocking mode
    222            * @note   This function is called  when TIM1 interrupt took place, inside
    223            * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
    224            * a global variable "uwTick" used as application time base.
    225            * @param  htim : TIM handle
    226            * @retval None
    227            */

   \                                 In section .text, align 2, keep-with-next
    228          void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    229          {
    230            /* USER CODE BEGIN Callback 0 */
    231          
    232            /* USER CODE END Callback 0 */
    233            if (htim->Instance == TIM1) {
   \                     HAL_TIM_PeriodElapsedCallback: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x....             LDR.N    R1,??DataTable2_14  ;; 0x40010000
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xBF08             IT       EQ
    234              HAL_IncTick();
   \        0x8   0x....'....        BEQ.W    HAL_IncTick
    235            }
    236            /* USER CODE BEGIN Callback 1 */
    237          
    238            /* USER CODE END Callback 1 */
    239          }
   \        0xC   0x4770             BX       LR               ;; return
    240          
    241          /**
    242            * @brief  This function is executed in case of error occurrence.
    243            * @retval None
    244            */

   \                                 In section .text, align 2, keep-with-next
    245          void Error_Handler(void)
    246          {
    247            /* USER CODE BEGIN Error_Handler_Debug */
    248            /* User can add his own implementation to report the HAL error return state */
    249          
    250            /* USER CODE END Error_Handler_Debug */
    251          }
   \                     Error_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x42F0'0000        DC32     0x42f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4220'0000        DC32     0x42200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x4348'0001        DC32     0x43480001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     hadc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x4001'2000        DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x0F00'0001        DC32     0xf000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x004C'4B3F        DC32     0x4c4b3f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0xE000'ED23        DC32     0xe000ed23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x....'....        DC32     tempreture

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \        0x0   0x4001'0000        DC32     0x40010000
    252          
    253          #ifdef  USE_FULL_ASSERT
    254          /**
    255            * @brief  Reports the name of the source file and the source line number
    256            *         where the assert_param error has occurred.
    257            * @param  file: pointer to the source file name
    258            * @param  line: assert_param error line source number
    259            * @retval None
    260            */
    261          void assert_failed(uint8_t *file, uint32_t line)
    262          { 
    263            /* USER CODE BEGIN 6 */
    264            /* User can add his own implementation to report the file name and line number,
    265               tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    266            /* USER CODE END 6 */
    267          }
    268          #endif /* USE_FULL_ASSERT */
    269          
    270          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Error_Handler
       0   HAL_TIM_PeriodElapsedCallback
         0   -> HAL_IncTick
      80   SystemClock_Config
        80   -> HAL_RCC_ClockConfig
        80   -> HAL_RCC_OscConfig
        80   -> memset
      32   main
        32   -> HAL_ADC_ConfigChannel
        32   -> HAL_ADC_Init
        32   -> HAL_GPIO_WritePin
        32   -> HAL_Init
        32   -> SystemClock_Config
        32   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       8  ?Subroutine0
       2  Error_Handler
      14  HAL_TIM_PeriodElapsedCallback
     154  SystemClock_Config
      72  hadc1
     264  main

 
  72 bytes in section .bss
 502 bytes in section .text
 
 502 bytes of CODE memory
  72 bytes of DATA memory

Errors: none
Warnings: none
